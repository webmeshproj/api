//
//Copyright 2023.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: v1/admin_messages.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ACLAction is the action of an ACL.
type ACLAction int32

const (
	// ACLActionDeny denies the action.
	ACLAction_ACLActionDeny ACLAction = 0
	// ACLActionAllow allows the action.
	ACLAction_ACLActionAllow ACLAction = 1
)

// Enum value maps for ACLAction.
var (
	ACLAction_name = map[int32]string{
		0: "ACLActionDeny",
		1: "ACLActionAllow",
	}
	ACLAction_value = map[string]int32{
		"ACLActionDeny":  0,
		"ACLActionAllow": 1,
	}
)

func (x ACLAction) Enum() *ACLAction {
	p := new(ACLAction)
	*p = x
	return p
}

func (x ACLAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACLAction) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_admin_messages_proto_enumTypes[0].Descriptor()
}

func (ACLAction) Type() protoreflect.EnumType {
	return &file_v1_admin_messages_proto_enumTypes[0]
}

func (x ACLAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACLAction.Descriptor instead.
func (ACLAction) EnumDescriptor() ([]byte, []int) {
	return file_v1_admin_messages_proto_rawDescGZIP(), []int{0}
}

// RaftACL is an ACL that applies to Raft nodes.
type RaftACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the ACL.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// patterns is a list of node patterns this ACL applies to.
	Patterns []string `protobuf:"bytes,2,rep,name=patterns,proto3" json:"patterns,omitempty"`
	// action is the action of this ACL. For RaftACLs This is
	// if the matching nodes are allowed to vote in elections
	// or not.
	Action ACLAction `protobuf:"varint,3,opt,name=action,proto3,enum=ACLAction" json:"action,omitempty"`
}

func (x *RaftACL) Reset() {
	*x = RaftACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_admin_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftACL) ProtoMessage() {}

func (x *RaftACL) ProtoReflect() protoreflect.Message {
	mi := &file_v1_admin_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftACL.ProtoReflect.Descriptor instead.
func (*RaftACL) Descriptor() ([]byte, []int) {
	return file_v1_admin_messages_proto_rawDescGZIP(), []int{0}
}

func (x *RaftACL) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RaftACL) GetPatterns() []string {
	if x != nil {
		return x.Patterns
	}
	return nil
}

func (x *RaftACL) GetAction() ACLAction {
	if x != nil {
		return x.Action
	}
	return ACLAction_ACLActionDeny
}

// RaftACLList is a list of RaftACLs.
type RaftACLList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// items is a list of RaftACLs.
	Items []*RaftACL `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RaftACLList) Reset() {
	*x = RaftACLList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_admin_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftACLList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftACLList) ProtoMessage() {}

func (x *RaftACLList) ProtoReflect() protoreflect.Message {
	mi := &file_v1_admin_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftACLList.ProtoReflect.Descriptor instead.
func (*RaftACLList) Descriptor() ([]byte, []int) {
	return file_v1_admin_messages_proto_rawDescGZIP(), []int{1}
}

func (x *RaftACLList) GetItems() []*RaftACL {
	if x != nil {
		return x.Items
	}
	return nil
}

// DeleteRaftACLRequest is a request to delete a RaftACL.
type DeleteRaftACLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the ACL.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteRaftACLRequest) Reset() {
	*x = DeleteRaftACLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_admin_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRaftACLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRaftACLRequest) ProtoMessage() {}

func (x *DeleteRaftACLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_admin_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRaftACLRequest.ProtoReflect.Descriptor instead.
func (*DeleteRaftACLRequest) Descriptor() ([]byte, []int) {
	return file_v1_admin_messages_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteRaftACLRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GetRaftACLRequest is a request to get a RaftACL.
type GetRaftACLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the ACL.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRaftACLRequest) Reset() {
	*x = GetRaftACLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_admin_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRaftACLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaftACLRequest) ProtoMessage() {}

func (x *GetRaftACLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_admin_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaftACLRequest.ProtoReflect.Descriptor instead.
func (*GetRaftACLRequest) Descriptor() ([]byte, []int) {
	return file_v1_admin_messages_proto_rawDescGZIP(), []int{3}
}

func (x *GetRaftACLRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_v1_admin_messages_proto protoreflect.FileDescriptor

var file_v1_admin_messages_proto_rawDesc = []byte{
	0x0a, 0x17, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a, 0x07, 0x52, 0x61,
	0x66, 0x74, 0x41, 0x43, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x41, 0x43, 0x4c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2d, 0x0a, 0x0b, 0x52, 0x61, 0x66,
	0x74, 0x41, 0x43, 0x4c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x41, 0x43,
	0x4c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x2a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x61, 0x66, 0x74, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x61, 0x66, 0x74, 0x41,
	0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x32, 0x0a,
	0x09, 0x41, 0x43, 0x4c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43,
	0x4c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x79, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x43, 0x4c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x10,
	0x01, 0x42, 0x3c, 0x42, 0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x77, 0x65, 0x62, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_admin_messages_proto_rawDescOnce sync.Once
	file_v1_admin_messages_proto_rawDescData = file_v1_admin_messages_proto_rawDesc
)

func file_v1_admin_messages_proto_rawDescGZIP() []byte {
	file_v1_admin_messages_proto_rawDescOnce.Do(func() {
		file_v1_admin_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_admin_messages_proto_rawDescData)
	})
	return file_v1_admin_messages_proto_rawDescData
}

var file_v1_admin_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_admin_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_v1_admin_messages_proto_goTypes = []interface{}{
	(ACLAction)(0),               // 0: ACLAction
	(*RaftACL)(nil),              // 1: RaftACL
	(*RaftACLList)(nil),          // 2: RaftACLList
	(*DeleteRaftACLRequest)(nil), // 3: DeleteRaftACLRequest
	(*GetRaftACLRequest)(nil),    // 4: GetRaftACLRequest
}
var file_v1_admin_messages_proto_depIdxs = []int32{
	0, // 0: RaftACL.action:type_name -> ACLAction
	1, // 1: RaftACLList.items:type_name -> RaftACL
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_v1_admin_messages_proto_init() }
func file_v1_admin_messages_proto_init() {
	if File_v1_admin_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_admin_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_admin_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftACLList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_admin_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRaftACLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_admin_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRaftACLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_admin_messages_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_admin_messages_proto_goTypes,
		DependencyIndexes: file_v1_admin_messages_proto_depIdxs,
		EnumInfos:         file_v1_admin_messages_proto_enumTypes,
		MessageInfos:      file_v1_admin_messages_proto_msgTypes,
	}.Build()
	File_v1_admin_messages_proto = out.File
	file_v1_admin_messages_proto_rawDesc = nil
	file_v1_admin_messages_proto_goTypes = nil
	file_v1_admin_messages_proto_depIdxs = nil
}
