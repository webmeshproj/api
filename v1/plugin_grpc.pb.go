//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/plugin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Plugin_GetInfo_FullMethodName   = "/v1.Plugin/GetInfo"
	Plugin_Configure_FullMethodName = "/v1.Plugin/Configure"
	Plugin_Close_FullMethodName     = "/v1.Plugin/Close"
)

// PluginClient is the client API for Plugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginClient interface {
	// GetInfo returns the information for the plugin.
	GetInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PluginInfo, error)
	// Configure starts and configures the plugin.
	Configure(ctx context.Context, in *PluginConfiguration, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Close closes the plugin. It is called when the node is shutting down.
	Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type pluginClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginClient(cc grpc.ClientConnInterface) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) GetInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PluginInfo, error) {
	out := new(PluginInfo)
	err := c.cc.Invoke(ctx, Plugin_GetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) Configure(ctx context.Context, in *PluginConfiguration, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Plugin_Configure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Plugin_Close_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServer is the server API for Plugin service.
// All implementations must embed UnimplementedPluginServer
// for forward compatibility
type PluginServer interface {
	// GetInfo returns the information for the plugin.
	GetInfo(context.Context, *emptypb.Empty) (*PluginInfo, error)
	// Configure starts and configures the plugin.
	Configure(context.Context, *PluginConfiguration) (*emptypb.Empty, error)
	// Close closes the plugin. It is called when the node is shutting down.
	Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedPluginServer()
}

// UnimplementedPluginServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServer struct {
}

func (UnimplementedPluginServer) GetInfo(context.Context, *emptypb.Empty) (*PluginInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedPluginServer) Configure(context.Context, *PluginConfiguration) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedPluginServer) Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedPluginServer) mustEmbedUnimplementedPluginServer() {}

// UnsafePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServer will
// result in compilation errors.
type UnsafePluginServer interface {
	mustEmbedUnimplementedPluginServer()
}

func RegisterPluginServer(s grpc.ServiceRegistrar, srv PluginServer) {
	s.RegisterService(&Plugin_ServiceDesc, srv)
}

func _Plugin_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plugin_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).GetInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plugin_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).Configure(ctx, req.(*PluginConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plugin_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).Close(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Plugin_ServiceDesc is the grpc.ServiceDesc for Plugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Plugin_GetInfo_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Plugin_Configure_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Plugin_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/plugin.proto",
}

const (
	AuthPlugin_Authenticate_FullMethodName = "/v1.AuthPlugin/Authenticate"
)

// AuthPluginClient is the client API for AuthPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthPluginClient interface {
	// Authenticate authenticates a request.
	Authenticate(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error)
}

type authPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthPluginClient(cc grpc.ClientConnInterface) AuthPluginClient {
	return &authPluginClient{cc}
}

func (c *authPluginClient) Authenticate(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error) {
	out := new(AuthenticationResponse)
	err := c.cc.Invoke(ctx, AuthPlugin_Authenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthPluginServer is the server API for AuthPlugin service.
// All implementations must embed UnimplementedAuthPluginServer
// for forward compatibility
type AuthPluginServer interface {
	// Authenticate authenticates a request.
	Authenticate(context.Context, *AuthenticationRequest) (*AuthenticationResponse, error)
	mustEmbedUnimplementedAuthPluginServer()
}

// UnimplementedAuthPluginServer must be embedded to have forward compatible implementations.
type UnimplementedAuthPluginServer struct {
}

func (UnimplementedAuthPluginServer) Authenticate(context.Context, *AuthenticationRequest) (*AuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthPluginServer) mustEmbedUnimplementedAuthPluginServer() {}

// UnsafeAuthPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthPluginServer will
// result in compilation errors.
type UnsafeAuthPluginServer interface {
	mustEmbedUnimplementedAuthPluginServer()
}

func RegisterAuthPluginServer(s grpc.ServiceRegistrar, srv AuthPluginServer) {
	s.RegisterService(&AuthPlugin_ServiceDesc, srv)
}

func _AuthPlugin_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPluginServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthPlugin_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPluginServer).Authenticate(ctx, req.(*AuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthPlugin_ServiceDesc is the grpc.ServiceDesc for AuthPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AuthPlugin",
	HandlerType: (*AuthPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AuthPlugin_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/plugin.proto",
}

const (
	WatchPlugin_Emit_FullMethodName = "/v1.WatchPlugin/Emit"
)

// WatchPluginClient is the client API for WatchPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatchPluginClient interface {
	// Emit handles a watch event.
	Emit(ctx context.Context, in *Event, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type watchPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchPluginClient(cc grpc.ClientConnInterface) WatchPluginClient {
	return &watchPluginClient{cc}
}

func (c *watchPluginClient) Emit(ctx context.Context, in *Event, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WatchPlugin_Emit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchPluginServer is the server API for WatchPlugin service.
// All implementations must embed UnimplementedWatchPluginServer
// for forward compatibility
type WatchPluginServer interface {
	// Emit handles a watch event.
	Emit(context.Context, *Event) (*emptypb.Empty, error)
	mustEmbedUnimplementedWatchPluginServer()
}

// UnimplementedWatchPluginServer must be embedded to have forward compatible implementations.
type UnimplementedWatchPluginServer struct {
}

func (UnimplementedWatchPluginServer) Emit(context.Context, *Event) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Emit not implemented")
}
func (UnimplementedWatchPluginServer) mustEmbedUnimplementedWatchPluginServer() {}

// UnsafeWatchPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatchPluginServer will
// result in compilation errors.
type UnsafeWatchPluginServer interface {
	mustEmbedUnimplementedWatchPluginServer()
}

func RegisterWatchPluginServer(s grpc.ServiceRegistrar, srv WatchPluginServer) {
	s.RegisterService(&WatchPlugin_ServiceDesc, srv)
}

func _WatchPlugin_Emit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchPluginServer).Emit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchPlugin_Emit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchPluginServer).Emit(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

// WatchPlugin_ServiceDesc is the grpc.ServiceDesc for WatchPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatchPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.WatchPlugin",
	HandlerType: (*WatchPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Emit",
			Handler:    _WatchPlugin_Emit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/plugin.proto",
}

const (
	IPAMPlugin_Allocate_FullMethodName = "/v1.IPAMPlugin/Allocate"
	IPAMPlugin_Release_FullMethodName  = "/v1.IPAMPlugin/Release"
)

// IPAMPluginClient is the client API for IPAMPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPAMPluginClient interface {
	// Allocate allocates an IP for a node.
	Allocate(ctx context.Context, in *AllocateIPRequest, opts ...grpc.CallOption) (*AllocatedIP, error)
	// Release releases an IP for a node.
	Release(ctx context.Context, in *ReleaseIPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type iPAMPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewIPAMPluginClient(cc grpc.ClientConnInterface) IPAMPluginClient {
	return &iPAMPluginClient{cc}
}

func (c *iPAMPluginClient) Allocate(ctx context.Context, in *AllocateIPRequest, opts ...grpc.CallOption) (*AllocatedIP, error) {
	out := new(AllocatedIP)
	err := c.cc.Invoke(ctx, IPAMPlugin_Allocate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPAMPluginClient) Release(ctx context.Context, in *ReleaseIPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IPAMPlugin_Release_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPAMPluginServer is the server API for IPAMPlugin service.
// All implementations must embed UnimplementedIPAMPluginServer
// for forward compatibility
type IPAMPluginServer interface {
	// Allocate allocates an IP for a node.
	Allocate(context.Context, *AllocateIPRequest) (*AllocatedIP, error)
	// Release releases an IP for a node.
	Release(context.Context, *ReleaseIPRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedIPAMPluginServer()
}

// UnimplementedIPAMPluginServer must be embedded to have forward compatible implementations.
type UnimplementedIPAMPluginServer struct {
}

func (UnimplementedIPAMPluginServer) Allocate(context.Context, *AllocateIPRequest) (*AllocatedIP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allocate not implemented")
}
func (UnimplementedIPAMPluginServer) Release(context.Context, *ReleaseIPRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedIPAMPluginServer) mustEmbedUnimplementedIPAMPluginServer() {}

// UnsafeIPAMPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPAMPluginServer will
// result in compilation errors.
type UnsafeIPAMPluginServer interface {
	mustEmbedUnimplementedIPAMPluginServer()
}

func RegisterIPAMPluginServer(s grpc.ServiceRegistrar, srv IPAMPluginServer) {
	s.RegisterService(&IPAMPlugin_ServiceDesc, srv)
}

func _IPAMPlugin_Allocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPAMPluginServer).Allocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPAMPlugin_Allocate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPAMPluginServer).Allocate(ctx, req.(*AllocateIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPAMPlugin_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPAMPluginServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPAMPlugin_Release_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPAMPluginServer).Release(ctx, req.(*ReleaseIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IPAMPlugin_ServiceDesc is the grpc.ServiceDesc for IPAMPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPAMPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.IPAMPlugin",
	HandlerType: (*IPAMPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Allocate",
			Handler:    _IPAMPlugin_Allocate_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _IPAMPlugin_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/plugin.proto",
}

const (
	StorageQuerierPlugin_InjectQuerier_FullMethodName = "/v1.StorageQuerierPlugin/InjectQuerier"
)

// StorageQuerierPluginClient is the client API for StorageQuerierPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageQuerierPluginClient interface {
	// InjectQuerier is a stream opened by the node to faciliate read operations
	// against the mesh state. The signature is misleading, but it is required to be
	// able to stream the query results back to the node. The node will open a stream
	// to the plugin and send a PluginQueryResult message for every query that is
	// received.
	InjectQuerier(ctx context.Context, opts ...grpc.CallOption) (StorageQuerierPlugin_InjectQuerierClient, error)
}

type storageQuerierPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageQuerierPluginClient(cc grpc.ClientConnInterface) StorageQuerierPluginClient {
	return &storageQuerierPluginClient{cc}
}

func (c *storageQuerierPluginClient) InjectQuerier(ctx context.Context, opts ...grpc.CallOption) (StorageQuerierPlugin_InjectQuerierClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageQuerierPlugin_ServiceDesc.Streams[0], StorageQuerierPlugin_InjectQuerier_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storageQuerierPluginInjectQuerierClient{stream}
	return x, nil
}

type StorageQuerierPlugin_InjectQuerierClient interface {
	Send(*QueryRequest) error
	Recv() (*QueryResponse, error)
	grpc.ClientStream
}

type storageQuerierPluginInjectQuerierClient struct {
	grpc.ClientStream
}

func (x *storageQuerierPluginInjectQuerierClient) Send(m *QueryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageQuerierPluginInjectQuerierClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StorageQuerierPluginServer is the server API for StorageQuerierPlugin service.
// All implementations must embed UnimplementedStorageQuerierPluginServer
// for forward compatibility
type StorageQuerierPluginServer interface {
	// InjectQuerier is a stream opened by the node to faciliate read operations
	// against the mesh state. The signature is misleading, but it is required to be
	// able to stream the query results back to the node. The node will open a stream
	// to the plugin and send a PluginQueryResult message for every query that is
	// received.
	InjectQuerier(StorageQuerierPlugin_InjectQuerierServer) error
	mustEmbedUnimplementedStorageQuerierPluginServer()
}

// UnimplementedStorageQuerierPluginServer must be embedded to have forward compatible implementations.
type UnimplementedStorageQuerierPluginServer struct {
}

func (UnimplementedStorageQuerierPluginServer) InjectQuerier(StorageQuerierPlugin_InjectQuerierServer) error {
	return status.Errorf(codes.Unimplemented, "method InjectQuerier not implemented")
}
func (UnimplementedStorageQuerierPluginServer) mustEmbedUnimplementedStorageQuerierPluginServer() {}

// UnsafeStorageQuerierPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageQuerierPluginServer will
// result in compilation errors.
type UnsafeStorageQuerierPluginServer interface {
	mustEmbedUnimplementedStorageQuerierPluginServer()
}

func RegisterStorageQuerierPluginServer(s grpc.ServiceRegistrar, srv StorageQuerierPluginServer) {
	s.RegisterService(&StorageQuerierPlugin_ServiceDesc, srv)
}

func _StorageQuerierPlugin_InjectQuerier_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageQuerierPluginServer).InjectQuerier(&storageQuerierPluginInjectQuerierServer{stream})
}

type StorageQuerierPlugin_InjectQuerierServer interface {
	Send(*QueryResponse) error
	Recv() (*QueryRequest, error)
	grpc.ServerStream
}

type storageQuerierPluginInjectQuerierServer struct {
	grpc.ServerStream
}

func (x *storageQuerierPluginInjectQuerierServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageQuerierPluginInjectQuerierServer) Recv() (*QueryRequest, error) {
	m := new(QueryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StorageQuerierPlugin_ServiceDesc is the grpc.ServiceDesc for StorageQuerierPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageQuerierPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.StorageQuerierPlugin",
	HandlerType: (*StorageQuerierPluginServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InjectQuerier",
			Handler:       _StorageQuerierPlugin_InjectQuerier_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/plugin.proto",
}
