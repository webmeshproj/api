// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/network_acls.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NetworkACL with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkACL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NetworkACL with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NetworkACLMultiError, or
// nil if none found.
func (m *NetworkACL) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkACL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Priority

	// no validation rules for Action

	if len(errors) > 0 {
		return NetworkACLMultiError(errors)
	}

	return nil
}

// NetworkACLMultiError is an error wrapping multiple validation errors
// returned by NetworkACL.ValidateAll() if the designated constraints aren't met.
type NetworkACLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkACLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkACLMultiError) AllErrors() []error { return m }

// NetworkACLValidationError is the validation error returned by
// NetworkACL.Validate if the designated constraints aren't met.
type NetworkACLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkACLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkACLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkACLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkACLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkACLValidationError) ErrorName() string { return "NetworkACLValidationError" }

// Error satisfies the builtin error interface
func (e NetworkACLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkACL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkACLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkACLValidationError{}

// Validate checks the field values on NetworkACLs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkACLs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NetworkACLs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NetworkACLsMultiError, or
// nil if none found.
func (m *NetworkACLs) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkACLs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NetworkACLsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NetworkACLsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NetworkACLsValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NetworkACLsMultiError(errors)
	}

	return nil
}

// NetworkACLsMultiError is an error wrapping multiple validation errors
// returned by NetworkACLs.ValidateAll() if the designated constraints aren't met.
type NetworkACLsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkACLsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkACLsMultiError) AllErrors() []error { return m }

// NetworkACLsValidationError is the validation error returned by
// NetworkACLs.Validate if the designated constraints aren't met.
type NetworkACLsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkACLsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkACLsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkACLsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkACLsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkACLsValidationError) ErrorName() string { return "NetworkACLsValidationError" }

// Error satisfies the builtin error interface
func (e NetworkACLsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkACLs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkACLsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkACLsValidationError{}

// Validate checks the field values on Route with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Route) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Route with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RouteMultiError, or nil if none found.
func (m *Route) ValidateAll() error {
	return m.validate(true)
}

func (m *Route) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Node

	// no validation rules for NextHopNode

	if len(errors) > 0 {
		return RouteMultiError(errors)
	}

	return nil
}

// RouteMultiError is an error wrapping multiple validation errors returned by
// Route.ValidateAll() if the designated constraints aren't met.
type RouteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteMultiError) AllErrors() []error { return m }

// RouteValidationError is the validation error returned by Route.Validate if
// the designated constraints aren't met.
type RouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteValidationError) ErrorName() string { return "RouteValidationError" }

// Error satisfies the builtin error interface
func (e RouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteValidationError{}

// Validate checks the field values on Routes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Routes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Routes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoutesMultiError, or nil if none found.
func (m *Routes) ValidateAll() error {
	return m.validate(true)
}

func (m *Routes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoutesValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoutesValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoutesValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoutesMultiError(errors)
	}

	return nil
}

// RoutesMultiError is an error wrapping multiple validation errors returned by
// Routes.ValidateAll() if the designated constraints aren't met.
type RoutesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoutesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoutesMultiError) AllErrors() []error { return m }

// RoutesValidationError is the validation error returned by Routes.Validate if
// the designated constraints aren't met.
type RoutesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoutesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoutesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoutesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoutesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoutesValidationError) ErrorName() string { return "RoutesValidationError" }

// Error satisfies the builtin error interface
func (e RoutesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoutes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoutesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoutesValidationError{}

// Validate checks the field values on NetworkAction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NetworkAction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NetworkActionMultiError, or
// nil if none found.
func (m *NetworkAction) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SrcNode

	// no validation rules for SrcCidr

	// no validation rules for DstNode

	// no validation rules for DstCidr

	if len(errors) > 0 {
		return NetworkActionMultiError(errors)
	}

	return nil
}

// NetworkActionMultiError is an error wrapping multiple validation errors
// returned by NetworkAction.ValidateAll() if the designated constraints
// aren't met.
type NetworkActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkActionMultiError) AllErrors() []error { return m }

// NetworkActionValidationError is the validation error returned by
// NetworkAction.Validate if the designated constraints aren't met.
type NetworkActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkActionValidationError) ErrorName() string { return "NetworkActionValidationError" }

// Error satisfies the builtin error interface
func (e NetworkActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkActionValidationError{}
