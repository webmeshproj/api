//
//Copyright 2023.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/campfire.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Campfire_Announce_FullMethodName        = "/v1.Campfire/Announce"
	Campfire_SendOffer_FullMethodName       = "/v1.Campfire/SendOffer"
	Campfire_SendAnswer_FullMethodName      = "/v1.Campfire/SendAnswer"
	Campfire_SendCandidate_FullMethodName   = "/v1.Campfire/SendCandidate"
	Campfire_ReceiveMessages_FullMethodName = "/v1.Campfire/ReceiveMessages"
)

// CampfireClient is the client API for Campfire service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CampfireClient interface {
	// Announce is used to announce presence at a campfire. This is
	// only required when waiting for others to join.
	Announce(ctx context.Context, in *CampfireMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SendOffer is used to send a WebRTC offer to another peer.
	SendOffer(ctx context.Context, in *CampfireMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SendAnswer is used to send a WebRTC answer to another peer.
	SendAnswer(ctx context.Context, in *CampfireMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SendCandidate is used to send a WebRTC candidate to another peer.
	SendCandidate(ctx context.Context, in *CampfireMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ReceiveMessages is used to receive messages from other peers.
	ReceiveMessages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Campfire_ReceiveMessagesClient, error)
}

type campfireClient struct {
	cc grpc.ClientConnInterface
}

func NewCampfireClient(cc grpc.ClientConnInterface) CampfireClient {
	return &campfireClient{cc}
}

func (c *campfireClient) Announce(ctx context.Context, in *CampfireMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Campfire_Announce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campfireClient) SendOffer(ctx context.Context, in *CampfireMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Campfire_SendOffer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campfireClient) SendAnswer(ctx context.Context, in *CampfireMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Campfire_SendAnswer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campfireClient) SendCandidate(ctx context.Context, in *CampfireMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Campfire_SendCandidate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campfireClient) ReceiveMessages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Campfire_ReceiveMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Campfire_ServiceDesc.Streams[0], Campfire_ReceiveMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &campfireReceiveMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Campfire_ReceiveMessagesClient interface {
	Recv() (*CampfireMessage, error)
	grpc.ClientStream
}

type campfireReceiveMessagesClient struct {
	grpc.ClientStream
}

func (x *campfireReceiveMessagesClient) Recv() (*CampfireMessage, error) {
	m := new(CampfireMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CampfireServer is the server API for Campfire service.
// All implementations must embed UnimplementedCampfireServer
// for forward compatibility
type CampfireServer interface {
	// Announce is used to announce presence at a campfire. This is
	// only required when waiting for others to join.
	Announce(context.Context, *CampfireMessage) (*emptypb.Empty, error)
	// SendOffer is used to send a WebRTC offer to another peer.
	SendOffer(context.Context, *CampfireMessage) (*emptypb.Empty, error)
	// SendAnswer is used to send a WebRTC answer to another peer.
	SendAnswer(context.Context, *CampfireMessage) (*emptypb.Empty, error)
	// SendCandidate is used to send a WebRTC candidate to another peer.
	SendCandidate(context.Context, *CampfireMessage) (*emptypb.Empty, error)
	// ReceiveMessages is used to receive messages from other peers.
	ReceiveMessages(*emptypb.Empty, Campfire_ReceiveMessagesServer) error
	mustEmbedUnimplementedCampfireServer()
}

// UnimplementedCampfireServer must be embedded to have forward compatible implementations.
type UnimplementedCampfireServer struct {
}

func (UnimplementedCampfireServer) Announce(context.Context, *CampfireMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Announce not implemented")
}
func (UnimplementedCampfireServer) SendOffer(context.Context, *CampfireMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOffer not implemented")
}
func (UnimplementedCampfireServer) SendAnswer(context.Context, *CampfireMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAnswer not implemented")
}
func (UnimplementedCampfireServer) SendCandidate(context.Context, *CampfireMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCandidate not implemented")
}
func (UnimplementedCampfireServer) ReceiveMessages(*emptypb.Empty, Campfire_ReceiveMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessages not implemented")
}
func (UnimplementedCampfireServer) mustEmbedUnimplementedCampfireServer() {}

// UnsafeCampfireServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CampfireServer will
// result in compilation errors.
type UnsafeCampfireServer interface {
	mustEmbedUnimplementedCampfireServer()
}

func RegisterCampfireServer(s grpc.ServiceRegistrar, srv CampfireServer) {
	s.RegisterService(&Campfire_ServiceDesc, srv)
}

func _Campfire_Announce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampfireMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampfireServer).Announce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Campfire_Announce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampfireServer).Announce(ctx, req.(*CampfireMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Campfire_SendOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampfireMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampfireServer).SendOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Campfire_SendOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampfireServer).SendOffer(ctx, req.(*CampfireMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Campfire_SendAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampfireMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampfireServer).SendAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Campfire_SendAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampfireServer).SendAnswer(ctx, req.(*CampfireMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Campfire_SendCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampfireMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampfireServer).SendCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Campfire_SendCandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampfireServer).SendCandidate(ctx, req.(*CampfireMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Campfire_ReceiveMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CampfireServer).ReceiveMessages(m, &campfireReceiveMessagesServer{stream})
}

type Campfire_ReceiveMessagesServer interface {
	Send(*CampfireMessage) error
	grpc.ServerStream
}

type campfireReceiveMessagesServer struct {
	grpc.ServerStream
}

func (x *campfireReceiveMessagesServer) Send(m *CampfireMessage) error {
	return x.ServerStream.SendMsg(m)
}

// Campfire_ServiceDesc is the grpc.ServiceDesc for Campfire service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Campfire_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Campfire",
	HandlerType: (*CampfireServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Announce",
			Handler:    _Campfire_Announce_Handler,
		},
		{
			MethodName: "SendOffer",
			Handler:    _Campfire_SendOffer_Handler,
		},
		{
			MethodName: "SendAnswer",
			Handler:    _Campfire_SendAnswer_Handler,
		},
		{
			MethodName: "SendCandidate",
			Handler:    _Campfire_SendCandidate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveMessages",
			Handler:       _Campfire_ReceiveMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/campfire.proto",
}
