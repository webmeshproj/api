//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: v1/node.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ClusterStatus is the status of the node in the cluster.
type ClusterStatus int32

const (
	// CLUSTER_STATUS_UNKNOWN is the default status.
	ClusterStatus_CLUSTER_STATUS_UNKNOWN ClusterStatus = 0
	// CLUSTER_LEADER is the status for the leader node.
	ClusterStatus_CLUSTER_LEADER ClusterStatus = 1
	// CLUSTER_VOTER is the status for a voter node.
	ClusterStatus_CLUSTER_VOTER ClusterStatus = 2
	// CLUSTER_OBSERVER is the status for a non-voter node.
	ClusterStatus_CLUSTER_OBSERVER ClusterStatus = 3
	// CLUSTER_NODE is the status of a node that is not a part of the storage consensus.
	ClusterStatus_CLUSTER_NODE ClusterStatus = 4
)

// Enum value maps for ClusterStatus.
var (
	ClusterStatus_name = map[int32]string{
		0: "CLUSTER_STATUS_UNKNOWN",
		1: "CLUSTER_LEADER",
		2: "CLUSTER_VOTER",
		3: "CLUSTER_OBSERVER",
		4: "CLUSTER_NODE",
	}
	ClusterStatus_value = map[string]int32{
		"CLUSTER_STATUS_UNKNOWN": 0,
		"CLUSTER_LEADER":         1,
		"CLUSTER_VOTER":          2,
		"CLUSTER_OBSERVER":       3,
		"CLUSTER_NODE":           4,
	}
)

func (x ClusterStatus) Enum() *ClusterStatus {
	p := new(ClusterStatus)
	*p = x
	return p
}

func (x ClusterStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_node_proto_enumTypes[0].Descriptor()
}

func (ClusterStatus) Type() protoreflect.EnumType {
	return &file_v1_node_proto_enumTypes[0]
}

func (x ClusterStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterStatus.Descriptor instead.
func (ClusterStatus) EnumDescriptor() ([]byte, []int) {
	return file_v1_node_proto_rawDescGZIP(), []int{0}
}

// Feature is a list of features supported by a node.
type Feature int32

const (
	// FEATURE_NONE is the default feature set.
	Feature_FEATURE_NONE Feature = 0
	// NODES is the feature for nodes. This is always supported.
	Feature_NODES Feature = 1
	// LEADER_PROXY is the feature for leader proxying.
	Feature_LEADER_PROXY Feature = 2
	// MESH_API is the feature for the mesh API.
	// This will be deprecated in favor of the MEMBERSHIP feature.
	Feature_MESH_API Feature = 3
	// ADMIN_API is the feature for the admin API.
	Feature_ADMIN_API Feature = 4
	// MEMBERSHIP is the feature for membership. This is always supported on storage-providing members.
	Feature_MEMBERSHIP Feature = 5
	// METRICS is the feature for exposing metrics.
	Feature_METRICS Feature = 6
	// ICE_NEGOTIATION is the feature for ICE negotiation.
	Feature_ICE_NEGOTIATION Feature = 7
	// TURN_SERVER is the feature for TURN server.
	Feature_TURN_SERVER Feature = 8
	// MESH_DNS is the feature for mesh DNS.
	Feature_MESH_DNS Feature = 9
	// FORWARD_MESH_DNS is the feature for forwarding mesh DNS lookups to other meshes.
	Feature_FORWARD_MESH_DNS Feature = 10
	// STORAGE_QUERIER is the feature for querying, publishing, and subscribing to mesh state.
	Feature_STORAGE_QUERIER Feature = 11
	// STORAGE_PROVIDER is the feature for being able to provide distributed storage.
	Feature_STORAGE_PROVIDER Feature = 12
	// REGISTRAR is the feature for being able to register aliases to node IDs and/or public keys.
	Feature_REGISTRAR Feature = 13
)

// Enum value maps for Feature.
var (
	Feature_name = map[int32]string{
		0:  "FEATURE_NONE",
		1:  "NODES",
		2:  "LEADER_PROXY",
		3:  "MESH_API",
		4:  "ADMIN_API",
		5:  "MEMBERSHIP",
		6:  "METRICS",
		7:  "ICE_NEGOTIATION",
		8:  "TURN_SERVER",
		9:  "MESH_DNS",
		10: "FORWARD_MESH_DNS",
		11: "STORAGE_QUERIER",
		12: "STORAGE_PROVIDER",
		13: "REGISTRAR",
	}
	Feature_value = map[string]int32{
		"FEATURE_NONE":     0,
		"NODES":            1,
		"LEADER_PROXY":     2,
		"MESH_API":         3,
		"ADMIN_API":        4,
		"MEMBERSHIP":       5,
		"METRICS":          6,
		"ICE_NEGOTIATION":  7,
		"TURN_SERVER":      8,
		"MESH_DNS":         9,
		"FORWARD_MESH_DNS": 10,
		"STORAGE_QUERIER":  11,
		"STORAGE_PROVIDER": 12,
		"REGISTRAR":        13,
	}
)

func (x Feature) Enum() *Feature {
	p := new(Feature)
	*p = x
	return p
}

func (x Feature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Feature) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_node_proto_enumTypes[1].Descriptor()
}

func (Feature) Type() protoreflect.EnumType {
	return &file_v1_node_proto_enumTypes[1]
}

func (x Feature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Feature.Descriptor instead.
func (Feature) EnumDescriptor() ([]byte, []int) {
	return file_v1_node_proto_rawDescGZIP(), []int{1}
}

// EdgeAttribute are pre-defined edge attributes. They should
// be used as their string values.
type EdgeAttribute int32

const (
	// EDGE_ATTRIBUTE_UNKNOWN is an unknown edge attribute.
	EdgeAttribute_EDGE_ATTRIBUTE_UNKNOWN EdgeAttribute = 0
	// EDGE_ATTRIBUTE_NATIVE is a native edge attribute.
	EdgeAttribute_EDGE_ATTRIBUTE_NATIVE EdgeAttribute = 1
	// EDGE_ATTRIBUTE_ICE is an ICE edge attribute.
	EdgeAttribute_EDGE_ATTRIBUTE_ICE EdgeAttribute = 2
	// EDGE_ATTRIBUTE_LIBP2P is a libp2p edge attribute.
	EdgeAttribute_EDGE_ATTRIBUTE_LIBP2P EdgeAttribute = 3
)

// Enum value maps for EdgeAttribute.
var (
	EdgeAttribute_name = map[int32]string{
		0: "EDGE_ATTRIBUTE_UNKNOWN",
		1: "EDGE_ATTRIBUTE_NATIVE",
		2: "EDGE_ATTRIBUTE_ICE",
		3: "EDGE_ATTRIBUTE_LIBP2P",
	}
	EdgeAttribute_value = map[string]int32{
		"EDGE_ATTRIBUTE_UNKNOWN": 0,
		"EDGE_ATTRIBUTE_NATIVE":  1,
		"EDGE_ATTRIBUTE_ICE":     2,
		"EDGE_ATTRIBUTE_LIBP2P":  3,
	}
)

func (x EdgeAttribute) Enum() *EdgeAttribute {
	p := new(EdgeAttribute)
	*p = x
	return p
}

func (x EdgeAttribute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeAttribute) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_node_proto_enumTypes[2].Descriptor()
}

func (EdgeAttribute) Type() protoreflect.EnumType {
	return &file_v1_node_proto_enumTypes[2]
}

func (x EdgeAttribute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EdgeAttribute.Descriptor instead.
func (EdgeAttribute) EnumDescriptor() ([]byte, []int) {
	return file_v1_node_proto_rawDescGZIP(), []int{2}
}

// DataChannel are the data channels used when communicating over ICE
// with a node.
type DataChannel int32

const (
	// CHANNELS is the data channel used for negotiating new channels.
	// This is the first channel that is opened. The ID of the channel
	// should be 0.
	DataChannel_CHANNELS DataChannel = 0
	// CONNECTIONS is the data channel used for negotiating new connections.
	// This is a channel that is opened for each incoming connection from a
	// client. The ID should start at 0 and be incremented for each new connection.
	DataChannel_CONNECTIONS DataChannel = 1
)

// Enum value maps for DataChannel.
var (
	DataChannel_name = map[int32]string{
		0: "CHANNELS",
		1: "CONNECTIONS",
	}
	DataChannel_value = map[string]int32{
		"CHANNELS":    0,
		"CONNECTIONS": 1,
	}
)

func (x DataChannel) Enum() *DataChannel {
	p := new(DataChannel)
	*p = x
	return p
}

func (x DataChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_node_proto_enumTypes[3].Descriptor()
}

func (DataChannel) Type() protoreflect.EnumType {
	return &file_v1_node_proto_enumTypes[3]
}

func (x DataChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataChannel.Descriptor instead.
func (DataChannel) EnumDescriptor() ([]byte, []int) {
	return file_v1_node_proto_rawDescGZIP(), []int{3}
}

// FeaturePort describes a feature and the port it is advertised on.
type FeaturePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// feature is the feature.
	Feature Feature `protobuf:"varint,1,opt,name=feature,proto3,enum=v1.Feature" json:"feature,omitempty"`
	// port is the port the feature is advertised on.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *FeaturePort) Reset() {
	*x = FeaturePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeaturePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeaturePort) ProtoMessage() {}

func (x *FeaturePort) ProtoReflect() protoreflect.Message {
	mi := &file_v1_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeaturePort.ProtoReflect.Descriptor instead.
func (*FeaturePort) Descriptor() ([]byte, []int) {
	return file_v1_node_proto_rawDescGZIP(), []int{0}
}

func (x *FeaturePort) GetFeature() Feature {
	if x != nil {
		return x.Feature
	}
	return Feature_FEATURE_NONE
}

func (x *FeaturePort) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// MeshNode is a node that has been registered with the mesh.
type MeshNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the ID of the node.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// public_key is the public key of the node.
	PublicKey string `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	// primary_endpoint is the primary endpoint of the node.
	PrimaryEndpoint string `protobuf:"bytes,4,opt,name=primaryEndpoint,proto3" json:"primaryEndpoint,omitempty"`
	// wireguard_endpoints is a list of WireGuard endpoints for the node.
	WireguardEndpoints []string `protobuf:"bytes,5,rep,name=wireguardEndpoints,proto3" json:"wireguardEndpoints,omitempty"`
	// zone_awareness_id is the zone awareness ID of the node.
	ZoneAwarenessID string `protobuf:"bytes,6,opt,name=zoneAwarenessID,proto3" json:"zoneAwarenessID,omitempty"`
	// private_ipv4 is the private IPv4 address of the node.
	PrivateIPv4 string `protobuf:"bytes,7,opt,name=privateIPv4,proto3" json:"privateIPv4,omitempty"`
	// private_ipv6 is the private IPv6 address of the node.
	PrivateIPv6 string `protobuf:"bytes,8,opt,name=privateIPv6,proto3" json:"privateIPv6,omitempty"`
	// features are a list of features and the ports they are advertised on.
	Features []*FeaturePort `protobuf:"bytes,9,rep,name=features,proto3" json:"features,omitempty"`
	// multiaddrs are the multiaddrs of the node.
	Multiaddrs []string `protobuf:"bytes,10,rep,name=multiaddrs,proto3" json:"multiaddrs,omitempty"`
	// joined_at is the time the node joined the cluster.
	JoinedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=joinedAt,proto3" json:"joinedAt,omitempty"`
}

func (x *MeshNode) Reset() {
	*x = MeshNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshNode) ProtoMessage() {}

func (x *MeshNode) ProtoReflect() protoreflect.Message {
	mi := &file_v1_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshNode.ProtoReflect.Descriptor instead.
func (*MeshNode) Descriptor() ([]byte, []int) {
	return file_v1_node_proto_rawDescGZIP(), []int{1}
}

func (x *MeshNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MeshNode) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *MeshNode) GetPrimaryEndpoint() string {
	if x != nil {
		return x.PrimaryEndpoint
	}
	return ""
}

func (x *MeshNode) GetWireguardEndpoints() []string {
	if x != nil {
		return x.WireguardEndpoints
	}
	return nil
}

func (x *MeshNode) GetZoneAwarenessID() string {
	if x != nil {
		return x.ZoneAwarenessID
	}
	return ""
}

func (x *MeshNode) GetPrivateIPv4() string {
	if x != nil {
		return x.PrivateIPv4
	}
	return ""
}

func (x *MeshNode) GetPrivateIPv6() string {
	if x != nil {
		return x.PrivateIPv6
	}
	return ""
}

func (x *MeshNode) GetFeatures() []*FeaturePort {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *MeshNode) GetMultiaddrs() []string {
	if x != nil {
		return x.Multiaddrs
	}
	return nil
}

func (x *MeshNode) GetJoinedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinedAt
	}
	return nil
}

// NodeList is a list of nodes.
type NodeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// nodes is the list of nodes.
	Nodes []*MeshNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *NodeList) Reset() {
	*x = NodeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeList) ProtoMessage() {}

func (x *NodeList) ProtoReflect() protoreflect.Message {
	mi := &file_v1_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeList.ProtoReflect.Descriptor instead.
func (*NodeList) Descriptor() ([]byte, []int) {
	return file_v1_node_proto_rawDescGZIP(), []int{2}
}

func (x *NodeList) GetNodes() []*MeshNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// GetStatusRequest is a request to get the status of a node.
type GetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the ID of the node. If unset, the status of the
	// local node is returned.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_v1_node_proto_rawDescGZIP(), []int{3}
}

func (x *GetStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Status represents the status of a node.
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the ID of the node.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// description is an optional description provided
	// by the node.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// version is the version of the node.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// commit is the commit of the node.
	Commit string `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	// build_date is the build date of the node.
	BuildDate string `protobuf:"bytes,5,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`
	// uptime is the uptime of the node.
	Uptime string `protobuf:"bytes,6,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// started_at is the time the node started.
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	// features is the list of features currently enabled.
	Features []*FeaturePort `protobuf:"bytes,8,rep,name=features,proto3" json:"features,omitempty"`
	// cluster_status is the status of the node in the cluster.
	ClusterStatus ClusterStatus `protobuf:"varint,9,opt,name=clusterStatus,proto3,enum=v1.ClusterStatus" json:"clusterStatus,omitempty"`
	// current_leader is the current leader of the cluster.
	CurrentLeader string `protobuf:"bytes,10,opt,name=currentLeader,proto3" json:"currentLeader,omitempty"`
	// interface_metrics are the metrics for the node's interfaces.
	InterfaceMetrics *InterfaceMetrics `protobuf:"bytes,11,opt,name=interfaceMetrics,proto3" json:"interfaceMetrics,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_v1_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_v1_node_proto_rawDescGZIP(), []int{4}
}

func (x *Status) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Status) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Status) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Status) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *Status) GetBuildDate() string {
	if x != nil {
		return x.BuildDate
	}
	return ""
}

func (x *Status) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

func (x *Status) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Status) GetFeatures() []*FeaturePort {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Status) GetClusterStatus() ClusterStatus {
	if x != nil {
		return x.ClusterStatus
	}
	return ClusterStatus_CLUSTER_STATUS_UNKNOWN
}

func (x *Status) GetCurrentLeader() string {
	if x != nil {
		return x.CurrentLeader
	}
	return ""
}

func (x *Status) GetInterfaceMetrics() *InterfaceMetrics {
	if x != nil {
		return x.InterfaceMetrics
	}
	return nil
}

// DataChannelNegotiation is the message for communicating data channels to nodes.
type DataChannelNegotiation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// proto is the protocol of the traffic.
	Proto string `protobuf:"bytes,1,opt,name=proto,proto3" json:"proto,omitempty"`
	// src is the address of the client that initiated the request.
	Src string `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	// dst is the destination address of the traffic.
	Dst string `protobuf:"bytes,3,opt,name=dst,proto3" json:"dst,omitempty"`
	// port is the destination port of the traffic.
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// offer is the offer for the node to use as its local description.
	Offer string `protobuf:"bytes,5,opt,name=offer,proto3" json:"offer,omitempty"`
	// answer is the answer for the node to use as its remote description.
	Answer string `protobuf:"bytes,6,opt,name=answer,proto3" json:"answer,omitempty"`
	// candidate is an ICE candidate.
	Candidate string `protobuf:"bytes,7,opt,name=candidate,proto3" json:"candidate,omitempty"`
	// stun_servers is the list of STUN servers to use.
	StunServers []string `protobuf:"bytes,8,rep,name=stunServers,proto3" json:"stunServers,omitempty"`
}

func (x *DataChannelNegotiation) Reset() {
	*x = DataChannelNegotiation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataChannelNegotiation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChannelNegotiation) ProtoMessage() {}

func (x *DataChannelNegotiation) ProtoReflect() protoreflect.Message {
	mi := &file_v1_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChannelNegotiation.ProtoReflect.Descriptor instead.
func (*DataChannelNegotiation) Descriptor() ([]byte, []int) {
	return file_v1_node_proto_rawDescGZIP(), []int{5}
}

func (x *DataChannelNegotiation) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *DataChannelNegotiation) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *DataChannelNegotiation) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *DataChannelNegotiation) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DataChannelNegotiation) GetOffer() string {
	if x != nil {
		return x.Offer
	}
	return ""
}

func (x *DataChannelNegotiation) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *DataChannelNegotiation) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *DataChannelNegotiation) GetStunServers() []string {
	if x != nil {
		return x.StunServers
	}
	return nil
}

// InterfaceMetrics is the metrics for the WireGuard interface on a node.
type InterfaceMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device_name is the name of the device.
	DeviceName string `protobuf:"bytes,1,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	// public_key is the public key of the node.
	PublicKey string `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	// address_v4 is the IPv4 address of the node.
	AddressV4 string `protobuf:"bytes,3,opt,name=addressV4,proto3" json:"addressV4,omitempty"`
	// address_v6 is the IPv6 address of the node.
	AddressV6 string `protobuf:"bytes,4,opt,name=addressV6,proto3" json:"addressV6,omitempty"`
	// type is the type of interface being used for wireguard.
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// listen_port is the port wireguard is listening on.
	ListenPort int32 `protobuf:"varint,6,opt,name=listenPort,proto3" json:"listenPort,omitempty"`
	// total_receive_bytes is the total number of bytes received.
	TotalReceiveBytes uint64 `protobuf:"varint,7,opt,name=totalReceiveBytes,proto3" json:"totalReceiveBytes,omitempty"`
	// total_transmit_bytes is the total number of bytes transmitted.
	TotalTransmitBytes uint64 `protobuf:"varint,8,opt,name=totalTransmitBytes,proto3" json:"totalTransmitBytes,omitempty"`
	// num_peers is the number of peers connected to the node.
	NumPeers int32 `protobuf:"varint,9,opt,name=numPeers,proto3" json:"numPeers,omitempty"`
	// peers are the per-peer statistics.
	Peers []*PeerMetrics `protobuf:"bytes,10,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *InterfaceMetrics) Reset() {
	*x = InterfaceMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceMetrics) ProtoMessage() {}

func (x *InterfaceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_v1_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceMetrics.ProtoReflect.Descriptor instead.
func (*InterfaceMetrics) Descriptor() ([]byte, []int) {
	return file_v1_node_proto_rawDescGZIP(), []int{6}
}

func (x *InterfaceMetrics) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *InterfaceMetrics) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *InterfaceMetrics) GetAddressV4() string {
	if x != nil {
		return x.AddressV4
	}
	return ""
}

func (x *InterfaceMetrics) GetAddressV6() string {
	if x != nil {
		return x.AddressV6
	}
	return ""
}

func (x *InterfaceMetrics) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *InterfaceMetrics) GetListenPort() int32 {
	if x != nil {
		return x.ListenPort
	}
	return 0
}

func (x *InterfaceMetrics) GetTotalReceiveBytes() uint64 {
	if x != nil {
		return x.TotalReceiveBytes
	}
	return 0
}

func (x *InterfaceMetrics) GetTotalTransmitBytes() uint64 {
	if x != nil {
		return x.TotalTransmitBytes
	}
	return 0
}

func (x *InterfaceMetrics) GetNumPeers() int32 {
	if x != nil {
		return x.NumPeers
	}
	return 0
}

func (x *InterfaceMetrics) GetPeers() []*PeerMetrics {
	if x != nil {
		return x.Peers
	}
	return nil
}

// PeerMetrics are the metrics for a node's peer.
type PeerMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// public_key is the public key of the peer.
	PublicKey string `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	// endpoint is the connected endpoint of the peer.
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// persistent_keep_alive is the persistent keep alive interval for the peer.
	PersistentKeepAlive string `protobuf:"bytes,3,opt,name=persistentKeepAlive,proto3" json:"persistentKeepAlive,omitempty"`
	// last_handshake_time is the last handshake time for the peer.
	LastHandshakeTime string `protobuf:"bytes,4,opt,name=lastHandshakeTime,proto3" json:"lastHandshakeTime,omitempty"`
	// allowed_ips is the list of allowed IPs for the peer.
	AllowedIPs []string `protobuf:"bytes,5,rep,name=allowedIPs,proto3" json:"allowedIPs,omitempty"`
	// protocol_version is the version of the wireguard protocol negotiated with the peer.
	ProtocolVersion int64 `protobuf:"varint,6,opt,name=protocolVersion,proto3" json:"protocolVersion,omitempty"`
	// receive_bytes is the bytes received from the peer.
	ReceiveBytes uint64 `protobuf:"varint,7,opt,name=receiveBytes,proto3" json:"receiveBytes,omitempty"`
	// transmit_bytes is the bytes transmitted to the peer.
	TransmitBytes uint64 `protobuf:"varint,8,opt,name=transmitBytes,proto3" json:"transmitBytes,omitempty"`
}

func (x *PeerMetrics) Reset() {
	*x = PeerMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerMetrics) ProtoMessage() {}

func (x *PeerMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_v1_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerMetrics.ProtoReflect.Descriptor instead.
func (*PeerMetrics) Descriptor() ([]byte, []int) {
	return file_v1_node_proto_rawDescGZIP(), []int{7}
}

func (x *PeerMetrics) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *PeerMetrics) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *PeerMetrics) GetPersistentKeepAlive() string {
	if x != nil {
		return x.PersistentKeepAlive
	}
	return ""
}

func (x *PeerMetrics) GetLastHandshakeTime() string {
	if x != nil {
		return x.LastHandshakeTime
	}
	return ""
}

func (x *PeerMetrics) GetAllowedIPs() []string {
	if x != nil {
		return x.AllowedIPs
	}
	return nil
}

func (x *PeerMetrics) GetProtocolVersion() int64 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *PeerMetrics) GetReceiveBytes() uint64 {
	if x != nil {
		return x.ReceiveBytes
	}
	return 0
}

func (x *PeerMetrics) GetTransmitBytes() uint64 {
	if x != nil {
		return x.TransmitBytes
	}
	return 0
}

// WebRTCSignal is a signal sent to a remote peer over the WebRTC API.
type WebRTCSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// node_id is the ID of the node to send the signal to.
	// This is set by the original sender. On the node that
	// receives the ReceiveSignalChannel request, this will
	// be set to the ID of the node that sent the request.
	NodeID string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	// candidate is an ICE candidate.
	Candidate string `protobuf:"bytes,2,opt,name=candidate,proto3" json:"candidate,omitempty"`
	// description is a session description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *WebRTCSignal) Reset() {
	*x = WebRTCSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebRTCSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRTCSignal) ProtoMessage() {}

func (x *WebRTCSignal) ProtoReflect() protoreflect.Message {
	mi := &file_v1_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRTCSignal.ProtoReflect.Descriptor instead.
func (*WebRTCSignal) Descriptor() ([]byte, []int) {
	return file_v1_node_proto_rawDescGZIP(), []int{8}
}

func (x *WebRTCSignal) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *WebRTCSignal) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *WebRTCSignal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_v1_node_proto protoreflect.FileDescriptor

var file_v1_node_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x48, 0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x85,
	0x03, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x77, 0x61, 0x72, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x7a, 0x6f,
	0x6e, 0x65, 0x41, 0x77, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x76, 0x34, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x76, 0x34, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x76, 0x36, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x76,
	0x36, 0x12, 0x2b, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x64, 0x64, 0x72, 0x73, 0x12, 0x36,
	0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x22, 0x2e, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xab, 0x03, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x16, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x74, 0x75, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x75, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22,
	0xe1, 0x02, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x34, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x34,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x36, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x36, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x05,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x05, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x65, 0x70, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x50, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x50, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x22, 0x66, 0x0a, 0x0c, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x7a, 0x0a, 0x0d, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x10, 0x04, 0x2a, 0xf6, 0x01, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x44, 0x45, 0x53, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x45, 0x53, 0x48, 0x5f, 0x41, 0x50, 0x49, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x10, 0x05, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x43,
	0x45, 0x5f, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x08,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x45, 0x53, 0x48, 0x5f, 0x44, 0x4e, 0x53, 0x10, 0x09, 0x12, 0x14,
	0x0a, 0x10, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x48, 0x5f, 0x44,
	0x4e, 0x53, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x49, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x0c, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x52, 0x10, 0x0d, 0x2a, 0x79,
	0x0a, 0x0d, 0x45, 0x64, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x44, 0x47, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x4e, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45,
	0x5f, 0x4c, 0x49, 0x42, 0x50, 0x32, 0x50, 0x10, 0x03, 0x2a, 0x2c, 0x0a, 0x0b, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x01, 0x32, 0xcf, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x2f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x14, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x10, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x1a, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x65, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x2e, 0x76, 0x31, 0x42, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62,
	0x6d, 0x65, 0x73, 0x68, 0x70, 0x72, 0x6f, 0x6a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x65, 0x62,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x56, 0x58, 0x58,
	0xaa, 0x02, 0x02, 0x56, 0x31, 0xca, 0x02, 0x02, 0x56, 0x31, 0xe2, 0x02, 0x0e, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x02, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_node_proto_rawDescOnce sync.Once
	file_v1_node_proto_rawDescData = file_v1_node_proto_rawDesc
)

func file_v1_node_proto_rawDescGZIP() []byte {
	file_v1_node_proto_rawDescOnce.Do(func() {
		file_v1_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_node_proto_rawDescData)
	})
	return file_v1_node_proto_rawDescData
}

var file_v1_node_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_v1_node_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_v1_node_proto_goTypes = []interface{}{
	(ClusterStatus)(0),             // 0: v1.ClusterStatus
	(Feature)(0),                   // 1: v1.Feature
	(EdgeAttribute)(0),             // 2: v1.EdgeAttribute
	(DataChannel)(0),               // 3: v1.DataChannel
	(*FeaturePort)(nil),            // 4: v1.FeaturePort
	(*MeshNode)(nil),               // 5: v1.MeshNode
	(*NodeList)(nil),               // 6: v1.NodeList
	(*GetStatusRequest)(nil),       // 7: v1.GetStatusRequest
	(*Status)(nil),                 // 8: v1.Status
	(*DataChannelNegotiation)(nil), // 9: v1.DataChannelNegotiation
	(*InterfaceMetrics)(nil),       // 10: v1.InterfaceMetrics
	(*PeerMetrics)(nil),            // 11: v1.PeerMetrics
	(*WebRTCSignal)(nil),           // 12: v1.WebRTCSignal
	(*timestamppb.Timestamp)(nil),  // 13: google.protobuf.Timestamp
}
var file_v1_node_proto_depIdxs = []int32{
	1,  // 0: v1.FeaturePort.feature:type_name -> v1.Feature
	4,  // 1: v1.MeshNode.features:type_name -> v1.FeaturePort
	13, // 2: v1.MeshNode.joinedAt:type_name -> google.protobuf.Timestamp
	5,  // 3: v1.NodeList.nodes:type_name -> v1.MeshNode
	13, // 4: v1.Status.startedAt:type_name -> google.protobuf.Timestamp
	4,  // 5: v1.Status.features:type_name -> v1.FeaturePort
	0,  // 6: v1.Status.clusterStatus:type_name -> v1.ClusterStatus
	10, // 7: v1.Status.interfaceMetrics:type_name -> v1.InterfaceMetrics
	11, // 8: v1.InterfaceMetrics.peers:type_name -> v1.PeerMetrics
	7,  // 9: v1.Node.GetStatus:input_type -> v1.GetStatusRequest
	9,  // 10: v1.Node.NegotiateDataChannel:input_type -> v1.DataChannelNegotiation
	12, // 11: v1.Node.ReceiveSignalChannel:input_type -> v1.WebRTCSignal
	8,  // 12: v1.Node.GetStatus:output_type -> v1.Status
	9,  // 13: v1.Node.NegotiateDataChannel:output_type -> v1.DataChannelNegotiation
	12, // 14: v1.Node.ReceiveSignalChannel:output_type -> v1.WebRTCSignal
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_v1_node_proto_init() }
func file_v1_node_proto_init() {
	if File_v1_node_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeaturePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataChannelNegotiation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebRTCSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_node_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_node_proto_goTypes,
		DependencyIndexes: file_v1_node_proto_depIdxs,
		EnumInfos:         file_v1_node_proto_enumTypes,
		MessageInfos:      file_v1_node_proto_msgTypes,
	}.Build()
	File_v1_node_proto = out.File
	file_v1_node_proto_rawDesc = nil
	file_v1_node_proto_goTypes = nil
	file_v1_node_proto_depIdxs = nil
}
