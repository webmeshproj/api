//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/storage.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StorageQueryService_Query_FullMethodName     = "/v1.StorageQueryService/Query"
	StorageQueryService_Publish_FullMethodName   = "/v1.StorageQueryService/Publish"
	StorageQueryService_Subscribe_FullMethodName = "/v1.StorageQueryService/Subscribe"
)

// StorageQueryServiceClient is the client API for StorageQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageQueryServiceClient interface {
	// Query is used to query the mesh for information.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (StorageQueryService_QueryClient, error)
	// Publish is used to publish events to the mesh database. A restricted set
	// of keys are allowed to be published to. This is only available on nodes
	// that are able to provide storage.
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	// Subscribe is used by non-storage-providing nodes to receive updates to the mesh state. This is only
	// available on nodes that are able to provide storage.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (StorageQueryService_SubscribeClient, error)
}

type storageQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageQueryServiceClient(cc grpc.ClientConnInterface) StorageQueryServiceClient {
	return &storageQueryServiceClient{cc}
}

func (c *storageQueryServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (StorageQueryService_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageQueryService_ServiceDesc.Streams[0], StorageQueryService_Query_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storageQueryServiceQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageQueryService_QueryClient interface {
	Recv() (*QueryResponse, error)
	grpc.ClientStream
}

type storageQueryServiceQueryClient struct {
	grpc.ClientStream
}

func (x *storageQueryServiceQueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageQueryServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, StorageQueryService_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageQueryServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (StorageQueryService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageQueryService_ServiceDesc.Streams[1], StorageQueryService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storageQueryServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageQueryService_SubscribeClient interface {
	Recv() (*SubscriptionEvent, error)
	grpc.ClientStream
}

type storageQueryServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *storageQueryServiceSubscribeClient) Recv() (*SubscriptionEvent, error) {
	m := new(SubscriptionEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StorageQueryServiceServer is the server API for StorageQueryService service.
// All implementations must embed UnimplementedStorageQueryServiceServer
// for forward compatibility
type StorageQueryServiceServer interface {
	// Query is used to query the mesh for information.
	Query(*QueryRequest, StorageQueryService_QueryServer) error
	// Publish is used to publish events to the mesh database. A restricted set
	// of keys are allowed to be published to. This is only available on nodes
	// that are able to provide storage.
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	// Subscribe is used by non-storage-providing nodes to receive updates to the mesh state. This is only
	// available on nodes that are able to provide storage.
	Subscribe(*SubscribeRequest, StorageQueryService_SubscribeServer) error
	mustEmbedUnimplementedStorageQueryServiceServer()
}

// UnimplementedStorageQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageQueryServiceServer struct {
}

func (UnimplementedStorageQueryServiceServer) Query(*QueryRequest, StorageQueryService_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedStorageQueryServiceServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedStorageQueryServiceServer) Subscribe(*SubscribeRequest, StorageQueryService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStorageQueryServiceServer) mustEmbedUnimplementedStorageQueryServiceServer() {}

// UnsafeStorageQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageQueryServiceServer will
// result in compilation errors.
type UnsafeStorageQueryServiceServer interface {
	mustEmbedUnimplementedStorageQueryServiceServer()
}

func RegisterStorageQueryServiceServer(s grpc.ServiceRegistrar, srv StorageQueryServiceServer) {
	s.RegisterService(&StorageQueryService_ServiceDesc, srv)
}

func _StorageQueryService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageQueryServiceServer).Query(m, &storageQueryServiceQueryServer{stream})
}

type StorageQueryService_QueryServer interface {
	Send(*QueryResponse) error
	grpc.ServerStream
}

type storageQueryServiceQueryServer struct {
	grpc.ServerStream
}

func (x *storageQueryServiceQueryServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageQueryService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageQueryServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageQueryService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageQueryServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageQueryService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageQueryServiceServer).Subscribe(m, &storageQueryServiceSubscribeServer{stream})
}

type StorageQueryService_SubscribeServer interface {
	Send(*SubscriptionEvent) error
	grpc.ServerStream
}

type storageQueryServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *storageQueryServiceSubscribeServer) Send(m *SubscriptionEvent) error {
	return x.ServerStream.SendMsg(m)
}

// StorageQueryService_ServiceDesc is the grpc.ServiceDesc for StorageQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.StorageQueryService",
	HandlerType: (*StorageQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _StorageQueryService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _StorageQueryService_Query_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _StorageQueryService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/storage.proto",
}
