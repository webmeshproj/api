//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: v1/members.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ConnectProtocol is a type of protocol for establishing a connection into a mesh.
type ConnectProtocol int32

const (
	// CONNECT_NATIVE indicates that the node should connect to other nodes via the native
	// webmesh mechanisms.
	ConnectProtocol_CONNECT_NATIVE ConnectProtocol = 0
	// CONNECT_ICE indicates that the node should connect to other nodes via ICE.
	ConnectProtocol_CONNECT_ICE ConnectProtocol = 1
	// CONNECT_LIBP2P indicates that the node should connect to other nodes via libp2p.
	ConnectProtocol_CONNECT_LIBP2P ConnectProtocol = 2
)

// Enum value maps for ConnectProtocol.
var (
	ConnectProtocol_name = map[int32]string{
		0: "CONNECT_NATIVE",
		1: "CONNECT_ICE",
		2: "CONNECT_LIBP2P",
	}
	ConnectProtocol_value = map[string]int32{
		"CONNECT_NATIVE": 0,
		"CONNECT_ICE":    1,
		"CONNECT_LIBP2P": 2,
	}
)

func (x ConnectProtocol) Enum() *ConnectProtocol {
	p := new(ConnectProtocol)
	*p = x
	return p
}

func (x ConnectProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_members_proto_enumTypes[0].Descriptor()
}

func (ConnectProtocol) Type() protoreflect.EnumType {
	return &file_v1_members_proto_enumTypes[0]
}

func (x ConnectProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectProtocol.Descriptor instead.
func (ConnectProtocol) EnumDescriptor() ([]byte, []int) {
	return file_v1_members_proto_rawDescGZIP(), []int{0}
}

// JoinRequest is a request to join the cluster.
type JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the ID of the node.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// public_key is the public key of the node to broadcast to peers.
	PublicKey string `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	// primary_endpoint is a routable address for the node. If left unset,
	// the node is assumed to be behind a NAT and not directly accessible.
	PrimaryEndpoint string `protobuf:"bytes,4,opt,name=primaryEndpoint,proto3" json:"primaryEndpoint,omitempty"`
	// wireguard_endpoints is a list of WireGuard endpoints for the node.
	WireguardEndpoints []string `protobuf:"bytes,5,rep,name=wireguardEndpoints,proto3" json:"wireguardEndpoints,omitempty"`
	// zone_awareness_id is the zone awareness ID of the node.
	ZoneAwarenessID string `protobuf:"bytes,6,opt,name=zoneAwarenessID,proto3" json:"zoneAwarenessID,omitempty"`
	// assign_ipv4 is whether an IPv4 address should be assigned to the node.
	AssignIPv4 bool `protobuf:"varint,7,opt,name=assignIPv4,proto3" json:"assignIPv4,omitempty"`
	// prefer_storage_ipv6 is whether IPv6 should be preferred over IPv4 for storage communication.
	// This is only used if assign_ipv4 is true.
	PreferStorageIPv6 bool `protobuf:"varint,8,opt,name=preferStorageIPv6,proto3" json:"preferStorageIPv6,omitempty"`
	// as_voter is whether the node should receive a vote in elections. The request
	// will be denied if the node is not allowed to vote.
	AsVoter bool `protobuf:"varint,9,opt,name=asVoter,proto3" json:"asVoter,omitempty"`
	// as_observer is whether the node should be added as an observer. They will receive
	// updates to the storage, but not be able to vote in elections.
	AsObserver bool `protobuf:"varint,10,opt,name=asObserver,proto3" json:"asObserver,omitempty"`
	// routes is a list of routes to advertise to peers. The request will be denied
	// if the node is not allowed to put routes.
	Routes []string `protobuf:"bytes,11,rep,name=routes,proto3" json:"routes,omitempty"`
	// direct_peers is a map of extra peers that should be connected to directly over relays.
	// The provided edge attribute is the callers preference of how the relay should be created.
	// The request will be denied if the node is not allowed to put data channels or edges.
	// The default joining behavior creates direct links between the caller and the joiner.
	// If the caller has a primary endpoint, the joiner will link the caller to all
	// other nodes with a primary endpoint. If the caller has a zone awareness ID,
	// the joiner will link the caller to all other nodes with the same zone awareness ID
	// that also have a primary endpoint.
	DirectPeers map[string]ConnectProtocol `protobuf:"bytes,12,rep,name=directPeers,proto3" json:"directPeers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=v1.ConnectProtocol"`
	// features is a list of features supported by the node that should be advertised to peers
	// and the port they are available on.
	Features []*FeaturePort `protobuf:"bytes,13,rep,name=features,proto3" json:"features,omitempty"`
	// multiaddrs are libp2p multiaddresses this node is listening on.
	Multiaddrs []string `protobuf:"bytes,14,rep,name=multiaddrs,proto3" json:"multiaddrs,omitempty"`
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_members_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_members_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_v1_members_proto_rawDescGZIP(), []int{0}
}

func (x *JoinRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JoinRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *JoinRequest) GetPrimaryEndpoint() string {
	if x != nil {
		return x.PrimaryEndpoint
	}
	return ""
}

func (x *JoinRequest) GetWireguardEndpoints() []string {
	if x != nil {
		return x.WireguardEndpoints
	}
	return nil
}

func (x *JoinRequest) GetZoneAwarenessID() string {
	if x != nil {
		return x.ZoneAwarenessID
	}
	return ""
}

func (x *JoinRequest) GetAssignIPv4() bool {
	if x != nil {
		return x.AssignIPv4
	}
	return false
}

func (x *JoinRequest) GetPreferStorageIPv6() bool {
	if x != nil {
		return x.PreferStorageIPv6
	}
	return false
}

func (x *JoinRequest) GetAsVoter() bool {
	if x != nil {
		return x.AsVoter
	}
	return false
}

func (x *JoinRequest) GetAsObserver() bool {
	if x != nil {
		return x.AsObserver
	}
	return false
}

func (x *JoinRequest) GetRoutes() []string {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *JoinRequest) GetDirectPeers() map[string]ConnectProtocol {
	if x != nil {
		return x.DirectPeers
	}
	return nil
}

func (x *JoinRequest) GetFeatures() []*FeaturePort {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *JoinRequest) GetMultiaddrs() []string {
	if x != nil {
		return x.Multiaddrs
	}
	return nil
}

// JoinResponse is a response to a join request.
type JoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address_ipv4 is the private IPv4 wireguard address of the node
	// in CIDR format representing the network. This is only set if
	// assign_ipv4 was set in the request or no network_ipv6 was provided.
	AddressIPv4 string `protobuf:"bytes,1,opt,name=addressIPv4,proto3" json:"addressIPv4,omitempty"`
	// address_ipv6 is the IPv6 network assigned to the node.
	AddressIPv6 string `protobuf:"bytes,2,opt,name=addressIPv6,proto3" json:"addressIPv6,omitempty"`
	// network_ipv4 is the IPv4 network of the Mesh.
	NetworkIPv4 string `protobuf:"bytes,3,opt,name=networkIPv4,proto3" json:"networkIPv4,omitempty"`
	// network_ipv6 is the IPv6 network of the Mesh.
	NetworkIPv6 string `protobuf:"bytes,4,opt,name=networkIPv6,proto3" json:"networkIPv6,omitempty"`
	// peers is a list of wireguard peers to connect to.
	Peers []*WireGuardPeer `protobuf:"bytes,5,rep,name=peers,proto3" json:"peers,omitempty"`
	// ice_servers is a list of public nodes that can be used to negotiate
	// ICE connections if required. This may only be populated when one of
	// the peers has the ICE flag set. This must be set if the requestor
	// specifies direct_peers.
	IceServers []string `protobuf:"bytes,6,rep,name=iceServers,proto3" json:"iceServers,omitempty"`
	// dns_servers is a list of peers offering DNS services.
	DnsServers []string `protobuf:"bytes,7,rep,name=dnsServers,proto3" json:"dnsServers,omitempty"`
	// mesh_domain is the domain of the mesh.
	MeshDomain string `protobuf:"bytes,8,opt,name=meshDomain,proto3" json:"meshDomain,omitempty"`
}

func (x *JoinResponse) Reset() {
	*x = JoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_members_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinResponse) ProtoMessage() {}

func (x *JoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_members_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinResponse.ProtoReflect.Descriptor instead.
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return file_v1_members_proto_rawDescGZIP(), []int{1}
}

func (x *JoinResponse) GetAddressIPv4() string {
	if x != nil {
		return x.AddressIPv4
	}
	return ""
}

func (x *JoinResponse) GetAddressIPv6() string {
	if x != nil {
		return x.AddressIPv6
	}
	return ""
}

func (x *JoinResponse) GetNetworkIPv4() string {
	if x != nil {
		return x.NetworkIPv4
	}
	return ""
}

func (x *JoinResponse) GetNetworkIPv6() string {
	if x != nil {
		return x.NetworkIPv6
	}
	return ""
}

func (x *JoinResponse) GetPeers() []*WireGuardPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *JoinResponse) GetIceServers() []string {
	if x != nil {
		return x.IceServers
	}
	return nil
}

func (x *JoinResponse) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *JoinResponse) GetMeshDomain() string {
	if x != nil {
		return x.MeshDomain
	}
	return ""
}

// UpdateRequest contains most of the same fields as JoinRequest, but is
// used to update the state of a node in the cluster.
type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the ID of the node.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// public_key is the public key of the node to broadcast to peers.
	PublicKey string `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	// primary_endpoint is a routable address for the node. If left unset,
	// the node is assumed to be behind a NAT and not directly accessible.
	PrimaryEndpoint string `protobuf:"bytes,3,opt,name=primaryEndpoint,proto3" json:"primaryEndpoint,omitempty"`
	// wireguard_endpoints is a list of WireGuard endpoints for the node.
	WireguardEndpoints []string `protobuf:"bytes,4,rep,name=wireguardEndpoints,proto3" json:"wireguardEndpoints,omitempty"`
	// zone_awareness_id is the zone awareness ID of the node.
	ZoneAwarenessID string `protobuf:"bytes,5,opt,name=zoneAwarenessID,proto3" json:"zoneAwarenessID,omitempty"`
	// as_voter is whether the node should receive a vote in elections. The request
	// will be denied if the node is not allowed to vote.
	AsVoter bool `protobuf:"varint,6,opt,name=asVoter,proto3" json:"asVoter,omitempty"`
	// routes is a list of routes to advertise to peers. The request will be denied
	// if the node is not allowed to put routes.
	Routes []string `protobuf:"bytes,7,rep,name=routes,proto3" json:"routes,omitempty"`
	// features is a list of features supported by the node that should be advertised to peers
	// and the port they are available on.
	Features []*FeaturePort `protobuf:"bytes,8,rep,name=features,proto3" json:"features,omitempty"`
	// multiaddrs are libp2p multiaddresses this node is listening on.
	Multiaddrs []string `protobuf:"bytes,9,rep,name=multiaddrs,proto3" json:"multiaddrs,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_members_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_members_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_v1_members_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *UpdateRequest) GetPrimaryEndpoint() string {
	if x != nil {
		return x.PrimaryEndpoint
	}
	return ""
}

func (x *UpdateRequest) GetWireguardEndpoints() []string {
	if x != nil {
		return x.WireguardEndpoints
	}
	return nil
}

func (x *UpdateRequest) GetZoneAwarenessID() string {
	if x != nil {
		return x.ZoneAwarenessID
	}
	return ""
}

func (x *UpdateRequest) GetAsVoter() bool {
	if x != nil {
		return x.AsVoter
	}
	return false
}

func (x *UpdateRequest) GetRoutes() []string {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *UpdateRequest) GetFeatures() []*FeaturePort {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *UpdateRequest) GetMultiaddrs() []string {
	if x != nil {
		return x.Multiaddrs
	}
	return nil
}

// UpdateResponse is a response to an update request. It is currently empty.
type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_members_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_members_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_v1_members_proto_rawDescGZIP(), []int{3}
}

// WireGuardPeer is a peer in the Wireguard network.
type WireGuardPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node is information about this node.
	Node *MeshNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	// allowed_ips is the list of allowed IPs for the peer.
	AllowedIPs []string `protobuf:"bytes,2,rep,name=allowedIPs,proto3" json:"allowedIPs,omitempty"`
	// allowed_routes is the list of allowed routes for the peer.
	AllowedRoutes []string `protobuf:"bytes,3,rep,name=allowedRoutes,proto3" json:"allowedRoutes,omitempty"`
	// proto indicates the protocol to use to connect to the peer.
	Proto ConnectProtocol `protobuf:"varint,4,opt,name=proto,proto3,enum=v1.ConnectProtocol" json:"proto,omitempty"`
}

func (x *WireGuardPeer) Reset() {
	*x = WireGuardPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_members_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireGuardPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireGuardPeer) ProtoMessage() {}

func (x *WireGuardPeer) ProtoReflect() protoreflect.Message {
	mi := &file_v1_members_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireGuardPeer.ProtoReflect.Descriptor instead.
func (*WireGuardPeer) Descriptor() ([]byte, []int) {
	return file_v1_members_proto_rawDescGZIP(), []int{4}
}

func (x *WireGuardPeer) GetNode() *MeshNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *WireGuardPeer) GetAllowedIPs() []string {
	if x != nil {
		return x.AllowedIPs
	}
	return nil
}

func (x *WireGuardPeer) GetAllowedRoutes() []string {
	if x != nil {
		return x.AllowedRoutes
	}
	return nil
}

func (x *WireGuardPeer) GetProto() ConnectProtocol {
	if x != nil {
		return x.Proto
	}
	return ConnectProtocol_CONNECT_NATIVE
}

// LeaveRequest is a request to leave the cluster.
type LeaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the ID of the node.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LeaveRequest) Reset() {
	*x = LeaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_members_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveRequest) ProtoMessage() {}

func (x *LeaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_members_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveRequest.ProtoReflect.Descriptor instead.
func (*LeaveRequest) Descriptor() ([]byte, []int) {
	return file_v1_members_proto_rawDescGZIP(), []int{5}
}

func (x *LeaveRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// LeaveResponse is a response to a leave request. It is currently empty.
type LeaveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LeaveResponse) Reset() {
	*x = LeaveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_members_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveResponse) ProtoMessage() {}

func (x *LeaveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_members_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveResponse.ProtoReflect.Descriptor instead.
func (*LeaveResponse) Descriptor() ([]byte, []int) {
	return file_v1_members_proto_rawDescGZIP(), []int{6}
}

// StorageConfigurationRequest is a request to get the current Storage configuration.
type StorageConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StorageConfigurationRequest) Reset() {
	*x = StorageConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_members_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageConfigurationRequest) ProtoMessage() {}

func (x *StorageConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_members_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageConfigurationRequest.ProtoReflect.Descriptor instead.
func (*StorageConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_v1_members_proto_rawDescGZIP(), []int{7}
}

// StorageConfigurationResponse is a response to a Storage configuration request.
type StorageConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// servers is the list of servers in the storage configuration.
	Servers []*StorageServer `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *StorageConfigurationResponse) Reset() {
	*x = StorageConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_members_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageConfigurationResponse) ProtoMessage() {}

func (x *StorageConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_members_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageConfigurationResponse.ProtoReflect.Descriptor instead.
func (*StorageConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_v1_members_proto_rawDescGZIP(), []int{8}
}

func (x *StorageConfigurationResponse) GetServers() []*StorageServer {
	if x != nil {
		return x.Servers
	}
	return nil
}

// StorageServer is a server in the Storage configuration.
type StorageServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the ID of the server.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Suffrage is the suffrage of the server.
	Suffrage ClusterStatus `protobuf:"varint,2,opt,name=suffrage,proto3,enum=v1.ClusterStatus" json:"suffrage,omitempty"`
	// Address is the mesh address of the server.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *StorageServer) Reset() {
	*x = StorageServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_members_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageServer) ProtoMessage() {}

func (x *StorageServer) ProtoReflect() protoreflect.Message {
	mi := &file_v1_members_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageServer.ProtoReflect.Descriptor instead.
func (*StorageServer) Descriptor() ([]byte, []int) {
	return file_v1_members_proto_rawDescGZIP(), []int{9}
}

func (x *StorageServer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StorageServer) GetSuffrage() ClusterStatus {
	if x != nil {
		return x.Suffrage
	}
	return ClusterStatus_CLUSTER_STATUS_UNKNOWN
}

func (x *StorageServer) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// SubscribePeersRequest is a request to subscribe to peer updates.
type SubscribePeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the ID of the node.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SubscribePeersRequest) Reset() {
	*x = SubscribePeersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_members_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribePeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribePeersRequest) ProtoMessage() {}

func (x *SubscribePeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_members_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribePeersRequest.ProtoReflect.Descriptor instead.
func (*SubscribePeersRequest) Descriptor() ([]byte, []int) {
	return file_v1_members_proto_rawDescGZIP(), []int{10}
}

func (x *SubscribePeersRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// PeerConfigurations is a stream of peer configurations.
type PeerConfigurations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// peers is a list of wireguard peers to connect to.
	Peers []*WireGuardPeer `protobuf:"bytes,5,rep,name=peers,proto3" json:"peers,omitempty"`
	// ice_servers is a list of public nodes that can be used to negotiate
	// ICE connections if required. This may only be populated when one of
	// the peers has the ICE flag set.
	IceServers []string `protobuf:"bytes,6,rep,name=iceServers,proto3" json:"iceServers,omitempty"`
	// dns_servers is a list of peers offering DNS services.
	DnsServers []string `protobuf:"bytes,7,rep,name=dnsServers,proto3" json:"dnsServers,omitempty"`
}

func (x *PeerConfigurations) Reset() {
	*x = PeerConfigurations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_members_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerConfigurations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerConfigurations) ProtoMessage() {}

func (x *PeerConfigurations) ProtoReflect() protoreflect.Message {
	mi := &file_v1_members_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerConfigurations.ProtoReflect.Descriptor instead.
func (*PeerConfigurations) Descriptor() ([]byte, []int) {
	return file_v1_members_proto_rawDescGZIP(), []int{11}
}

func (x *PeerConfigurations) GetPeers() []*WireGuardPeer {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *PeerConfigurations) GetIceServers() []string {
	if x != nil {
		return x.IceServers
	}
	return nil
}

func (x *PeerConfigurations) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

var File_v1_members_proto protoreflect.FileDescriptor

var file_v1_members_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x0d, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x04, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x77, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x77, 0x61, 0x72, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x49, 0x50, 0x76, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x49, 0x50, 0x76, 0x34, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x50, 0x76, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x49, 0x50, 0x76, 0x36, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x73, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x61, 0x73, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x61, 0x64, 0x64, 0x72, 0x73, 0x1a, 0x53, 0x0a, 0x10, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x02, 0x0a,
	0x0c, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x50, 0x76, 0x34, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x50, 0x76, 0x34, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x50, 0x76, 0x36, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x50, 0x76,
	0x36, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x50, 0x76, 0x34,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x50, 0x76, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x50,
	0x76, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x50, 0x76, 0x36, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x47, 0x75,
	0x61, 0x72, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xc0,
	0x02, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x69, 0x72, 0x65,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x7a, 0x6f, 0x6e, 0x65,
	0x41, 0x77, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x77, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x64, 0x64, 0x72,
	0x73, 0x22, 0x10, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0d, 0x57, 0x69, 0x72, 0x65, 0x47, 0x75, 0x61, 0x72,
	0x64, 0x50, 0x65, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x49, 0x50, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x49, 0x50, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1e, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x1c, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x68, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x75, 0x66, 0x66, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x75, 0x66,
	0x66, 0x72, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x27, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7d, 0x0a, 0x12, 0x50, 0x65, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27,
	0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x47, 0x75, 0x61, 0x72, 0x64, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2a, 0x4a, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x4c, 0x49, 0x42, 0x50, 0x32,
	0x50, 0x10, 0x02, 0x32, 0xf9, 0x02, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x0f, 0x2e, 0x76, 0x31, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x31, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x2e, 0x0a, 0x05, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x10, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x68, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x72, 0x6f,
	0x6a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x65, 0x62, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x56, 0x58, 0x58, 0xaa, 0x02, 0x02, 0x56, 0x31, 0xca, 0x02,
	0x02, 0x56, 0x31, 0xe2, 0x02, 0x0e, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x02, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_v1_members_proto_rawDescOnce sync.Once
	file_v1_members_proto_rawDescData = file_v1_members_proto_rawDesc
)

func file_v1_members_proto_rawDescGZIP() []byte {
	file_v1_members_proto_rawDescOnce.Do(func() {
		file_v1_members_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_members_proto_rawDescData)
	})
	return file_v1_members_proto_rawDescData
}

var file_v1_members_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_members_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_v1_members_proto_goTypes = []interface{}{
	(ConnectProtocol)(0),                 // 0: v1.ConnectProtocol
	(*JoinRequest)(nil),                  // 1: v1.JoinRequest
	(*JoinResponse)(nil),                 // 2: v1.JoinResponse
	(*UpdateRequest)(nil),                // 3: v1.UpdateRequest
	(*UpdateResponse)(nil),               // 4: v1.UpdateResponse
	(*WireGuardPeer)(nil),                // 5: v1.WireGuardPeer
	(*LeaveRequest)(nil),                 // 6: v1.LeaveRequest
	(*LeaveResponse)(nil),                // 7: v1.LeaveResponse
	(*StorageConfigurationRequest)(nil),  // 8: v1.StorageConfigurationRequest
	(*StorageConfigurationResponse)(nil), // 9: v1.StorageConfigurationResponse
	(*StorageServer)(nil),                // 10: v1.StorageServer
	(*SubscribePeersRequest)(nil),        // 11: v1.SubscribePeersRequest
	(*PeerConfigurations)(nil),           // 12: v1.PeerConfigurations
	nil,                                  // 13: v1.JoinRequest.DirectPeersEntry
	(*FeaturePort)(nil),                  // 14: v1.FeaturePort
	(*MeshNode)(nil),                     // 15: v1.MeshNode
	(ClusterStatus)(0),                   // 16: v1.ClusterStatus
	(*RaftLogEntry)(nil),                 // 17: v1.RaftLogEntry
	(*RaftApplyResponse)(nil),            // 18: v1.RaftApplyResponse
}
var file_v1_members_proto_depIdxs = []int32{
	13, // 0: v1.JoinRequest.directPeers:type_name -> v1.JoinRequest.DirectPeersEntry
	14, // 1: v1.JoinRequest.features:type_name -> v1.FeaturePort
	5,  // 2: v1.JoinResponse.peers:type_name -> v1.WireGuardPeer
	14, // 3: v1.UpdateRequest.features:type_name -> v1.FeaturePort
	15, // 4: v1.WireGuardPeer.node:type_name -> v1.MeshNode
	0,  // 5: v1.WireGuardPeer.proto:type_name -> v1.ConnectProtocol
	10, // 6: v1.StorageConfigurationResponse.servers:type_name -> v1.StorageServer
	16, // 7: v1.StorageServer.suffrage:type_name -> v1.ClusterStatus
	5,  // 8: v1.PeerConfigurations.peers:type_name -> v1.WireGuardPeer
	0,  // 9: v1.JoinRequest.DirectPeersEntry.value:type_name -> v1.ConnectProtocol
	1,  // 10: v1.Membership.Join:input_type -> v1.JoinRequest
	3,  // 11: v1.Membership.Update:input_type -> v1.UpdateRequest
	6,  // 12: v1.Membership.Leave:input_type -> v1.LeaveRequest
	11, // 13: v1.Membership.SubscribePeers:input_type -> v1.SubscribePeersRequest
	17, // 14: v1.Membership.Apply:input_type -> v1.RaftLogEntry
	8,  // 15: v1.Membership.GetStorageConfiguration:input_type -> v1.StorageConfigurationRequest
	2,  // 16: v1.Membership.Join:output_type -> v1.JoinResponse
	4,  // 17: v1.Membership.Update:output_type -> v1.UpdateResponse
	7,  // 18: v1.Membership.Leave:output_type -> v1.LeaveResponse
	12, // 19: v1.Membership.SubscribePeers:output_type -> v1.PeerConfigurations
	18, // 20: v1.Membership.Apply:output_type -> v1.RaftApplyResponse
	9,  // 21: v1.Membership.GetStorageConfiguration:output_type -> v1.StorageConfigurationResponse
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_v1_members_proto_init() }
func file_v1_members_proto_init() {
	if File_v1_members_proto != nil {
		return
	}
	file_v1_node_proto_init()
	file_v1_raft_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_members_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_members_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_members_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_members_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_members_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireGuardPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_members_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_members_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_members_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_members_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_members_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_members_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribePeersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_members_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerConfigurations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_members_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_members_proto_goTypes,
		DependencyIndexes: file_v1_members_proto_depIdxs,
		EnumInfos:         file_v1_members_proto_enumTypes,
		MessageInfos:      file_v1_members_proto_msgTypes,
	}.Build()
	File_v1_members_proto = out.File
	file_v1_members_proto_rawDesc = nil
	file_v1_members_proto_goTypes = nil
	file_v1_members_proto_depIdxs = nil
}
