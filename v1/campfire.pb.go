//
//Copyright 2023.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: v1/campfire.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MessageType is used to indicate the type of a CampfireMessage.
type CampfireMessage_MessageType int32

const (
	// UNKNOWN is the default value and should not be used.
	CampfireMessage_UNKNOWN CampfireMessage_MessageType = 0
	// ANNOUNCE is used to announce presence at a campfire. This is
	// only required when waiting for others to join.
	CampfireMessage_ANNOUNCE CampfireMessage_MessageType = 1
	// OFFER is used to offer a WebRTC connection to another peer.
	CampfireMessage_OFFER CampfireMessage_MessageType = 2
	// ANSWER is used to answer a WebRTC connection from another peer.
	CampfireMessage_ANSWER CampfireMessage_MessageType = 3
	// CANDIDATE is used to send a WebRTC candidate to another peer.
	CampfireMessage_CANDIDATE CampfireMessage_MessageType = 4
)

// Enum value maps for CampfireMessage_MessageType.
var (
	CampfireMessage_MessageType_name = map[int32]string{
		0: "UNKNOWN",
		1: "ANNOUNCE",
		2: "OFFER",
		3: "ANSWER",
		4: "CANDIDATE",
	}
	CampfireMessage_MessageType_value = map[string]int32{
		"UNKNOWN":   0,
		"ANNOUNCE":  1,
		"OFFER":     2,
		"ANSWER":    3,
		"CANDIDATE": 4,
	}
)

func (x CampfireMessage_MessageType) Enum() *CampfireMessage_MessageType {
	p := new(CampfireMessage_MessageType)
	*p = x
	return p
}

func (x CampfireMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CampfireMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_campfire_proto_enumTypes[0].Descriptor()
}

func (CampfireMessage_MessageType) Type() protoreflect.EnumType {
	return &file_v1_campfire_proto_enumTypes[0]
}

func (x CampfireMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CampfireMessage_MessageType.Descriptor instead.
func (CampfireMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_v1_campfire_proto_rawDescGZIP(), []int{0, 0}
}

// CampfireMessage is used to send messages between peers.
type CampfireMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the message.
	Type CampfireMessage_MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=v1.CampfireMessage_MessageType" json:"type,omitempty"`
	// The sending ufrag of the message.
	Lufrag string `protobuf:"bytes,2,opt,name=lufrag,proto3" json:"lufrag,omitempty"`
	// The sending password of the message.
	Lpwd string `protobuf:"bytes,3,opt,name=lpwd,proto3" json:"lpwd,omitempty"`
	// The receiving ufrag of the message.
	Rufrag string `protobuf:"bytes,4,opt,name=rufrag,proto3" json:"rufrag,omitempty"`
	// The receiving password of the message.
	Rpwd string `protobuf:"bytes,5,opt,name=rpwd,proto3" json:"rpwd,omitempty"`
	// The data of the message. It is recommended to be encrypted
	// with a pre-shared key before sending.
	Data []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CampfireMessage) Reset() {
	*x = CampfireMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_campfire_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampfireMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampfireMessage) ProtoMessage() {}

func (x *CampfireMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v1_campfire_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampfireMessage.ProtoReflect.Descriptor instead.
func (*CampfireMessage) Descriptor() ([]byte, []int) {
	return file_v1_campfire_proto_rawDescGZIP(), []int{0}
}

func (x *CampfireMessage) GetType() CampfireMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return CampfireMessage_UNKNOWN
}

func (x *CampfireMessage) GetLufrag() string {
	if x != nil {
		return x.Lufrag
	}
	return ""
}

func (x *CampfireMessage) GetLpwd() string {
	if x != nil {
		return x.Lpwd
	}
	return ""
}

func (x *CampfireMessage) GetRufrag() string {
	if x != nil {
		return x.Rufrag
	}
	return ""
}

func (x *CampfireMessage) GetRpwd() string {
	if x != nil {
		return x.Rpwd
	}
	return ""
}

func (x *CampfireMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_v1_campfire_proto protoreflect.FileDescriptor

var file_v1_campfire_proto_rawDesc = []byte{
	0x0a, 0x11, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6d, 0x70, 0x66, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x02, 0x0a, 0x0f, 0x43, 0x61, 0x6d, 0x70, 0x66, 0x69, 0x72,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x66, 0x69, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x75, 0x66, 0x72, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x75, 0x66, 0x72, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x70, 0x77, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x70, 0x77, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x66,
	0x72, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x66, 0x72, 0x61,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x70, 0x77, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x70, 0x77, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x4e, 0x4f, 0x55, 0x4e, 0x43,
	0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41,
	0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x32, 0xc2, 0x02, 0x0a, 0x08, 0x43, 0x61,
	0x6d, 0x70, 0x66, 0x69, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x12, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x66, 0x69, 0x72, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x13,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x66, 0x69, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a,
	0x0a, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x66, 0x69, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6d, 0x70, 0x66, 0x69, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x66,
	0x69, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x69,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x43, 0x61, 0x6d, 0x70, 0x66, 0x69,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x72, 0x6f,
	0x6a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x65, 0x62, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x56, 0x58, 0x58, 0xaa, 0x02, 0x02, 0x56, 0x31, 0xca, 0x02,
	0x02, 0x56, 0x31, 0xe2, 0x02, 0x0e, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x02, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_v1_campfire_proto_rawDescOnce sync.Once
	file_v1_campfire_proto_rawDescData = file_v1_campfire_proto_rawDesc
)

func file_v1_campfire_proto_rawDescGZIP() []byte {
	file_v1_campfire_proto_rawDescOnce.Do(func() {
		file_v1_campfire_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_campfire_proto_rawDescData)
	})
	return file_v1_campfire_proto_rawDescData
}

var file_v1_campfire_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_campfire_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_v1_campfire_proto_goTypes = []interface{}{
	(CampfireMessage_MessageType)(0), // 0: v1.CampfireMessage.MessageType
	(*CampfireMessage)(nil),          // 1: v1.CampfireMessage
	(*emptypb.Empty)(nil),            // 2: google.protobuf.Empty
}
var file_v1_campfire_proto_depIdxs = []int32{
	0, // 0: v1.CampfireMessage.type:type_name -> v1.CampfireMessage.MessageType
	1, // 1: v1.Campfire.Announce:input_type -> v1.CampfireMessage
	1, // 2: v1.Campfire.SendOffer:input_type -> v1.CampfireMessage
	1, // 3: v1.Campfire.SendAnswer:input_type -> v1.CampfireMessage
	1, // 4: v1.Campfire.SendCandidate:input_type -> v1.CampfireMessage
	2, // 5: v1.Campfire.ReceiveMessages:input_type -> google.protobuf.Empty
	2, // 6: v1.Campfire.Announce:output_type -> google.protobuf.Empty
	2, // 7: v1.Campfire.SendOffer:output_type -> google.protobuf.Empty
	2, // 8: v1.Campfire.SendAnswer:output_type -> google.protobuf.Empty
	2, // 9: v1.Campfire.SendCandidate:output_type -> google.protobuf.Empty
	1, // 10: v1.Campfire.ReceiveMessages:output_type -> v1.CampfireMessage
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_v1_campfire_proto_init() }
func file_v1_campfire_proto_init() {
	if File_v1_campfire_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_campfire_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampfireMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_campfire_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_campfire_proto_goTypes,
		DependencyIndexes: file_v1_campfire_proto_depIdxs,
		EnumInfos:         file_v1_campfire_proto_enumTypes,
		MessageInfos:      file_v1_campfire_proto_msgTypes,
	}.Build()
	File_v1_campfire_proto = out.File
	file_v1_campfire_proto_rawDesc = nil
	file_v1_campfire_proto_goTypes = nil
	file_v1_campfire_proto_depIdxs = nil
}
