//
//Copyright 2023.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/admin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Admin_PutRaftACL_FullMethodName    = "/v1.Admin/PutRaftACL"
	Admin_DeleteRaftACL_FullMethodName = "/v1.Admin/DeleteRaftACL"
	Admin_GetRaftACL_FullMethodName    = "/v1.Admin/GetRaftACL"
	Admin_ListRaftACLs_FullMethodName  = "/v1.Admin/ListRaftACLs"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	// PutRaftACL creates or updates an ACL.
	PutRaftACL(ctx context.Context, in *RaftACL, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteRaftACL deletes an ACL by name.
	DeleteRaftACL(ctx context.Context, in *DeleteRaftACLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetRaftACL returns an ACL by name.
	GetRaftACL(ctx context.Context, in *GetRaftACLRequest, opts ...grpc.CallOption) (*RaftACL, error)
	// ListRaftACLs returns the ACLs for the Raft cluster.
	ListRaftACLs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RaftACLList, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) PutRaftACL(ctx context.Context, in *RaftACL, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_PutRaftACL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteRaftACL(ctx context.Context, in *DeleteRaftACLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_DeleteRaftACL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetRaftACL(ctx context.Context, in *GetRaftACLRequest, opts ...grpc.CallOption) (*RaftACL, error) {
	out := new(RaftACL)
	err := c.cc.Invoke(ctx, Admin_GetRaftACL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListRaftACLs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RaftACLList, error) {
	out := new(RaftACLList)
	err := c.cc.Invoke(ctx, Admin_ListRaftACLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	// PutRaftACL creates or updates an ACL.
	PutRaftACL(context.Context, *RaftACL) (*emptypb.Empty, error)
	// DeleteRaftACL deletes an ACL by name.
	DeleteRaftACL(context.Context, *DeleteRaftACLRequest) (*emptypb.Empty, error)
	// GetRaftACL returns an ACL by name.
	GetRaftACL(context.Context, *GetRaftACLRequest) (*RaftACL, error)
	// ListRaftACLs returns the ACLs for the Raft cluster.
	ListRaftACLs(context.Context, *emptypb.Empty) (*RaftACLList, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) PutRaftACL(context.Context, *RaftACL) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRaftACL not implemented")
}
func (UnimplementedAdminServer) DeleteRaftACL(context.Context, *DeleteRaftACLRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRaftACL not implemented")
}
func (UnimplementedAdminServer) GetRaftACL(context.Context, *GetRaftACLRequest) (*RaftACL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaftACL not implemented")
}
func (UnimplementedAdminServer) ListRaftACLs(context.Context, *emptypb.Empty) (*RaftACLList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRaftACLs not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_PutRaftACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftACL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).PutRaftACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_PutRaftACL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).PutRaftACL(ctx, req.(*RaftACL))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteRaftACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRaftACLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteRaftACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteRaftACL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteRaftACL(ctx, req.(*DeleteRaftACLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetRaftACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRaftACLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRaftACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetRaftACL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRaftACL(ctx, req.(*GetRaftACLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListRaftACLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListRaftACLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ListRaftACLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListRaftACLs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutRaftACL",
			Handler:    _Admin_PutRaftACL_Handler,
		},
		{
			MethodName: "DeleteRaftACL",
			Handler:    _Admin_DeleteRaftACL_Handler,
		},
		{
			MethodName: "GetRaftACL",
			Handler:    _Admin_GetRaftACL_Handler,
		},
		{
			MethodName: "ListRaftACLs",
			Handler:    _Admin_ListRaftACLs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/admin.proto",
}
