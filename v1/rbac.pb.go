//
//Copyright 2023.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: v1/rbac.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RuleResource is the resource type for a rule.
type RuleResource int32

const (
	// RESOURCE_UNKNOWN is an unknown resource.
	RuleResource_RESOURCE_UNKNOWN RuleResource = 0
	// RESOURCE_VOTES is the resource for voting in raft elections. The only
	// verb evaluated for this resource is PUT.
	RuleResource_RESOURCE_VOTES RuleResource = 1
	// RESOURCE_ROLES is the resource for managing roles.
	RuleResource_RESOURCE_ROLES RuleResource = 2
	// RESOURCE_ROLE_BINDINGS is the resource for managing role bindings.
	RuleResource_RESOURCE_ROLE_BINDINGS RuleResource = 3
	// RESOURCE_GROUPS is the resource for managing groups.
	RuleResource_RESOURCE_GROUPS RuleResource = 4
	// RESOURCE_NETWORK_ACLS is the resource for managing network ACLs.
	RuleResource_RESOURCE_NETWORK_ACLS RuleResource = 5
	// RESOURCE_ROUTES is the resource for managing routes.
	RuleResource_RESOURCE_ROUTES RuleResource = 6
	// RESOURCE_ALL is a wildcard resource that matches all resources.
	RuleResource_RESOURCE_ALL RuleResource = 999
)

// Enum value maps for RuleResource.
var (
	RuleResource_name = map[int32]string{
		0:   "RESOURCE_UNKNOWN",
		1:   "RESOURCE_VOTES",
		2:   "RESOURCE_ROLES",
		3:   "RESOURCE_ROLE_BINDINGS",
		4:   "RESOURCE_GROUPS",
		5:   "RESOURCE_NETWORK_ACLS",
		6:   "RESOURCE_ROUTES",
		999: "RESOURCE_ALL",
	}
	RuleResource_value = map[string]int32{
		"RESOURCE_UNKNOWN":       0,
		"RESOURCE_VOTES":         1,
		"RESOURCE_ROLES":         2,
		"RESOURCE_ROLE_BINDINGS": 3,
		"RESOURCE_GROUPS":        4,
		"RESOURCE_NETWORK_ACLS":  5,
		"RESOURCE_ROUTES":        6,
		"RESOURCE_ALL":           999,
	}
)

func (x RuleResource) Enum() *RuleResource {
	p := new(RuleResource)
	*p = x
	return p
}

func (x RuleResource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleResource) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rbac_proto_enumTypes[0].Descriptor()
}

func (RuleResource) Type() protoreflect.EnumType {
	return &file_v1_rbac_proto_enumTypes[0]
}

func (x RuleResource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleResource.Descriptor instead.
func (RuleResource) EnumDescriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{0}
}

// RuleVerbs is the verb type for a rule.
type RuleVerbs int32

const (
	// VERB_UNKNOWN is an unknown verb.
	RuleVerbs_VERB_UNKNOWN RuleVerbs = 0
	// VERB_PUT is the verb for creating or updating a resource.
	RuleVerbs_VERB_PUT RuleVerbs = 1
	// VERB_GET is the verb for getting a resource.
	RuleVerbs_VERB_GET RuleVerbs = 2
	// VERB_DELETE is the verb for deleting a resource.
	RuleVerbs_VERB_DELETE RuleVerbs = 3
	// VERB_ALL is a wildcard verb that matches all verbs.
	RuleVerbs_VERB_ALL RuleVerbs = 999
)

// Enum value maps for RuleVerbs.
var (
	RuleVerbs_name = map[int32]string{
		0:   "VERB_UNKNOWN",
		1:   "VERB_PUT",
		2:   "VERB_GET",
		3:   "VERB_DELETE",
		999: "VERB_ALL",
	}
	RuleVerbs_value = map[string]int32{
		"VERB_UNKNOWN": 0,
		"VERB_PUT":     1,
		"VERB_GET":     2,
		"VERB_DELETE":  3,
		"VERB_ALL":     999,
	}
)

func (x RuleVerbs) Enum() *RuleVerbs {
	p := new(RuleVerbs)
	*p = x
	return p
}

func (x RuleVerbs) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleVerbs) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rbac_proto_enumTypes[1].Descriptor()
}

func (RuleVerbs) Type() protoreflect.EnumType {
	return &file_v1_rbac_proto_enumTypes[1]
}

func (x RuleVerbs) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleVerbs.Descriptor instead.
func (RuleVerbs) EnumDescriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{1}
}

// SubjectType is the type of a subject.
type SubjectType int32

const (
	// SUBJECT_UNKNOWN is an unknown subject type.
	SubjectType_SUBJECT_UNKNOWN SubjectType = 0
	// SUBJECT_NODE is a subject type for a node.
	SubjectType_SUBJECT_NODE SubjectType = 1
	// SUBJECT_USER is a subject type for a user.
	SubjectType_SUBJECT_USER SubjectType = 2
	// SUBJECT_GROUP is a subject type for a group.
	SubjectType_SUBJECT_GROUP SubjectType = 3
	// SUBJECT_ALL is a wildcard subject type that matches all subject types.
	// It can be used with a subject named '*' to match all subjects.
	SubjectType_SUBJECT_ALL SubjectType = 999
)

// Enum value maps for SubjectType.
var (
	SubjectType_name = map[int32]string{
		0:   "SUBJECT_UNKNOWN",
		1:   "SUBJECT_NODE",
		2:   "SUBJECT_USER",
		3:   "SUBJECT_GROUP",
		999: "SUBJECT_ALL",
	}
	SubjectType_value = map[string]int32{
		"SUBJECT_UNKNOWN": 0,
		"SUBJECT_NODE":    1,
		"SUBJECT_USER":    2,
		"SUBJECT_GROUP":   3,
		"SUBJECT_ALL":     999,
	}
)

func (x SubjectType) Enum() *SubjectType {
	p := new(SubjectType)
	*p = x
	return p
}

func (x SubjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rbac_proto_enumTypes[2].Descriptor()
}

func (SubjectType) Type() protoreflect.EnumType {
	return &file_v1_rbac_proto_enumTypes[2]
}

func (x SubjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubjectType.Descriptor instead.
func (SubjectType) EnumDescriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{2}
}

// Rule is a rule that applies to a resource.
type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resources is the resources to which the rule applies.
	Resources []RuleResource `protobuf:"varint,1,rep,packed,name=resources,proto3,enum=v1.RuleResource" json:"resources,omitempty"`
	// resource_names is the list of resource names to which the rule applies.
	ResourceNames []string `protobuf:"bytes,2,rep,name=resource_names,json=resourceNames,proto3" json:"resource_names,omitempty"`
	// verbs is the list of verbs that apply to the resource.
	Verbs []RuleVerbs `protobuf:"varint,3,rep,packed,name=verbs,proto3,enum=v1.RuleVerbs" json:"verbs,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_rbac_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{0}
}

func (x *Rule) GetResources() []RuleResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Rule) GetResourceNames() []string {
	if x != nil {
		return x.ResourceNames
	}
	return nil
}

func (x *Rule) GetVerbs() []RuleVerbs {
	if x != nil {
		return x.Verbs
	}
	return nil
}

// Role is a role that can be assigned to a subject.
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the role.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// rules is the list of rules that apply to the role.
	Rules []*Rule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_rbac_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{1}
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// Roles is a list of roles.
type Roles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// items is the list of roles.
	Items []*Role `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Roles) Reset() {
	*x = Roles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_rbac_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Roles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Roles) ProtoMessage() {}

func (x *Roles) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Roles.ProtoReflect.Descriptor instead.
func (*Roles) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{2}
}

func (x *Roles) GetItems() []*Role {
	if x != nil {
		return x.Items
	}
	return nil
}

// RoleBinding is a binding of a role to one or more subjects.
type RoleBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the role binding.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// role is the name of the role to which the binding applies.
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	// subjects is the list of subjects to which the binding applies.
	Subjects []*Subject `protobuf:"bytes,3,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (x *RoleBinding) Reset() {
	*x = RoleBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_rbac_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleBinding) ProtoMessage() {}

func (x *RoleBinding) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleBinding.ProtoReflect.Descriptor instead.
func (*RoleBinding) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{3}
}

func (x *RoleBinding) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoleBinding) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *RoleBinding) GetSubjects() []*Subject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

// RoleBindings is a list of role bindings.
type RoleBindings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// items is the list of role bindings.
	Items []*RoleBinding `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RoleBindings) Reset() {
	*x = RoleBindings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_rbac_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleBindings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleBindings) ProtoMessage() {}

func (x *RoleBindings) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleBindings.ProtoReflect.Descriptor instead.
func (*RoleBindings) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{4}
}

func (x *RoleBindings) GetItems() []*RoleBinding {
	if x != nil {
		return x.Items
	}
	return nil
}

// Subject is a subject to which a role can be bound.
type Subject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the subject.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// type is the type of the subject.
	Type SubjectType `protobuf:"varint,2,opt,name=type,proto3,enum=v1.SubjectType" json:"type,omitempty"`
}

func (x *Subject) Reset() {
	*x = Subject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_rbac_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subject) ProtoMessage() {}

func (x *Subject) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subject.ProtoReflect.Descriptor instead.
func (*Subject) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{5}
}

func (x *Subject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Subject) GetType() SubjectType {
	if x != nil {
		return x.Type
	}
	return SubjectType_SUBJECT_UNKNOWN
}

// Group is a group of subjects.
type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// subjects is the list of subjects in the group.
	Subjects []*Subject `protobuf:"bytes,2,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_rbac_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{6}
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Group) GetSubjects() []*Subject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

// Groups is a list of groups.
type Groups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// items is the list of groups.
	Items []*Group `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Groups) Reset() {
	*x = Groups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_rbac_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Groups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Groups) ProtoMessage() {}

func (x *Groups) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Groups.ProtoReflect.Descriptor instead.
func (*Groups) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{7}
}

func (x *Groups) GetItems() []*Group {
	if x != nil {
		return x.Items
	}
	return nil
}

// Action is an action that can be performed on a resource.
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource is the resource on which the action is performed.
	Resource RuleResource `protobuf:"varint,1,opt,name=resource,proto3,enum=v1.RuleResource" json:"resource,omitempty"`
	// resource_name is the name of the resource on which the action is
	// performed.
	ResourceName string `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// verb is the verb that is performed on the resource.
	Verb RuleVerbs `protobuf:"varint,3,opt,name=verb,proto3,enum=v1.RuleVerbs" json:"verb,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_rbac_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{8}
}

func (x *Action) GetResource() RuleResource {
	if x != nil {
		return x.Resource
	}
	return RuleResource_RESOURCE_UNKNOWN
}

func (x *Action) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *Action) GetVerb() RuleVerbs {
	if x != nil {
		return x.Verb
	}
	return RuleVerbs_VERB_UNKNOWN
}

var File_v1_rbac_proto protoreflect.FileDescriptor

var file_v1_rbac_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x76, 0x31, 0x22, 0x82, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x65, 0x72, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62,
	0x73, 0x52, 0x05, 0x76, 0x65, 0x72, 0x62, 0x73, 0x22, 0x3a, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x22, 0x27, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5e, 0x0a,
	0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x35, 0x0a,
	0x0c, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x25, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x42, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x44, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x29,
	0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x7e, 0x0a, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x62, 0x73, 0x52, 0x04, 0x76, 0x65, 0x72, 0x62, 0x2a, 0xc0, 0x01, 0x0a, 0x0c, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x56, 0x4f, 0x54,
	0x45, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x53, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x43,
	0x4c, 0x53, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x53, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0c, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0xe7, 0x07, 0x2a, 0x59, 0x0a, 0x09,
	0x52, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x45, 0x52,
	0x42, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56,
	0x45, 0x52, 0x42, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x52,
	0x42, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x45, 0x52, 0x42, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x56, 0x45, 0x52, 0x42,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0xe7, 0x07, 0x2a, 0x6b, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0xe7, 0x07, 0x42, 0x65, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x42, 0x09,
	0x52, 0x62, 0x61, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x6d, 0x65, 0x73, 0x68, 0x70,
	0x72, 0x6f, 0x6a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x65, 0x62, 0x6d, 0x65, 0x73, 0x68, 0x2f,
	0x76, 0x31, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x56, 0x58, 0x58, 0xaa, 0x02, 0x02, 0x56, 0x31,
	0xca, 0x02, 0x02, 0x56, 0x31, 0xe2, 0x02, 0x0e, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x02, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_v1_rbac_proto_rawDescOnce sync.Once
	file_v1_rbac_proto_rawDescData = file_v1_rbac_proto_rawDesc
)

func file_v1_rbac_proto_rawDescGZIP() []byte {
	file_v1_rbac_proto_rawDescOnce.Do(func() {
		file_v1_rbac_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_rbac_proto_rawDescData)
	})
	return file_v1_rbac_proto_rawDescData
}

var file_v1_rbac_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_v1_rbac_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_v1_rbac_proto_goTypes = []interface{}{
	(RuleResource)(0),    // 0: v1.RuleResource
	(RuleVerbs)(0),       // 1: v1.RuleVerbs
	(SubjectType)(0),     // 2: v1.SubjectType
	(*Rule)(nil),         // 3: v1.Rule
	(*Role)(nil),         // 4: v1.Role
	(*Roles)(nil),        // 5: v1.Roles
	(*RoleBinding)(nil),  // 6: v1.RoleBinding
	(*RoleBindings)(nil), // 7: v1.RoleBindings
	(*Subject)(nil),      // 8: v1.Subject
	(*Group)(nil),        // 9: v1.Group
	(*Groups)(nil),       // 10: v1.Groups
	(*Action)(nil),       // 11: v1.Action
}
var file_v1_rbac_proto_depIdxs = []int32{
	0,  // 0: v1.Rule.resources:type_name -> v1.RuleResource
	1,  // 1: v1.Rule.verbs:type_name -> v1.RuleVerbs
	3,  // 2: v1.Role.rules:type_name -> v1.Rule
	4,  // 3: v1.Roles.items:type_name -> v1.Role
	8,  // 4: v1.RoleBinding.subjects:type_name -> v1.Subject
	6,  // 5: v1.RoleBindings.items:type_name -> v1.RoleBinding
	2,  // 6: v1.Subject.type:type_name -> v1.SubjectType
	8,  // 7: v1.Group.subjects:type_name -> v1.Subject
	9,  // 8: v1.Groups.items:type_name -> v1.Group
	0,  // 9: v1.Action.resource:type_name -> v1.RuleResource
	1,  // 10: v1.Action.verb:type_name -> v1.RuleVerbs
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_v1_rbac_proto_init() }
func file_v1_rbac_proto_init() {
	if File_v1_rbac_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_rbac_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_rbac_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_rbac_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Roles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_rbac_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_rbac_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleBindings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_rbac_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_rbac_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_rbac_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Groups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_rbac_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_rbac_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_rbac_proto_goTypes,
		DependencyIndexes: file_v1_rbac_proto_depIdxs,
		EnumInfos:         file_v1_rbac_proto_enumTypes,
		MessageInfos:      file_v1_rbac_proto_msgTypes,
	}.Build()
	File_v1_rbac_proto = out.File
	file_v1_rbac_proto_rawDesc = nil
	file_v1_rbac_proto_goTypes = nil
	file_v1_rbac_proto_depIdxs = nil
}
