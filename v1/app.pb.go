//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: v1/app.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AddrType is the type of join addresses included in the request.
type ConnectRequest_AddrType int32

const (
	// ADDR is used to join a mesh using an IP or DNS address.
	ConnectRequest_ADDR ConnectRequest_AddrType = 0
	// MULTIADDR is used to join a mesh using a multiaddr.
	ConnectRequest_MULTIADDR ConnectRequest_AddrType = 1
	// RENDEZVOUS is used to join a mesh using a rendezvous string.
	ConnectRequest_RENDEZVOUS ConnectRequest_AddrType = 2
)

// Enum value maps for ConnectRequest_AddrType.
var (
	ConnectRequest_AddrType_name = map[int32]string{
		0: "ADDR",
		1: "MULTIADDR",
		2: "RENDEZVOUS",
	}
	ConnectRequest_AddrType_value = map[string]int32{
		"ADDR":       0,
		"MULTIADDR":  1,
		"RENDEZVOUS": 2,
	}
)

func (x ConnectRequest_AddrType) Enum() *ConnectRequest_AddrType {
	p := new(ConnectRequest_AddrType)
	*p = x
	return p
}

func (x ConnectRequest_AddrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectRequest_AddrType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_app_proto_enumTypes[0].Descriptor()
}

func (ConnectRequest_AddrType) Type() protoreflect.EnumType {
	return &file_v1_app_proto_enumTypes[0]
}

func (x ConnectRequest_AddrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectRequest_AddrType.Descriptor instead.
func (ConnectRequest_AddrType) EnumDescriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{0, 0}
}

// AuthMethod are types of RPC credentials to supply to the connection.
type ConnectRequest_AuthMethod int32

const (
	// NO_AUTH is used to indicate that no authentication is required.
	ConnectRequest_NO_AUTH ConnectRequest_AuthMethod = 0
	// BASIC is used to indicate that basic authentication is required.
	ConnectRequest_BASIC ConnectRequest_AuthMethod = 1
	// LDAP is used to indicate that LDAP authentication is required.
	ConnectRequest_LDAP ConnectRequest_AuthMethod = 2
	// ID is used to indicate that an identity is required.
	ConnectRequest_ID ConnectRequest_AuthMethod = 3
	// MTLS is used to indicate that mutual TLS authentication is required.
	// The TLS object should be used to configure the TLS connection.
	ConnectRequest_MTLS ConnectRequest_AuthMethod = 4
)

// Enum value maps for ConnectRequest_AuthMethod.
var (
	ConnectRequest_AuthMethod_name = map[int32]string{
		0: "NO_AUTH",
		1: "BASIC",
		2: "LDAP",
		3: "ID",
		4: "MTLS",
	}
	ConnectRequest_AuthMethod_value = map[string]int32{
		"NO_AUTH": 0,
		"BASIC":   1,
		"LDAP":    2,
		"ID":      3,
		"MTLS":    4,
	}
)

func (x ConnectRequest_AuthMethod) Enum() *ConnectRequest_AuthMethod {
	p := new(ConnectRequest_AuthMethod)
	*p = x
	return p
}

func (x ConnectRequest_AuthMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectRequest_AuthMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_app_proto_enumTypes[1].Descriptor()
}

func (ConnectRequest_AuthMethod) Type() protoreflect.EnumType {
	return &file_v1_app_proto_enumTypes[1]
}

func (x ConnectRequest_AuthMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectRequest_AuthMethod.Descriptor instead.
func (ConnectRequest_AuthMethod) EnumDescriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{0, 1}
}

// AuthHeader is an enumeration of headers that coorespond to the AuthMethod.
// They are used to pass authentication credentials to the daemon. Enums
// cannot be used as map keys, so their string values are used instead.
type ConnectRequest_AuthHeader int32

const (
	// BASIC_USERNAME is the username for basic authentication.
	ConnectRequest_BASIC_USERNAME ConnectRequest_AuthHeader = 0
	// BASIC_PASSWORD is the password for basic authentication.
	ConnectRequest_BASIC_PASSWORD ConnectRequest_AuthHeader = 1
	// LDAP_USERNAME is the username for LDAP authentication.
	ConnectRequest_LDAP_USERNAME ConnectRequest_AuthHeader = 2
	// LDAP_PASSWORD is the password for LDAP authentication.
	ConnectRequest_LDAP_PASSWORD ConnectRequest_AuthHeader = 3
	// ADDRS_ENVELOPE is the header for a signed envelope containing
	// the join addresses to use to connect to the mesh.
	ConnectRequest_ADDRS_ENVELOPE ConnectRequest_AuthHeader = 4
)

// Enum value maps for ConnectRequest_AuthHeader.
var (
	ConnectRequest_AuthHeader_name = map[int32]string{
		0: "BASIC_USERNAME",
		1: "BASIC_PASSWORD",
		2: "LDAP_USERNAME",
		3: "LDAP_PASSWORD",
		4: "ADDRS_ENVELOPE",
	}
	ConnectRequest_AuthHeader_value = map[string]int32{
		"BASIC_USERNAME": 0,
		"BASIC_PASSWORD": 1,
		"LDAP_USERNAME":  2,
		"LDAP_PASSWORD":  3,
		"ADDRS_ENVELOPE": 4,
	}
)

func (x ConnectRequest_AuthHeader) Enum() *ConnectRequest_AuthHeader {
	p := new(ConnectRequest_AuthHeader)
	*p = x
	return p
}

func (x ConnectRequest_AuthHeader) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectRequest_AuthHeader) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_app_proto_enumTypes[2].Descriptor()
}

func (ConnectRequest_AuthHeader) Type() protoreflect.EnumType {
	return &file_v1_app_proto_enumTypes[2]
}

func (x ConnectRequest_AuthHeader) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectRequest_AuthHeader.Descriptor instead.
func (ConnectRequest_AuthHeader) EnumDescriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{0, 2}
}

type StatusResponse_ConnectionStatus int32

const (
	// DISCONNECTED indicates that the node is not connected to a mesh.
	StatusResponse_DISCONNECTED StatusResponse_ConnectionStatus = 0
	// CONNECTING indicates that the node is in the process of connecting to a mesh.
	StatusResponse_CONNECTING StatusResponse_ConnectionStatus = 1
	// CONNECTED indicates that the node is connected to a mesh.
	StatusResponse_CONNECTED StatusResponse_ConnectionStatus = 2
)

// Enum value maps for StatusResponse_ConnectionStatus.
var (
	StatusResponse_ConnectionStatus_name = map[int32]string{
		0: "DISCONNECTED",
		1: "CONNECTING",
		2: "CONNECTED",
	}
	StatusResponse_ConnectionStatus_value = map[string]int32{
		"DISCONNECTED": 0,
		"CONNECTING":   1,
		"CONNECTED":    2,
	}
)

func (x StatusResponse_ConnectionStatus) Enum() *StatusResponse_ConnectionStatus {
	p := new(StatusResponse_ConnectionStatus)
	*p = x
	return p
}

func (x StatusResponse_ConnectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusResponse_ConnectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_app_proto_enumTypes[3].Descriptor()
}

func (StatusResponse_ConnectionStatus) Type() protoreflect.EnumType {
	return &file_v1_app_proto_enumTypes[3]
}

func (x StatusResponse_ConnectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusResponse_ConnectionStatus.Descriptor instead.
func (StatusResponse_ConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{11, 0}
}

// ConnectRequest is sent by an application to a daemon to establish a connection to a mesh.
type ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of this connection. If not provided
	// one will be generated.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// AuthMethod is the type of authentication to use.
	AuthMethod ConnectRequest_AuthMethod `protobuf:"varint,2,opt,name=authMethod,proto3,enum=v1.ConnectRequest_AuthMethod" json:"authMethod,omitempty"`
	// AuthCredentials are additional credentials as required by the authType.
	AuthCredentials map[string][]byte `protobuf:"bytes,3,rep,name=authCredentials,proto3" json:"authCredentials,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// AddrType is the type of join addresses in the addrs list.
	AddrType ConnectRequest_AddrType `protobuf:"varint,4,opt,name=addrType,proto3,enum=v1.ConnectRequest_AddrType" json:"addrType,omitempty"`
	// Addrs are the join addresses to use to connect to the mesh.
	Addrs []string `protobuf:"bytes,5,rep,name=addrs,proto3" json:"addrs,omitempty"`
	// Networking is the networking configuration to use.
	Networking *MeshConnNetworking `protobuf:"bytes,6,opt,name=networking,proto3" json:"networking,omitempty"`
	// Services are the services to expose to other nodes on the mesh.
	Services *MeshConnServices `protobuf:"bytes,7,opt,name=services,proto3" json:"services,omitempty"`
	// Bootstrap are options for bootstrapping a new mesh.
	Bootstrap *MeshConnBootstrap `protobuf:"bytes,8,opt,name=bootstrap,proto3" json:"bootstrap,omitempty"`
	// TLS are TLS configurations for the mesh connection.
	Tls *MeshConnTLS `protobuf:"bytes,9,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConnectRequest) GetAuthMethod() ConnectRequest_AuthMethod {
	if x != nil {
		return x.AuthMethod
	}
	return ConnectRequest_NO_AUTH
}

func (x *ConnectRequest) GetAuthCredentials() map[string][]byte {
	if x != nil {
		return x.AuthCredentials
	}
	return nil
}

func (x *ConnectRequest) GetAddrType() ConnectRequest_AddrType {
	if x != nil {
		return x.AddrType
	}
	return ConnectRequest_ADDR
}

func (x *ConnectRequest) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *ConnectRequest) GetNetworking() *MeshConnNetworking {
	if x != nil {
		return x.Networking
	}
	return nil
}

func (x *ConnectRequest) GetServices() *MeshConnServices {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ConnectRequest) GetBootstrap() *MeshConnBootstrap {
	if x != nil {
		return x.Bootstrap
	}
	return nil
}

func (x *ConnectRequest) GetTls() *MeshConnTLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

// MeshConnNetworking are configurations for networking on a mesh.
type MeshConnNetworking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UseDNS indicates whether or not to use the DNS servers of the mesh.
	UseDNS bool `protobuf:"varint,1,opt,name=useDNS,proto3" json:"useDNS,omitempty"`
}

func (x *MeshConnNetworking) Reset() {
	*x = MeshConnNetworking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshConnNetworking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshConnNetworking) ProtoMessage() {}

func (x *MeshConnNetworking) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshConnNetworking.ProtoReflect.Descriptor instead.
func (*MeshConnNetworking) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{1}
}

func (x *MeshConnNetworking) GetUseDNS() bool {
	if x != nil {
		return x.UseDNS
	}
	return false
}

// MeshConnServices are configurations for exposing services to other nodes on a mesh.
type MeshConnServices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enabled indicates whether or not to expose services to other nodes.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Public indicates that the services should be exposed publicly.
	// This is useful for allowing other nodes to connect to the mesh
	// via this node's public IP address.
	Public bool `protobuf:"varint,2,opt,name=public,proto3" json:"public,omitempty"`
}

func (x *MeshConnServices) Reset() {
	*x = MeshConnServices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshConnServices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshConnServices) ProtoMessage() {}

func (x *MeshConnServices) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshConnServices.ProtoReflect.Descriptor instead.
func (*MeshConnServices) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{2}
}

func (x *MeshConnServices) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MeshConnServices) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

// MeshConnBootstrap are configurations for bootstrapping a new mesh.
type MeshConnBootstrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enabled indicates whether or not to bootstrap a new mesh.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *MeshConnBootstrap) Reset() {
	*x = MeshConnBootstrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshConnBootstrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshConnBootstrap) ProtoMessage() {}

func (x *MeshConnBootstrap) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshConnBootstrap.ProtoReflect.Descriptor instead.
func (*MeshConnBootstrap) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{3}
}

func (x *MeshConnBootstrap) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// MeshhConnTLS are TLS configurations for a mesh connection.
type MeshConnTLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enabled indicates whether or not to use TLS.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// CACert is a PEM-encoded CA certificate to use for TLS.
	CaCertData []byte `protobuf:"bytes,2,opt,name=caCertData,proto3" json:"caCertData,omitempty"`
	// CertData is a PEM-encoded certificate to use for TLS.
	CertData []byte `protobuf:"bytes,3,opt,name=certData,proto3" json:"certData,omitempty"`
	// KeyData is a PEM-encoded private key to use for TLS.
	KeyData []byte `protobuf:"bytes,4,opt,name=keyData,proto3" json:"keyData,omitempty"`
	// VerifyChainOnly indicates whether or not to only verify the
	// certificate chain.
	VerifyChainOnly bool `protobuf:"varint,5,opt,name=verifyChainOnly,proto3" json:"verifyChainOnly,omitempty"`
	// SkipVerify indicates whether or not to skip verification of the
	// server certificate.
	SkipVerify bool `protobuf:"varint,6,opt,name=skipVerify,proto3" json:"skipVerify,omitempty"`
}

func (x *MeshConnTLS) Reset() {
	*x = MeshConnTLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshConnTLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshConnTLS) ProtoMessage() {}

func (x *MeshConnTLS) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshConnTLS.ProtoReflect.Descriptor instead.
func (*MeshConnTLS) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{4}
}

func (x *MeshConnTLS) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MeshConnTLS) GetCaCertData() []byte {
	if x != nil {
		return x.CaCertData
	}
	return nil
}

func (x *MeshConnTLS) GetCertData() []byte {
	if x != nil {
		return x.CertData
	}
	return nil
}

func (x *MeshConnTLS) GetKeyData() []byte {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *MeshConnTLS) GetVerifyChainOnly() bool {
	if x != nil {
		return x.VerifyChainOnly
	}
	return false
}

func (x *MeshConnTLS) GetSkipVerify() bool {
	if x != nil {
		return x.SkipVerify
	}
	return false
}

// ConnectResponse is returned by the Connect RPC.
type ConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of this connection.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Node id is the unique identifier of the node.
	NodeID string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	// Mesh domain is the domain of the mesh.
	MeshDomain string `protobuf:"bytes,3,opt,name=meshDomain,proto3" json:"meshDomain,omitempty"`
	// IPv4 is the IPv4 address of the node.
	Ipv4 string `protobuf:"bytes,4,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	// IPv6 is the IPv6 address of the node.
	Ipv6 string `protobuf:"bytes,5,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{5}
}

func (x *ConnectResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConnectResponse) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *ConnectResponse) GetMeshDomain() string {
	if x != nil {
		return x.MeshDomain
	}
	return ""
}

func (x *ConnectResponse) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *ConnectResponse) GetIpv6() string {
	if x != nil {
		return x.Ipv6
	}
	return ""
}

// DisconnectRequest is sent by an application to a daemon to disconnect
// from a mesh. This message will eventually contain unique identifiers
// for allowing the application to disconnect from a specific mesh.
type DisconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of this connection.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DisconnectRequest) Reset() {
	*x = DisconnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRequest) ProtoMessage() {}

func (x *DisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRequest.ProtoReflect.Descriptor instead.
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{6}
}

func (x *DisconnectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// DisconnectResponse is returned by the Disconnect RPC.
type DisconnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisconnectResponse) Reset() {
	*x = DisconnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectResponse) ProtoMessage() {}

func (x *DisconnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectResponse.ProtoReflect.Descriptor instead.
func (*DisconnectResponse) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{7}
}

// MetricsRequest is sent by the application to a daemon to retrieve interface
// metrics for a mesh connection.
type MetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs are the unique identifiers of the connections to retrieve metrics for.
	// If not provided, metrics for all connections will be returned.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *MetricsRequest) Reset() {
	*x = MetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsRequest) ProtoMessage() {}

func (x *MetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsRequest.ProtoReflect.Descriptor instead.
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{8}
}

func (x *MetricsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// MetricsResponse is a message containing interface metrics.
type MetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interfaces is a map of network IDs to their interface metrics.
	Interfaces map[string]*InterfaceMetrics `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetricsResponse) Reset() {
	*x = MetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponse) ProtoMessage() {}

func (x *MetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponse.ProtoReflect.Descriptor instead.
func (*MetricsResponse) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{9}
}

func (x *MetricsResponse) GetInterfaces() map[string]*InterfaceMetrics {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

// StatusRequest is sent by the application to a daemon to retrieve the status
// of a mesh connection.
type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of this connection.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{10}
}

func (x *StatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// StatusResponse is a message containing the status of the node.
type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ConnectionStatus is the status of the connection.
	ConnectionStatus StatusResponse_ConnectionStatus `protobuf:"varint,1,opt,name=connectionStatus,proto3,enum=v1.StatusResponse_ConnectionStatus" json:"connectionStatus,omitempty"`
	// Node is the node status. This is only populated if the node is connected.
	Node *MeshNode `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{11}
}

func (x *StatusResponse) GetConnectionStatus() StatusResponse_ConnectionStatus {
	if x != nil {
		return x.ConnectionStatus
	}
	return StatusResponse_DISCONNECTED
}

func (x *StatusResponse) GetNode() *MeshNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// AppQueryRequest is sent by the application to a daemon to query a mesh's storage.
type AppQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of this connection.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Query is the query to execute.
	Query *QueryRequest `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *AppQueryRequest) Reset() {
	*x = AppQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppQueryRequest) ProtoMessage() {}

func (x *AppQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppQueryRequest.ProtoReflect.Descriptor instead.
func (*AppQueryRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{12}
}

func (x *AppQueryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppQueryRequest) GetQuery() *QueryRequest {
	if x != nil {
		return x.Query
	}
	return nil
}

// AppSubscribeRequest is sent by the application to a daemon to subscribe to a mesh's storage.
type AppSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of this connection.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Subscribe is the subscription to execute.
	Subscribe *SubscribeRequest `protobuf:"bytes,2,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
}

func (x *AppSubscribeRequest) Reset() {
	*x = AppSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSubscribeRequest) ProtoMessage() {}

func (x *AppSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSubscribeRequest.ProtoReflect.Descriptor instead.
func (*AppSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{13}
}

func (x *AppSubscribeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppSubscribeRequest) GetSubscribe() *SubscribeRequest {
	if x != nil {
		return x.Subscribe
	}
	return nil
}

// AppPublishRequest is sent by the application to a daemon to publish to a mesh's storage.
type AppPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of this connection.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Publish is the publish to execute.
	Publish *PublishRequest `protobuf:"bytes,2,opt,name=publish,proto3" json:"publish,omitempty"`
}

func (x *AppPublishRequest) Reset() {
	*x = AppPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppPublishRequest) ProtoMessage() {}

func (x *AppPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppPublishRequest.ProtoReflect.Descriptor instead.
func (*AppPublishRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{14}
}

func (x *AppPublishRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppPublishRequest) GetPublish() *PublishRequest {
	if x != nil {
		return x.Publish
	}
	return nil
}

var File_v1_app_proto protoreflect.FileDescriptor

var file_v1_app_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xed, 0x0a, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x40, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x64, 0x64, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72,
	0x73, 0x12, 0x36, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x12, 0x21, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x4c, 0x53, 0x52, 0x03,
	0x74, 0x6c, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x44, 0x44, 0x52, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x41, 0x44, 0x44, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x45, 0x4e, 0x44, 0x45, 0x5a, 0x56, 0x4f, 0x55, 0x53, 0x10, 0x02, 0x22, 0x40, 0x0a, 0x0a,
	0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x44, 0x41, 0x50, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02,
	0x49, 0x44, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x54, 0x4c, 0x53, 0x10, 0x04, 0x22, 0x6e,
	0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f,
	0x52, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x44, 0x41, 0x50, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44,
	0x44, 0x52, 0x53, 0x5f, 0x45, 0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45, 0x10, 0x04, 0x3a, 0xdf,
	0x04, 0xba, 0x48, 0xdb, 0x04, 0x1a, 0x9b, 0x01, 0x0a, 0x2c, 0x6e, 0x6f, 0x6e, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x38, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x20, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x6f, 0x6e,
	0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x1a, 0x31, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x73, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x3d,
	0x3d, 0x20, 0x30, 0x1a, 0x9a, 0x01, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x48, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20,
	0x6f, 0x6e, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x69, 0x61, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x64,
	0x64, 0x72, 0x1a, 0x2c, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x20, 0x21, 0x3d, 0x20, 0x32, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61,
	0x64, 0x64, 0x72, 0x73, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x3d, 0x3d, 0x20, 0x30,
	0x1a, 0x76, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x6d, 0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x43, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x54, 0x4c, 0x53, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x54, 0x4c, 0x53, 0x1a, 0x29, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x3d,
	0x3d, 0x20, 0x34, 0x20, 0x26, 0x26, 0x20, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74, 0x6c, 0x73,
	0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xa5, 0x01, 0x0a, 0x20, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x3e, 0x4d,
	0x75, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x61, 0x20, 0x54, 0x4c,
	0x53, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x54, 0x4c, 0x53, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x41, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x3d,
	0x3d, 0x20, 0x34, 0x20, 0x26, 0x26, 0x20, 0x28, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74, 0x6c,
	0x73, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7c, 0x7c, 0x20, 0x21, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x29,
	0x22, 0x2c, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x44, 0x4e, 0x53,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x44, 0x4e, 0x53, 0x22, 0x44,
	0x0a, 0x10, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x22, 0x2d, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e,
	0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e,
	0x54, 0x4c, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x63, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0x81, 0x01,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x73, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76,
	0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76,
	0x36, 0x22, 0x31, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01, 0x01, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x0a, 0x0e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xab,
	0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x53, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01,
	0x01, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x0e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x22, 0x43, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0x57, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01, 0x01, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x40, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x67, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01, 0x01, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x5f, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01,
	0x01, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x32, 0x96, 0x03, 0x0a, 0x09, 0x41, 0x70,
	0x70, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x12, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a,
	0x0a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x15, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x07,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x31, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x13,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x64, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x41, 0x70,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x72, 0x6f, 0x6a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x65, 0x62, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x56, 0x58, 0x58, 0xaa, 0x02, 0x02, 0x56, 0x31, 0xca, 0x02, 0x02,
	0x56, 0x31, 0xe2, 0x02, 0x0e, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x02, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_app_proto_rawDescOnce sync.Once
	file_v1_app_proto_rawDescData = file_v1_app_proto_rawDesc
)

func file_v1_app_proto_rawDescGZIP() []byte {
	file_v1_app_proto_rawDescOnce.Do(func() {
		file_v1_app_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_app_proto_rawDescData)
	})
	return file_v1_app_proto_rawDescData
}

var file_v1_app_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_v1_app_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_v1_app_proto_goTypes = []interface{}{
	(ConnectRequest_AddrType)(0),         // 0: v1.ConnectRequest.AddrType
	(ConnectRequest_AuthMethod)(0),       // 1: v1.ConnectRequest.AuthMethod
	(ConnectRequest_AuthHeader)(0),       // 2: v1.ConnectRequest.AuthHeader
	(StatusResponse_ConnectionStatus)(0), // 3: v1.StatusResponse.ConnectionStatus
	(*ConnectRequest)(nil),               // 4: v1.ConnectRequest
	(*MeshConnNetworking)(nil),           // 5: v1.MeshConnNetworking
	(*MeshConnServices)(nil),             // 6: v1.MeshConnServices
	(*MeshConnBootstrap)(nil),            // 7: v1.MeshConnBootstrap
	(*MeshConnTLS)(nil),                  // 8: v1.MeshConnTLS
	(*ConnectResponse)(nil),              // 9: v1.ConnectResponse
	(*DisconnectRequest)(nil),            // 10: v1.DisconnectRequest
	(*DisconnectResponse)(nil),           // 11: v1.DisconnectResponse
	(*MetricsRequest)(nil),               // 12: v1.MetricsRequest
	(*MetricsResponse)(nil),              // 13: v1.MetricsResponse
	(*StatusRequest)(nil),                // 14: v1.StatusRequest
	(*StatusResponse)(nil),               // 15: v1.StatusResponse
	(*AppQueryRequest)(nil),              // 16: v1.AppQueryRequest
	(*AppSubscribeRequest)(nil),          // 17: v1.AppSubscribeRequest
	(*AppPublishRequest)(nil),            // 18: v1.AppPublishRequest
	nil,                                  // 19: v1.ConnectRequest.AuthCredentialsEntry
	nil,                                  // 20: v1.MetricsResponse.InterfacesEntry
	(*MeshNode)(nil),                     // 21: v1.MeshNode
	(*QueryRequest)(nil),                 // 22: v1.QueryRequest
	(*SubscribeRequest)(nil),             // 23: v1.SubscribeRequest
	(*PublishRequest)(nil),               // 24: v1.PublishRequest
	(*InterfaceMetrics)(nil),             // 25: v1.InterfaceMetrics
	(*QueryResponse)(nil),                // 26: v1.QueryResponse
	(*SubscriptionEvent)(nil),            // 27: v1.SubscriptionEvent
	(*PublishResponse)(nil),              // 28: v1.PublishResponse
}
var file_v1_app_proto_depIdxs = []int32{
	1,  // 0: v1.ConnectRequest.authMethod:type_name -> v1.ConnectRequest.AuthMethod
	19, // 1: v1.ConnectRequest.authCredentials:type_name -> v1.ConnectRequest.AuthCredentialsEntry
	0,  // 2: v1.ConnectRequest.addrType:type_name -> v1.ConnectRequest.AddrType
	5,  // 3: v1.ConnectRequest.networking:type_name -> v1.MeshConnNetworking
	6,  // 4: v1.ConnectRequest.services:type_name -> v1.MeshConnServices
	7,  // 5: v1.ConnectRequest.bootstrap:type_name -> v1.MeshConnBootstrap
	8,  // 6: v1.ConnectRequest.tls:type_name -> v1.MeshConnTLS
	20, // 7: v1.MetricsResponse.interfaces:type_name -> v1.MetricsResponse.InterfacesEntry
	3,  // 8: v1.StatusResponse.connectionStatus:type_name -> v1.StatusResponse.ConnectionStatus
	21, // 9: v1.StatusResponse.node:type_name -> v1.MeshNode
	22, // 10: v1.AppQueryRequest.query:type_name -> v1.QueryRequest
	23, // 11: v1.AppSubscribeRequest.subscribe:type_name -> v1.SubscribeRequest
	24, // 12: v1.AppPublishRequest.publish:type_name -> v1.PublishRequest
	25, // 13: v1.MetricsResponse.InterfacesEntry.value:type_name -> v1.InterfaceMetrics
	4,  // 14: v1.AppDaemon.Connect:input_type -> v1.ConnectRequest
	10, // 15: v1.AppDaemon.Disconnect:input_type -> v1.DisconnectRequest
	12, // 16: v1.AppDaemon.Metrics:input_type -> v1.MetricsRequest
	14, // 17: v1.AppDaemon.Status:input_type -> v1.StatusRequest
	16, // 18: v1.AppDaemon.Query:input_type -> v1.AppQueryRequest
	17, // 19: v1.AppDaemon.Subscribe:input_type -> v1.AppSubscribeRequest
	18, // 20: v1.AppDaemon.Publish:input_type -> v1.AppPublishRequest
	9,  // 21: v1.AppDaemon.Connect:output_type -> v1.ConnectResponse
	11, // 22: v1.AppDaemon.Disconnect:output_type -> v1.DisconnectResponse
	13, // 23: v1.AppDaemon.Metrics:output_type -> v1.MetricsResponse
	15, // 24: v1.AppDaemon.Status:output_type -> v1.StatusResponse
	26, // 25: v1.AppDaemon.Query:output_type -> v1.QueryResponse
	27, // 26: v1.AppDaemon.Subscribe:output_type -> v1.SubscriptionEvent
	28, // 27: v1.AppDaemon.Publish:output_type -> v1.PublishResponse
	21, // [21:28] is the sub-list for method output_type
	14, // [14:21] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_v1_app_proto_init() }
func file_v1_app_proto_init() {
	if File_v1_app_proto != nil {
		return
	}
	file_v1_mesh_proto_init()
	file_v1_node_proto_init()
	file_v1_storage_query_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_app_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshConnNetworking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshConnServices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshConnBootstrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshConnTLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_app_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_app_proto_goTypes,
		DependencyIndexes: file_v1_app_proto_depIdxs,
		EnumInfos:         file_v1_app_proto_enumTypes,
		MessageInfos:      file_v1_app_proto_msgTypes,
	}.Build()
	File_v1_app_proto = out.File
	file_v1_app_proto_rawDesc = nil
	file_v1_app_proto_goTypes = nil
	file_v1_app_proto_depIdxs = nil
}
