// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/plugin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PluginConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PluginConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PluginConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PluginConfigurationMultiError, or nil if none found.
func (m *PluginConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *PluginConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PluginConfigurationValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PluginConfigurationValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginConfigurationValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PluginConfigurationMultiError(errors)
	}

	return nil
}

// PluginConfigurationMultiError is an error wrapping multiple validation
// errors returned by PluginConfiguration.ValidateAll() if the designated
// constraints aren't met.
type PluginConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginConfigurationMultiError) AllErrors() []error { return m }

// PluginConfigurationValidationError is the validation error returned by
// PluginConfiguration.Validate if the designated constraints aren't met.
type PluginConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginConfigurationValidationError) ErrorName() string {
	return "PluginConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e PluginConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPluginConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginConfigurationValidationError{}

// Validate checks the field values on PluginInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PluginInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PluginInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PluginInfoMultiError, or
// nil if none found.
func (m *PluginInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PluginInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Description

	if len(errors) > 0 {
		return PluginInfoMultiError(errors)
	}

	return nil
}

// PluginInfoMultiError is an error wrapping multiple validation errors
// returned by PluginInfo.ValidateAll() if the designated constraints aren't met.
type PluginInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginInfoMultiError) AllErrors() []error { return m }

// PluginInfoValidationError is the validation error returned by
// PluginInfo.Validate if the designated constraints aren't met.
type PluginInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginInfoValidationError) ErrorName() string { return "PluginInfoValidationError" }

// Error satisfies the builtin error interface
func (e PluginInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPluginInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginInfoValidationError{}

// Validate checks the field values on AuthenticationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticationRequestMultiError, or nil if none found.
func (m *AuthenticationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Headers

	if len(errors) > 0 {
		return AuthenticationRequestMultiError(errors)
	}

	return nil
}

// AuthenticationRequestMultiError is an error wrapping multiple validation
// errors returned by AuthenticationRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthenticationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticationRequestMultiError) AllErrors() []error { return m }

// AuthenticationRequestValidationError is the validation error returned by
// AuthenticationRequest.Validate if the designated constraints aren't met.
type AuthenticationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticationRequestValidationError) ErrorName() string {
	return "AuthenticationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticationRequestValidationError{}

// Validate checks the field values on AuthenticationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticationResponseMultiError, or nil if none found.
func (m *AuthenticationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AuthenticationResponseMultiError(errors)
	}

	return nil
}

// AuthenticationResponseMultiError is an error wrapping multiple validation
// errors returned by AuthenticationResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthenticationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticationResponseMultiError) AllErrors() []error { return m }

// AuthenticationResponseValidationError is the validation error returned by
// AuthenticationResponse.Validate if the designated constraints aren't met.
type AuthenticationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticationResponseValidationError) ErrorName() string {
	return "AuthenticationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticationResponseValidationError{}

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	switch v := m.Event.(type) {
	case *Event_Node:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNode()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Node",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Node",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on AllocateIPRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AllocateIPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllocateIPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllocateIPRequestMultiError, or nil if none found.
func (m *AllocateIPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllocateIPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for Subnet

	if len(errors) > 0 {
		return AllocateIPRequestMultiError(errors)
	}

	return nil
}

// AllocateIPRequestMultiError is an error wrapping multiple validation errors
// returned by AllocateIPRequest.ValidateAll() if the designated constraints
// aren't met.
type AllocateIPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllocateIPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllocateIPRequestMultiError) AllErrors() []error { return m }

// AllocateIPRequestValidationError is the validation error returned by
// AllocateIPRequest.Validate if the designated constraints aren't met.
type AllocateIPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllocateIPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllocateIPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllocateIPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllocateIPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllocateIPRequestValidationError) ErrorName() string {
	return "AllocateIPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AllocateIPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllocateIPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllocateIPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllocateIPRequestValidationError{}

// Validate checks the field values on AllocatedIP with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AllocatedIP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllocatedIP with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AllocatedIPMultiError, or
// nil if none found.
func (m *AllocatedIP) ValidateAll() error {
	return m.validate(true)
}

func (m *AllocatedIP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	if len(errors) > 0 {
		return AllocatedIPMultiError(errors)
	}

	return nil
}

// AllocatedIPMultiError is an error wrapping multiple validation errors
// returned by AllocatedIP.ValidateAll() if the designated constraints aren't met.
type AllocatedIPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllocatedIPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllocatedIPMultiError) AllErrors() []error { return m }

// AllocatedIPValidationError is the validation error returned by
// AllocatedIP.Validate if the designated constraints aren't met.
type AllocatedIPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllocatedIPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllocatedIPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllocatedIPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllocatedIPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllocatedIPValidationError) ErrorName() string { return "AllocatedIPValidationError" }

// Error satisfies the builtin error interface
func (e AllocatedIPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllocatedIP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllocatedIPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllocatedIPValidationError{}

// Validate checks the field values on ReleaseIPRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReleaseIPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseIPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseIPRequestMultiError, or nil if none found.
func (m *ReleaseIPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseIPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for Ip

	if len(errors) > 0 {
		return ReleaseIPRequestMultiError(errors)
	}

	return nil
}

// ReleaseIPRequestMultiError is an error wrapping multiple validation errors
// returned by ReleaseIPRequest.ValidateAll() if the designated constraints
// aren't met.
type ReleaseIPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseIPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseIPRequestMultiError) AllErrors() []error { return m }

// ReleaseIPRequestValidationError is the validation error returned by
// ReleaseIPRequest.Validate if the designated constraints aren't met.
type ReleaseIPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseIPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseIPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseIPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseIPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseIPRequestValidationError) ErrorName() string { return "ReleaseIPRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseIPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseIPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseIPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseIPRequestValidationError{}

// Validate checks the field values on PluginQuery with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PluginQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PluginQuery with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PluginQueryMultiError, or
// nil if none found.
func (m *PluginQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *PluginQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Command

	// no validation rules for Query

	if len(errors) > 0 {
		return PluginQueryMultiError(errors)
	}

	return nil
}

// PluginQueryMultiError is an error wrapping multiple validation errors
// returned by PluginQuery.ValidateAll() if the designated constraints aren't met.
type PluginQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginQueryMultiError) AllErrors() []error { return m }

// PluginQueryValidationError is the validation error returned by
// PluginQuery.Validate if the designated constraints aren't met.
type PluginQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginQueryValidationError) ErrorName() string { return "PluginQueryValidationError" }

// Error satisfies the builtin error interface
func (e PluginQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPluginQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginQueryValidationError{}

// Validate checks the field values on PluginQueryResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PluginQueryResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PluginQueryResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PluginQueryResultMultiError, or nil if none found.
func (m *PluginQueryResult) ValidateAll() error {
	return m.validate(true)
}

func (m *PluginQueryResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Key

	// no validation rules for Error

	if len(errors) > 0 {
		return PluginQueryResultMultiError(errors)
	}

	return nil
}

// PluginQueryResultMultiError is an error wrapping multiple validation errors
// returned by PluginQueryResult.ValidateAll() if the designated constraints
// aren't met.
type PluginQueryResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginQueryResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginQueryResultMultiError) AllErrors() []error { return m }

// PluginQueryResultValidationError is the validation error returned by
// PluginQueryResult.Validate if the designated constraints aren't met.
type PluginQueryResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginQueryResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginQueryResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginQueryResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginQueryResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginQueryResultValidationError) ErrorName() string {
	return "PluginQueryResultValidationError"
}

// Error satisfies the builtin error interface
func (e PluginQueryResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPluginQueryResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginQueryResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginQueryResultValidationError{}
