/*
Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package v1;

import "v1/node.proto";

// StartDataChannelRequest is a request to start a data channel.
// The answer and candidate fields are populated after the offer 
// is received.
message StartDataChannelRequest {
  // NodeID is the ID of the node to send the data to.
  string nodeID = 1;
  // Proto is the protocol of the traffic.
  string proto = 2;
  // Dst is the destination address of the traffic.
  string dst = 3;
  // Port is the destination port of the traffic. A port of 0 coupled
  // with the udp protocol indicates forwarding to the WireGuard interface.
  uint32 port = 4;
  // Answer is the answer to the offer.
  string answer = 5;
  // Candidate is an ICE candidate.
  string candidate = 6;
}

// DataChannelOffer is an offer for a data channel. Candidates
// are sent after the offer is sent.
message DataChannelOffer {
  // Offer is the offer.
  string offer = 1;
  // STUNServers is the list of STUN servers to use.
  repeated string stunServers = 2;
  // Candidate is an ICE candidate.
  string candidate = 3;
}

// WebRTC is a service for negotiating WebRTC connections to nodes in the mesh.
// It is typically run alongside a TURN server, however the server can be configured
// to use public STUN servers instead.
service WebRTC {
    // StartDataChannel requests a new WebRTC connection to a node.
    // The client speaks first with the request containing the node ID
    // and where forwarded packets should be sent. The server responds
    // with an offer and STUN servers to be used to establish a WebRTC connection.
    // The client should then respond with an answer to the offer that matches the
    // spec of the DataChannel.CHANNELS enum value.
    //
    // After the offer is accepted, the stream can be used to exchange ICE candidates
    // to speed up the connection process.
    rpc StartDataChannel(stream StartDataChannelRequest) returns (stream DataChannelOffer) {}

    // StartSignalChannel starts a signaling channel to a remote node. This can be used to 
    // negotiate WebRTC connections both inside and outside of the mesh. Messages on the wire
    // are proxied to the remote node.
    rpc StartSignalChannel(stream WebRTCSignal) returns (stream WebRTCSignal) {}
}
