/*
Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package v1;

import "google/protobuf/duration.proto";

// NetworkState represents the full network state as returned by
// a network state query.
message NetworkState {
    string networkV4 = 1;
    string networkV6 = 2;
    string domain = 3;
}

// QueryRequest is sent by the application to the node to query the mesh for
// information.
message QueryRequest {
    // QueryCommand is the type of the query.
    enum QueryCommand {
        // GET is the command to get a value.
        GET = 0;
        // LIST is the command to list keys with an optional prefix.
        LIST = 1;
        // PUT is the command to put a value.
        PUT = 2;
        // DELETE is the command to delete a value.
        DELETE = 3;
    };
    // QueryType is the type of object being queried.
    enum QueryType {
        // VALUE represents a raw value query at a supplied key.
        VALUE = 0;
        // KEYS is the type for querying keys.
        KEYS = 1;
        // PEERS is the type for querying peers.
        PEERS = 2;
        // EDGES is the type for querying edges.
        EDGES = 3;
        // ROUTES is the type for querying routes.
        ROUTES = 4;
        // ACLS is the type for querying ACLs.
        ACLS = 5;
        // ROLES is the type for querying roles.
        ROLES = 6;
        // ROLEBINDINGS is the type for querying role bindings.
        ROLEBINDINGS = 7;
        // GROUPS is the type for querying groups.
        GROUPS = 8;
        // NETWORK_STATE is the type for querying network configuration.
        NETWORK_STATE = 9;
        // RBAC_STATE is the type for querying RBAC configuration.
        // This will return a single item of true or false.
        RBAC_STATE = 10;
    };
    // Command is the command of the query.
    QueryCommand command = 1;
    // Type is the type of resource for the query.
    QueryType type = 2;
    // Query is the string of the query. This follows the format of a comma-separted
    // label selector and is only applicable for certain queries. For get queries this
    // will usually be an ID. For list queries this will usually be one or more filters.
    // On put or delete queries, this should be an ID.
    string query = 3;
    // Item is an item to put. This is only applicable for PUT queries.
    bytes item = 4;
}

// QueryResponse is the message containing a mesh query result.
message QueryResponse {
    // Items contain the results of the query. These will be protobuf
    // json-encoded objects of the given query type.
    repeated bytes items = 1;
    // Error is an error that happened during the query. This will always
    // be populated on errors, but single-flight queries will return
    // a coded error instead.
    string error = 4;
}

// SubscribeRequest is sent by the application to the node to subscribe to
// events. This currently only supports database events.
message SubscribeRequest{
    // Prefix is the prefix of the events to subscribe to.
    bytes prefix = 1;
}

// SubscriptionEvent is a message containing a subscription event.
message SubscriptionEvent {
    // Key is the key of the event.
    bytes key = 1;
    // Value is the value of the event. This will be the raw value of the key.
    bytes value = 2;
}

// PublishRequest is sent by the application to the node to publish events.
// This currently only supports database events.
message PublishRequest {
    // Key is the key of the event.
    bytes key = 1;
    // Value is the value of the event. This will be the raw value of the key.
    bytes value = 2;
    // TTL is the time for the event to live in the database.
    google.protobuf.Duration ttl = 3;
}

// PublishResponse is the response to a publish request. This is currently
// empty.
message PublishResponse {
}

// StorageQueryService is the service for querying information about the mesh state.
service StorageQueryService {
    // Query is used to query the mesh for information.
    rpc Query(QueryRequest) returns (QueryResponse) {}

    // Publish is used to publish events to the mesh database. A restricted set
    // of keys are allowed to be published to. This is only available on nodes 
    // that are able to provide storage.
    rpc Publish(PublishRequest) returns (PublishResponse) {}

    // Subscribe is used to subscribe to events at a particular prefix. This is
    // only available on nodes that are able to provide storage.
    rpc Subscribe(SubscribeRequest) returns (stream SubscriptionEvent) {}
}
