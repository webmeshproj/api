/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package v1;

import "v1/node.proto";
import "v1/raft.proto";

// ConnectProtocol is a type of protocol for establishing a connection into a mesh.
enum ConnectProtocol {
    // CONNECT_NATIVE indicates that the node should connect to other nodes via the native
    // webmesh mechanisms.
    CONNECT_NATIVE = 0;
    // CONNECT_ICE indicates that the node should connect to other nodes via ICE.
    CONNECT_ICE = 1;
    // CONNECT_LIBP2P indicates that the node should connect to other nodes via libp2p.
    CONNECT_LIBP2P = 2;
};

// JoinRequest is a request to join the cluster.
message JoinRequest {
    // id is the ID of the node.
    string id = 1;
    // public_key is the public key of the node to broadcast to peers.
    string public_key = 2;
    // primary_endpoint is a routable address for the node. If left unset, 
    // the node is assumed to be behind a NAT and not directly accessible.
    string primary_endpoint = 4;
    // wireguard_endpoints is a list of WireGuard endpoints for the node.
    repeated string wireguard_endpoints = 5;
    // zone_awareness_id is the zone awareness ID of the node.
    string zone_awareness_id = 6;
    // assign_ipv4 is whether an IPv4 address should be assigned to the node.
    bool assign_ipv4 = 7;
    // prefer_raft_ipv6 is whether IPv6 should be preferred over IPv4 for raft communication.
    // This is only used if assign_ipv4 is true.
    bool prefer_raft_ipv6 = 8;
    // as_voter is whether the node should receive a vote in elections. The request
    // will be denied if the node is not allowed to vote.
    bool as_voter = 9;
    // as_observer is whether the node should be added as an observer. They will receive
    // updates to the raft log, but not be able to vote in elections.
    bool as_observer = 10;
    // routes is a list of routes to advertise to peers. The request will be denied
    // if the node is not allowed to put routes.
    repeated string routes = 11;
    // direct_peers is a map of extra peers that should be connected to directly over relays. 
    // The provided edge attribute is the callers preference of how the relay should be created.
    // The request will be denied if the node is not allowed to put data channels or edges.
    // The default joining behavior creates direct links between the caller and the joiner.
    // If the caller has a primary endpoint, the joiner will link the caller to all
    // other nodes with a primary endpoint. If the caller has a zone awareness ID,
    // the joiner will link the caller to all other nodes with the same zone awareness ID
    // that also have a primary endpoint.
    map<string, ConnectProtocol> direct_peers = 12;
    // features is a list of features supported by the node that should be advertised to peers
    // and the port they are available on.
    repeated FeaturePort features = 13;
    // multiaddrs are libp2p multiaddresses this node is listening on.
    repeated string multiaddrs = 14;
}

// JoinResponse is a response to a join request.
message JoinResponse {
    // address_ipv4 is the private IPv4 wireguard address of the node
    // in CIDR format representing the network. This is only set if
    // assign_ipv4 was set in the request or no network_ipv6 was provided.
    // The bits are set to the network bits of the Mesh IPv4 network.
    string address_ipv4 = 1;
    // address_ipv6 is the IPv6 network assigned to the node.
    string address_ipv6 = 2;
    // network_ipv4 is the IPv4 network of the Mesh.
    string network_ipv4 = 3;
    // network_ipv6 is the IPv6 network of the Mesh.
    string network_ipv6 = 4;
    // peers is a list of wireguard peers to connect to.
    repeated WireGuardPeer peers = 5;
    // ice_servers is a list of public nodes that can be used to negotiate
    // ICE connections if required. This may only be populated when one of
    // the peers has the ICE flag set. This must be set if the requestor
    // specifies direct_peers.
    repeated string ice_servers = 6;
    // dns_servers is a list of peers offering DNS services.
    repeated string dns_servers = 7;
    // mesh_domain is the domain of the mesh.
    string mesh_domain = 8;
}

// UpdateRequest contains most of the same fields as JoinRequest, but is
// used to update the state of a node in the cluster.
message UpdateRequest {
    // id is the ID of the node.
    string id = 1;
    // public_key is the public key of the node to broadcast to peers.
    string public_key = 2;
    // primary_endpoint is a routable address for the node. If left unset, 
    // the node is assumed to be behind a NAT and not directly accessible.
    string primary_endpoint = 3;
    // wireguard_endpoints is a list of WireGuard endpoints for the node.
    repeated string wireguard_endpoints = 4;
    // zone_awareness_id is the zone awareness ID of the node.
    string zone_awareness_id = 5;
    // as_voter is whether the node should receive a vote in elections. The request
    // will be denied if the node is not allowed to vote.
    bool as_voter = 6;
    // routes is a list of routes to advertise to peers. The request will be denied
    // if the node is not allowed to put routes.
    repeated string routes = 7;
    // features is a list of features supported by the node that should be advertised to peers
    // and the port they are available on.
    repeated FeaturePort features = 8;
    // multiaddrs are libp2p multiaddresses this node is listening on.
    repeated string multiaddrs = 9;
}

// UpdateResponse is a response to an update request. It is currently empty.
message UpdateResponse {}

// WireGuardPeer is a peer in the Wireguard network.
message WireGuardPeer {
    // Node is information about this node.
    MeshNode node = 1;
    // allowed_ips is the list of allowed IPs for the peer.
    repeated string allowed_ips = 2;
    // allowed_routes is the list of allowed routes for the peer.
    repeated string allowed_routes = 3;
    // proto indicates the protocol to use to connect to the peer.
    ConnectProtocol proto = 4;
}

// LeaveRequest is a request to leave the cluster.
message LeaveRequest {
    // id is the ID of the node.
    string id = 1;
}

// LeaveResponse is a response to a leave request. It is currently empty.
message LeaveResponse {}

// RaftConfigurationRequest is a request to get the current Raft configuration.
message RaftConfigurationRequest {}

// RaftConfigurationResponse is a response to a Raft configuration request.
message RaftConfigurationResponse {
    // servers is the list of servers in the Raft configuration.
    repeated RaftServer servers = 1;
}

// RaftServer is a server in the Raft configuration.
message RaftServer {
    // ID is the ID of the server.
    string id = 1;
    // Suffrage is the suffrage of the server.
    ClusterStatus suffrage = 2;
    // Address is the mesh address of the server.
    string address = 3;
}

// SubscribePeersRequest is a request to subscribe to peer updates.
message SubscribePeersRequest {
    // id is the ID of the node.
    string id = 1;
}

// PeerConfigurations is a stream of peer configurations.
message PeerConfigurations {
    // peers is a list of wireguard peers to connect to.
    repeated WireGuardPeer peers = 5;
    // ice_servers is a list of public nodes that can be used to negotiate
    // ICE connections if required. This may only be populated when one of
    // the peers has the ICE flag set.
    repeated string ice_servers = 6;
    // dns_servers is a list of peers offering DNS services.
    repeated string dns_servers = 7;
}

// The membership service is exposed on raft-nodes to allow nodes to join
// and leave the cluster. This service is meant to be made available publicly
// to allow people in from the outside. 
service Membership {
    // Join is used to join a node to the mesh.
    rpc Join(JoinRequest) returns (JoinResponse) {}

    // Update is used by a node to update its state in the mesh. The node will be updated
    // in the mesh and will be able to query the mesh state or vote in elections. Only
    // non-empty fields will be updated. It is almost semantically equivalent to a join request
    // with the same ID, but redefined to avoid confusion and to allow for expansion.
    rpc Update(UpdateRequest) returns (UpdateResponse) {}

    // Leave is used to remove a node from the mesh. The node will be removed from the mesh
    // and will no longer be able to query the mesh state or vote in elections.
    rpc Leave(LeaveRequest) returns (LeaveResponse) {}

    // SubscribePeers subscribes to the peer configuration for the given node. The node
    // will receive updates to the peer configuration as it changes.
    rpc SubscribePeers(SubscribePeersRequest) returns (stream PeerConfigurations) {}

    // Apply is used by voting nodes to request a log entry be applied to the state machine.
    // This is only available on the leader, and can only be called by nodes that are allowed
    // to vote.
    rpc Apply(RaftLogEntry) returns (RaftApplyResponse) {}

    // GetRaftConfiguration returns the current Raft configuration.
    rpc GetRaftConfiguration(RaftConfigurationRequest) returns (RaftConfigurationResponse) {}
}
