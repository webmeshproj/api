/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package v1;

import "google/protobuf/empty.proto";
import "v1/node.proto";
import "v1/raft.proto";

// JoinRequest is a request to join the cluster.
message JoinRequest {
    // id is the ID of the node.
    string id = 1;
    // public_key is the public wireguard key of the node to broadcast to peers.
    string public_key = 2;
    // raft_port is the Raft listen port of the node.
    int32 raft_port = 3;
    // grpc_port is the gRPC listen port of the node.
    int32 grpc_port = 4;
    // meshdns_port is the port the node wishes to advertise to offer DNS to other peers.
    // a value of 0 indicates the node does not wish to offer DNS. ports are currently
    // assumed to be UDP.
    int32 meshdns_port = 5;
    // primary_endpoint is a routable address for the node. If left unset, 
    // the node is assumed to be behind a NAT and not directly accessible.
    string primary_endpoint = 6;
    // wireguard_endpoints is a list of WireGuard endpoints for the node.
    repeated string wireguard_endpoints = 7;
    // zone_awareness_id is the zone awareness ID of the node.
    string zone_awareness_id = 8;
    // assign_ipv4 is whether an IPv4 address should be assigned to the node.
    bool assign_ipv4 = 9;
    // prefer_raft_ipv6 is whether IPv6 should be preferred over IPv4 for raft communication.
    // This is only used if assign_ipv4 is true.
    bool prefer_raft_ipv6 = 10;
    // as_voter is whether the node should receive a vote in elections. The request
    // will be denied if the node is not allowed to vote.
    bool as_voter = 11;
    // as_observer is whether the node should be added as an observer. They will receive
    // updates to the raft log, but not be able to vote in elections.
    bool as_observer = 12;
    // routes is a list of routes to advertise to peers. The request will be denied
    // if the node is not allowed to put routes.
    repeated string routes = 13;
    // direct_peers is a list of extra peers that should be connected to directly over ICE. 
    // The request will be denied if the node is not allowed to put data channels or edges.
    // The default joining behavior creates non-ICE links between the caller and the joiner.
    // If the caller has a primary endpoint, the joiner will link the caller to all
    // other nodes with a primary endpoint. If the caller has a zone awareness ID,
    // the joiner will link the caller to all other nodes with the same zone awareness ID
    // that also have a primary endpoint.
    repeated string direct_peers = 14;
    // features is a list of features supported by the node that should be advertised to peers.
    repeated Feature features = 15;
}

// JoinResponse is a response to a join request.
message JoinResponse {
    // address_ipv4 is the private IPv4 wireguard address of the node
    // in CIDR format representing the network. This is only set if
    // assign_ipv4 was set in the request or no network_ipv6 was provided.
    // The bits are set to the network bits of the Mesh IPv4 network.
    string address_ipv4 = 1;
    // address_ipv6 is the IPv6 network assigned to the node.
    string address_ipv6 = 2;
    // network_ipv4 is the IPv4 network of the Mesh.
    string network_ipv4 = 3;
    // network_ipv6 is the IPv6 network of the Mesh.
    string network_ipv6 = 4;
    // peers is a list of wireguard peers to connect to.
    repeated WireGuardPeer peers = 5;
    // ice_servers is a list of public nodes that can be used to negotiate
    // ICE connections if required. This may only be populated when one of
    // the peers has the ICE flag set. This must be set if the requestor
    // specifies direct_peers.
    repeated string ice_servers = 6;
    // dns_servers is a list of peers offering DNS services.
    repeated string dns_servers = 7;
    // mesh_domain is the domain of the mesh.
    string mesh_domain = 8;
}

// UpdateRequest contains most of the same fields as JoinRequest, but is
// used to update the state of a node in the cluster.
message UpdateRequest {
    // id is the ID of the node.
    string id = 1;
    // public_key is the public wireguard key of the node to broadcast to peers.
    string public_key = 2;
    // raft_port is the Raft listen port of the node.
    int32 raft_port = 3;
    // grpc_port is the gRPC listen port of the node.
    int32 grpc_port = 4;
    // meshdns_port is the port the node wishes to advertise to offer DNS to other peers.
    // a value of 0 indicates the node does not wish to offer DNS. ports are currently
    // assumed to be UDP.
    int32 meshdns_port = 5;
    // primary_endpoint is a routable address for the node. If left unset, 
    // the node is assumed to be behind a NAT and not directly accessible.
    string primary_endpoint = 6;
    // wireguard_endpoints is a list of WireGuard endpoints for the node.
    repeated string wireguard_endpoints = 7;
    // zone_awareness_id is the zone awareness ID of the node.
    string zone_awareness_id = 8;
    // as_voter is whether the node should receive a vote in elections. The request
    // will be denied if the node is not allowed to vote.
    bool as_voter = 9;
    // routes is a list of routes to advertise to peers. The request will be denied
    // if the node is not allowed to put routes.
    repeated string routes = 10;
    // features is a list of features supported by the node that should be advertised to peers.
    repeated Feature features = 11;
}

// UpdateResponse is a response to an update request. It is currently empty.
message UpdateResponse {}

// WireGuardPeer is a peer in the Wireguard network.
message WireGuardPeer {
    // id is the ID of the peer.
    string id = 1;
    // public_key is the public key of the peer.
    string public_key = 2;
    // primary_endpoint is the primary endpoint of the peer.
    string primary_endpoint = 3;
    // wireguard_endpoints are the WireGuard endpoints for the peer, if applicable.
    repeated string wireguard_endpoints = 4;
    // zone_awareness_id is the zone awareness ID of the peer.
    string zone_awareness_id = 5;
    // address_ipv4 is the private IPv4 wireguard address of the peer.
    string address_ipv4 = 6;
    // address_ipv6 is the private IPv6 wireguard address of the peer.
    string address_ipv6 = 7;
    // allowed_ips is the list of allowed IPs for the peer.
    repeated string allowed_ips = 8;
    // allowed_routes is the list of allowed routes for the peer.
    repeated string allowed_routes = 9;
    // ice indicates whether the connection to this peer should be
    // established over ICE.
    bool ice = 10;
}

// LeaveRequest is a request to leave the cluster.
message LeaveRequest {
    // id is the ID of the node.
    string id = 1;
}

// SnapshotRequest is a request to create a snapshot. It is intentionally
// empty for now as there are no options.
message SnapshotRequest {
}

// SnapshotResponse is a response to a snapshot request.
message SnapshotResponse {
    // last_log_index is the last log index of the snapshot.
    uint64 last_log_index = 1;
    // current_term is the current term of the snapshot.
    uint64 current_term = 2;
    // snapshot is the snapshot data.
    bytes snapshot = 3;
}

// The membership service is exposed on raft-nodes to allow nodes to join
// and leave the cluster. This service is meant to be made available publicly
// to allow people in from the outside. 
service Membership{
    // Join is used to join a node to the mesh.
    rpc Join(JoinRequest) returns (JoinResponse) {}

    // Update is used by a node to update its state in the mesh. The node will be updated
    // in the mesh and will be able to query the mesh state or vote in elections. Only
    // non-empty fields will be updated. It is almost semantically equivalent to a join request
    // with the same ID, but redefined to avoid confusion and to allow for expansion.
    rpc Update(UpdateRequest) returns (UpdateResponse) {}

    // Leave is used to remove a node from the mesh. The node will be removed from the mesh
    // and will no longer be able to query the mesh state or vote in elections.
    rpc Leave(LeaveRequest) returns (google.protobuf.Empty) {}

    // Apply is used by voting nodes to request a log entry be applied to the state machine.
    // This is only available on the leader, and can only be called by nodes that are allowed
    // to vote.
    rpc Apply(RaftLogEntry) returns (RaftApplyResponse) {}

    // Snapshot is used to create a snapshot of the current state of the mesh.
    rpc Snapshot(SnapshotRequest) returns (SnapshotResponse) {}
}
