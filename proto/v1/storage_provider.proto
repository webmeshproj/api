/*
Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package v1;

import "google/protobuf/duration.proto";

import "v1/node.proto";

// BootstrapRequest is the request object for the Bootstrap RPC.
message BootstrapRequest {}

// BootstrapResponse is the response object for the Bootstrap RPC.
message BootstrapResponse {
    // Status is the status of the storage after the bootstrap.
    StorageStatus status = 1;
}

// GetPeersRequest is the request object for the GetPeers RPC.
message GetPeersRequest {}

// GetLeaderRequest is the request object for the GetLeader RPC.
message GetLeaderRequest {}

// StorageStatusRequest is the request object for the StorageStatus RPC.
message StorageStatusRequest {}

// StorageStatus is the response object for the StorageStatus RPC.
message StorageStatus {
    // IsWritable is true if the storage can currently be written to.
    bool isWritable = 1;
    // ClusterStatus is the status of the storage. The definitions applied
    // to each status are implementation specific.
    ClusterStatus clusterStatus = 2;
    // Peers is the list of servers that are currently recognized as peers 
    // by the storage plugin. This should include the current server.
    repeated StoragePeer peers = 3;
    // Message is an implementation specific message that can be used to provide
    // additional information about the storage status.
    string message = 4;
}

// StoragePeer is a server that is currently recognized by the storage plugin.
message StoragePeer {
    // ID is the id of the server.
    string id = 1;
    // PublicKey is the encoded public key of the server. This is not required
    // for demotion or removal RPCs. Not all implementations need to support this.
    string publicKey = 2;
    // Address is the address of the server. This is not required
    // for demotion or removal RPCs.
    string address = 3;
    // ClusterStatus is the status of the server. This is only
    // applicable during a GetStatus RPC.
    ClusterStatus clusterStatus = 4;
}

// StoragePeers is a list of servers that are currently recognized by the storage plugin.
message StoragePeers {
    // Peers is the list of servers that are currently recognized as peers 
    // by the storage plugin.
    repeated StoragePeer peers = 1;
}

// AddVoterResponse is the response object for the AddVoter RPC.
message AddVoterResponse {}

// AddObserverResponse is the response object for the AddObserver RPC.
message AddObserverResponse {}

// DemoteVoterResponse is the response object for the DemoteVoter RPC.
message DemoteVoterResponse {}

// RemoveServerResponse is the response object for the RemoveServer RPC.
message RemoveServerResponse {}

// StorageValue is a value stored in the storage.
message StorageValue {
    // Key is the key of the value.
    bytes key = 1;
    // Value is the value of the key.
    bytes value = 2;
}

// GetValueRequest is the request object for the GetValue RPC.
message GetValueRequest {
    // Key is the key to get the value for.
    bytes key = 1;
}

// GetValueResponse is the response object for the GetValue RPC.
message GetValueResponse {
    // Value is the value of the key.
    StorageValue value = 1;
}

// PutValueRequest is the request object for the PutValue RPC.
message PutValueRequest {
    // Value is the value to put.
    StorageValue value = 1;
    // TTL is the time to live for the value.
    google.protobuf.Duration ttl = 2;
}

// PutValueResponse is the response object for the PutValue RPC.
message PutValueResponse {}

// DeleteValueRequest is the request object for the DeleteValue RPC.
message DeleteValueRequest {
    // Key is the key to delete.
    bytes key = 1;
}

// DeleteValueResponse is the response object for the DeleteValue RPC.
message DeleteValueResponse {}

// ListKeysRequest is the request object for the ListValues RPC.
message ListKeysRequest {
    // Prefix is the prefix to list values for.
    bytes prefix = 1;
}

// ListKeysResponse is the response object for the ListValues RPC.
message ListKeysResponse {
    // Keys is the list of value keys for the prefix.
    repeated bytes keys = 1;
}

// ListValuesRequest is the request object for the ListValues RPC.
message ListValuesRequest {
    // Prefix is the prefix to list values for.
    bytes prefix = 1;
}

// ListValuesResponse is the response object for the ListValues RPC.
message ListValuesResponse {
    // Values is the list of values for the prefix.
    repeated StorageValue values = 1;
}

// SubscribePrefixRequest is the request object for the SubscribePrefix RPC.
message SubscribePrefixRequest {
    // Prefix is the prefix to subscribe to.
    bytes prefix = 1;
}

// PrefixEvent is an event that is emitted when a value is added or removed
// from the storage for a prefix.
message PrefixEvent {
    // Prefix is the prefix that the event is for.
    bytes prefix = 1;
    // Value is the value that was added or removed.
    StorageValue value = 2;

    enum EventType {
        // EventTypeUnknown is an unknown event type.
        EventTypeUnknown = 0;
        // EventTypeUpdated is an event for when a value is added or updated.
        EventTypeUpdated = 1;
        // EventTypeRemoved is an event for when a value is removed.
        EventTypeRemoved = 2;
    }

    // EventType is the type of event.
    EventType eventType = 3;
}

// StorageProviderPlugin is the service definition for a Webmesh storage provider.
service StorageProviderPlugin {
    // GetStatus returns the status of the storage.
    rpc GetStatus(StorageStatusRequest) returns (StorageStatus) {}
    // Bootstrap is called when the storage is created for the first time. 
    // It is assumed that this node has been elected as the leader of the cluster.
    // FailedPrecondition should be returned if the storage is already bootstrapped.
    rpc Bootstrap(BootstrapRequest) returns (BootstrapResponse) {}

    // For all of the following RPCs, the underlying implementation should ensure
    // that the storage is in a consistent state before returning.
    // FailedPrecondition should be returned if the operation cannot be performed 
    // for any of the following conditions:
    // - The storage is not writable.
    // - The storage is not bootstrapped.
    // - The storage is not the leader.

    // Storage Membership RPCs

    // AddVoter adds a voter to the storage. The underlying implementation
    // should ensure that the voter is added to the storage and that the
    // storage is in a consistent state before returning.
    rpc AddVoter(StoragePeer) returns (AddVoterResponse) {}
    // AddObserver adds an observer to the storage. The underlying implementation
    // should ensure that the observer is added to the storage and that the
    // storage is in a consistent state before returning. If observers are not
    // supported the underlying implementation can silently ignore this RPC, but
    // it should keep track of the observer in the GetStatus RPC if possible.
    rpc AddObserver(StoragePeer) returns (AddObserverResponse) {}
    // DemoteVoter demotes a voter to an observer. The underlying implementation
    // should ensure that the voter is demoted and that the storage is in a
    // consistent state before returning. If observers are not supported the
    // underlying implementation can silently ignore this RPC, but it should keep 
    // track of the observer in the GetStatus RPC if possible.
    rpc DemoteVoter(StoragePeer) returns (DemoteVoterResponse) {}
    // RemovePeer removes a peer from the storage. The underlying implementation
    // should ensure that the server is removed and that the storage is in a
    // consistent state before returning. When called with the current ID of the
    // leader, the underlying implementation should relinquish leadership to another
    // peer if possible.
    rpc RemovePeer(StoragePeer) returns (RemoveServerResponse) {}
    // GetLeader returns the leader of the storage. Leader may be loosely defined
    // by the implementation, but must be a node that can reliably be used to
    // mutate the storage.
    rpc GetLeader(GetLeaderRequest) returns (StoragePeer) {}
    // GetPeers returns all peers of the storage. Peer status may be loosely defined
    // by the implementation, but must correlate to nodes that can reliably be used to
    // mutate the storage.
    rpc GetPeers(GetPeersRequest) returns (StoragePeers) {}

    // Storage Usage RPCs
    // For the below RPCs, NotFound should be returned if the key does not exist.

    // GetValue returns the value for a key.
    rpc GetValue(GetValueRequest) returns (GetValueResponse) {}
    // PutValue puts a value for a key.
    rpc PutValue(PutValueRequest) returns (PutValueResponse) {}
    // DeleteValue deletes a value for a key.
    rpc DeleteValue(DeleteValueRequest) returns (DeleteValueResponse) {}
    // ListKeys lists all keys for a prefix.
    rpc ListKeys(ListKeysRequest) returns (ListKeysResponse) {}
    // ListValues lists all values for a prefix.
    rpc ListValues(ListValuesRequest) returns (ListValuesResponse) {}
    // SubscribePrefix subscribes to events for a prefix.
    rpc SubscribePrefix(SubscribePrefixRequest) returns (stream PrefixEvent) {}
}
