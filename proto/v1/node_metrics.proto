/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package v1;

// NodeMetrics is the metrics for the node.
message NodeMetrics {
  // device_name is the name of the device.
  string device_name = 1;
  // public_key is the public key of the node.
  string public_key = 2;
  // address_v4 is the IPv4 address of the node.
  string address_v4 = 3;
  // address_v6 is the IPv6 address of the node.
  string address_v6 = 4;
  // type is the type of interface being used for wireguard.
  string type = 5;
  // listen_port is the port wireguard is listening on.
  int32 listen_port = 6;
  // total_receive_bytes is the total number of bytes received.
  uint64 total_receive_bytes = 7;
  // total_transmit_bytes is the total number of bytes transmitted.
  uint64 total_transmit_bytes = 8;
  // peers are the per-peer statistics.
  repeated PeerMetrics peers = 9;
}

// PeerMetrics are the metrics for a node's peer.
message PeerMetrics {
  // public_key is the public key of the peer.
  string public_key = 1;
  // endpoint is the connected endpoint of the peer.
  string endpoint = 2;
  // persistent_keep_alive is the persistent keep alive interval for the peer.
  string persistent_keep_alive = 3;
  // last_handshake_time is the last handshake time for the peer.
  string last_handshake_time = 4;
  // allowed_ips is the list of allowed IPs for the peer.
  repeated string allowed_ips = 5;
  // protocol_version is the version of the wireguard protocol negotiated with the peer.
  int64 protocol_version = 6;
  // receive_bytes is the bytes received from the peer.
  uint64 receive_bytes = 7;
  // transmit_bytes is the bytes transmitted to the peer.
  uint64 transmit_bytes = 8;
}
