/*
Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

import "v1/raft.proto";
import "v1/node.proto";

// PluginConfiguration is the message containing the configuration of a plugin.
message PluginConfiguration {
    // Config is the configuration of the plugin.
    google.protobuf.Struct config = 1;
}

// PluginInfo is the information of a plugin.
message PluginInfo {
    // Name is the name of the plugin.
    string name = 1;
    // Version is the version of the plugin.
    string version = 2;
    // Description is the description of the plugin.
    string description = 3;

    // PluginCapability is the capabilities of a plugin.
    enum PluginCapability {
        // UNKNOWN is the default value of PluginCapability.
        UNKNOWN = 0;
        // STORAGE_PROVIDER indicates that the plugin can provide storage and underlying consistency.
        STORAGE_PROVIDER = 1;
        // AUTH indicates that the plugin is an auth plugin.
        AUTH = 2;
        // WATCH indicates that the plugin wants to receive watch events.
        WATCH = 3;
        // IPAMV4 indicates that the plugin is an IPv4 IPAM plugin.
        IPAMV4 = 4;
        // STORAGE_QUERIER indicates a plugin that wants to interact with storage.
        STORAGE_QUERIER = 5;
    }

    // Capabilities is the capabilities of the plugin.
    repeated PluginCapability capabilities = 5;
}

// PluginQuery is the message containing a storage query. It contains
// a request ID that is used to correlate the query with the result.
message PluginQuery {
    // id is the ID of the query.
    string id = 1;
    // QueryCommand is the type of the query.
    enum QueryCommand {
        // UNKNOWN is the default value of QueryCommand.
        UNKNOWN = 0;
        // GET is the command to get a value.
        GET = 1;
        // LIST is the command to list keys with an optional prefix.
        LIST = 2;
        // ITER is the command to iterate over keys with an optional prefix.
        ITER = 3;
        // PUT is the command to put a value.
        PUT = 4;
        // DELETE is the command to delete a value.
        DELETE = 5;
        // SUBSCRIBE is the command to subscribe to a prefix.
        SUBSCRIBE = 6;
    };
    // command is the command of the query.
    QueryCommand command = 2;
    // query is the key or prefix of the query.
    string query = 3;
}

// PluginQueryResult is the message containing a storage query result. It contains
// a request ID that is used to correlate the query with the result.
message PluginQueryResult {
    // id is the ID of the query.
    string id = 1;
    // key is the key of the query. For GET and ITER queries it will be the current key.
    // For LIST queries it will be the prefix.
    string key = 2;
    // value is the value of the query. For GET and ITER queries it will be the value of the current key.
    // For LIST queries it will be the list of keys that match the prefix.
    repeated string value = 3;
    // error is an error that occurred during the query. At the end of an ITER query it will be set to
    // "EOF" to indicate that the iteration is complete.
    string error = 4;
}

// Plugin is the general service definition for a Webmesh plugin.
// It must be implemented by all plugins.
service Plugin {
    // GetInfo returns the information for the plugin.
    rpc GetInfo (google.protobuf.Empty) returns (PluginInfo) {}
    // Configure configures the plugin.
    rpc Configure (PluginConfiguration) returns (google.protobuf.Empty) {}
    // Close closes the plugin. It is called when the node is shutting down.
    rpc Close (google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

// AuthenticationRequest is the message containing an authentication request.
message AuthenticationRequest {
    // headers are the headers of the request.
    map<string, string> headers = 1;
    // certificates are the DER encoded certificates of the request.
    repeated bytes certificates = 2;
}

// AuthenticationResponse is the message containing an authentication response.
message AuthenticationResponse {
    // id is the id of the authenticated user.
    string id = 1;
}

// AuthPlugin is the service definition for a Webmesh auth plugin.
service AuthPlugin {
    // Authenticate authenticates a request.
    rpc Authenticate (AuthenticationRequest) returns (AuthenticationResponse) {}
}

// Event is the message containing a watch event.
message Event {
    // WatchEvent is the type of a watch event.
    enum WatchEvent {
        // UNKNOWN is the default value of WatchEvent.
        UNKNOWN = 0;
        // NODE_JOIN indicates that a node has joined the cluster.
        NODE_JOIN = 1;
        // NODE_LEAVE indicates that a node has left the cluster.
        NODE_LEAVE = 2;
        // LEADER_CHANGE indicates that the leader of the cluster has changed.
        LEADER_CHANGE = 3;
    }
    // type is the type of the watch event.
    WatchEvent type = 1;
    // event is the data of the watch event.
    oneof event {
        // node is the node that the event is about.
        MeshNode node = 2;
    }
}

// WatchPlugin is the service definition for a Webmesh watch plugin.
service WatchPlugin {
    // Emit handles a watch event.
    rpc Emit (Event) returns (google.protobuf.Empty) {}
}

// AllocateIPRequest is the message containing an IP allocation request.
message AllocateIPRequest {
    // node_id is the node that the IP should be allocated for.
    string node_id = 1;
    // subnet is the subnet that the IP should be allocated from.
    string subnet = 2;
}

// AllocatedIP is the message containing an allocated IP.
message AllocatedIP {
    // ip is the allocated IP. It should be returned in CIDR notation.
    string ip = 1;
}

// ReleaseIPRequest is the message containing an IP release request.
message ReleaseIPRequest {
    // node_id is the node that the IP should be released for.
    string node_id = 1;
    // ip is the IP that should be released.
    string ip = 2;
}

// IPAMPlugin is the service definition for a Webmesh IPAM plugin.
service IPAMPlugin {
    // Allocate allocates an IP for a node.
    rpc Allocate (AllocateIPRequest) returns (AllocatedIP) {}
    // Release releases an IP for a node.
    rpc Release (ReleaseIPRequest) returns (google.protobuf.Empty) {}
}

// StorageQuerierPlugin is the service definition for a Webmesh storage querier plugin.
service StorageQuerierPlugin {
    // InjectQuerier is a stream opened by the node to faciliate read-write operations
    // against the mesh state. The signature is misleading, but it is required to be 
    // able to stream the query results back to the node. The node will open a stream 
    // to the plugin and send a PluginSQLQueryResult message for every query that is 
    // received.
    rpc InjectQuerier (stream PluginQueryResult) returns (stream PluginQuery) {}
}