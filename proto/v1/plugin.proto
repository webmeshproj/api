/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

import "v1/raft.proto";
import "v1/mesh.proto";

// PluginCapability is the capabilities of a plugin.
enum PluginCapability {
    // PLUGIN_CAPABILITY_UNKNOWN is the default value of PluginCapability.
    PLUGIN_CAPABILITY_UNKNOWN = 0;
    // PLUGIN_CAPABILITY_STORE indicates that the plugin is a raft store plugin.
    PLUGIN_CAPABILITY_STORE = 1;
    // PLUGIN_CAPABILITY_AUTH indicates that the plugin is an auth plugin.
    PLUGIN_CAPABILITY_AUTH = 2;
    // PLUGIN_CAPABILITY_WATCH indicates that the plugin wants to receive watch events.
    PLUGIN_CAPABILITY_WATCH = 3;
    // PLUGIN_CAPABILITY_IPAMV4 indicates that the plugin is an IPv4 IPAM plugin.
    PLUGIN_CAPABILITY_IPAMV4 = 4;
    // PLUGIN_CAPABILITY_IPAMV6 indicates that the plugin is an IPv6 IPAM plugin.
    PLUGIN_CAPABILITY_IPAMV6 = 5;
}

// WatchEvent is the type of a watch event.
enum WatchEvent {
    // WATCH_EVENT_UNKNOWN is the default value of WatchEvent.
    WATCH_EVENT_UNKNOWN = 0;
    // WATCH_EVENT_NODE_JOIN indicates that a node has joined the cluster.
    WATCH_EVENT_NODE_JOIN = 1;
    // WATCH_EVENT_NODE_LEAVE indicates that a node has left the cluster.
    WATCH_EVENT_NODE_LEAVE = 2;
    // WATCH_EVENT_LEADER_CHANGE indicates that the leader of the cluster has changed.
    WATCH_EVENT_LEADER_CHANGE = 3;
}

// PluginInfo is the information of a plugin.
message PluginInfo {
    // Name is the name of the plugin.
    string name = 1;
    // Version is the version of the plugin.
    string version = 2;
    // Description is the description of the plugin.
    string description = 3;
    // Capabilities is the capabilities of the plugin.
    repeated PluginCapability capabilities = 5;
}

// PluginConfiguration is the message containing the configuration of a plugin.
message PluginConfiguration {
    // Config is the configuration of the plugin.
    google.protobuf.Struct config = 1;
}

// PluginSQLQuery is the message containing a SQL query. It contains
// a request ID that is used to correlate the query with the result.
message PluginSQLQuery {
    // id is the ID of the query.
    string id = 1;
    // query is the SQL query.
    SQLQuery query = 2;
}

// PluginSQLQueryResult is the message containing a SQL query result. It contains
// a request ID that is used to correlate the query with the result.
message PluginSQLQueryResult {
    // id is the ID of the query.
    string id = 1;
    // result is the SQL query result.
    SQLQueryResult result = 2;
    // error is an error that occurred during the query.
    string error = 3;
}

// Plugin is the general service definition for a Webmesh plugin.
// It must be implemented by all plugins.
service Plugin {
    // GetInfo returns the information for the plugin.
    rpc GetInfo (google.protobuf.Empty) returns (PluginInfo) {}
    // Configure configures the plugin.
    rpc Configure (PluginConfiguration) returns (google.protobuf.Empty) {}
    // InjectQuerier is a stream opened by the node to faciliate read-only queries
    // against the mesh state. The signature is misleading, but it is required
    // to be able to stream the query results back to the node. The node will
    // open a stream to the plugin and send a PluginSQLQueryResult message
    // for every query that is received. The plugin can return an Unimplemented
    // error or simply close the stream with no error it it does not wish to 
    // keep the stream open.
    rpc InjectQuerier (stream PluginSQLQueryResult) returns (stream PluginSQLQuery) {}
    // Close closes the plugin. It is called when the node is shutting down.
    rpc Close (google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

// StoreLogRequest is the message containing a raft log entry.
message StoreLogRequest {
    // term is the term of the log entry.
    uint64 term = 1;
    // index is the index of the log entry.
    uint64 index = 2;
    // log is the log entry.
    RaftLogEntry log = 3;
}

// DataSnapshot is the message containing a snapshot of the data.
message DataSnapshot {
    // term is the term of the log entry.
    uint64 term = 1;
    // index is the index of the log entry.
    uint64 index = 2;
    // data is the snapshot of the data.
    bytes data = 3;
}

// StoragePlugin is the service definition for a Webmesh storage plugin.
service StoragePlugin {
    // Store dispatches a Raft log entry for storage.
    rpc Store(StoreLogRequest) returns (RaftApplyResponse) {}
    // RestoreSnapshot should drop any existing state and restore from the snapshot.
    rpc RestoreSnapshot (DataSnapshot) returns (google.protobuf.Empty) {}
}

// AuthenticationRequest is the message containing an authentication request.
message AuthenticationRequest {
    // headers are the headers of the request.
    map<string, string> headers = 1;
    // certificates are the DER encoded certificates of the request.
    repeated bytes certificates = 2;
}

// AuthenticationResponse is the message containing an authentication response.
message AuthenticationResponse {
    // id is the id of the authenticated user.
    string id = 1;
}

// AuthPlugin is the service definition for a Webmesh auth plugin.
service AuthPlugin {
    // Authenticate authenticates a request.
    rpc Authenticate (AuthenticationRequest) returns (AuthenticationResponse) {}
}

// Event is the message containing a watch event.
message Event {
    // type is the type of the watch event.
    WatchEvent type = 1;
    // event is the data of the watch event.
    oneof event {
        // node is the node that the event is about.
        MeshNode node = 2;
    }
}

// WatchPlugin is the service definition for a Webmesh watch plugin.
service WatchPlugin {
    // Emit handles a watch event.
    rpc Emit (Event) returns (google.protobuf.Empty) {}
}

// AllocateIPRequest is the message containing an IP allocation request.
message AllocateIPRequest {
    // node_id is the node that the IP should be allocated for.
    string node_id = 1;
    // subnet is the subnet that the IP should be allocated from.
    string subnet = 2;

    enum IPVersion {
        // IP_VERSION_UNKNOWN is the default value of IPVersion.
        IP_VERSION_UNKNOWN = 0;
        // IP_VERSION_4 indicates that an IPv4 address should be allocated.
        IP_VERSION_4 = 4;
        // IP_VERSION_6 indicates that an IPv6 address should be allocated.
        IP_VERSION_6 = 6;
    };

    // version is the IP version that should be allocated.
    IPVersion version = 3;
}

// AllocatedIP is the message containing an allocated IP.
message AllocatedIP {
    // ip is the allocated IP. It should be returned in CIDR notation.
    string ip = 1;
}

// ReleaseIPRequest is the message containing an IP release request.
message ReleaseIPRequest {
    // node_id is the node that the IP should be released for.
    string node_id = 1;
    // ip is the IP that should be released.
    string ip = 2;
}

// IPAMPlugin is the service definition for a Webmesh IPAM plugin.
service IPAMPlugin {
    // Allocate allocates an IP for a node.
    rpc Allocate (AllocateIPRequest) returns (AllocatedIP) {}
    // Release releases an IP for a node.
    rpc Release (ReleaseIPRequest) returns (google.protobuf.Empty) {}
}
