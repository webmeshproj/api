/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "v1/node.proto";

// GetNodeRequest is a request to get a node.
message GetNodeRequest {
    // id is the ID of the node.
    string id = 1;
}

// MeshEdge is an edge between two nodes.
message MeshEdge {
    // source is the source node.
    string source = 1;
    // target is the target node.
    string target = 2;
    // weight is the weight of the edge.
    int32 weight = 3;
    // attributes is a list of attributes for the edge.
    map<string, string> attributes = 4;
}

// MeshEdges is a list of edges.
message MeshEdges {
    // items is the list of edges.
    repeated MeshEdge items = 1;
}

// MeshGraph is a graph of nodes.
message MeshGraph {
    // nodes is the list of nodes.
    repeated string nodes = 1;
    // edges is the list of edges.
    repeated MeshEdge edges = 2;
    // dot is the DOT representation of the graph.
    string dot = 3;
}

// Mesh is a service that can optionally be exposed by a node. It provides methods for 
// interfacing with the webmesh from the outside.
service Mesh {
    // GetNode gets a node by ID.
    rpc GetNode(GetNodeRequest) returns (MeshNode) {}

    // ListNodes lists all nodes.
    rpc ListNodes(google.protobuf.Empty) returns (NodeList) {}

    // GetMeshGraph fetches the mesh graph. It returns a list of nodes,
    // edges, and a rendering in the dot format.
    rpc GetMeshGraph(google.protobuf.Empty) returns (MeshGraph) {}
}
