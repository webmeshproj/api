/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "v1/node.proto";

// GetNodeRequest is a request to get a node.
message GetNodeRequest {
    // id is the ID of the node.
    string id = 1;
}

// MeshNode is a node that has been registered with the controller.
message MeshNode {
    // id is the ID of the node.
    string id = 1;
    // primary_endpoint is the primary endpoint of the node.
    string primary_endpoint = 2;
    // wireguard_endpoints is a list of WireGuard endpoints for the node.
    repeated string wireguard_endpoints = 3;
    // zone_awareness_id is the zone awareness ID of the node.
    string zone_awareness_id = 4;
    // raft_port is the Raft listen port of the node.
    int32 raft_port = 5;
    // grpc_port is the gRPC listen port of the node.
    int32 grpc_port = 6;
    // public_key is the public key of the node.
    string public_key = 8;
    // private_ipv4 is the private IPv4 address of the node.
    string private_ipv4 = 9;
    // private_ipv6 is the private IPv6 address of the node.
    string private_ipv6 = 10;
    // updated_at is the last time the node joined the cluster.
    google.protobuf.Timestamp updated_at = 11;
    // created_at is the creation time for the node.
    google.protobuf.Timestamp created_at = 12;
    // cluster_status is the status of the node in the cluster.
    ClusterStatus cluster_status = 13;
}

// NodeList is a list of nodes.
message NodeList {
    // nodes is the list of nodes.
    repeated MeshNode nodes = 1;
}

// MeshEdge is an edge between two nodes.
message MeshEdge {
    // source is the source node.
    string source = 1;
    // target is the target node.
    string target = 2;
    // weight is the weight of the edge.
    int32 weight = 3;
    // attributes is a list of attributes for the edge.
    map<string, string> attributes = 4;
}

// MeshEdges is a list of edges.
message MeshEdges {
    // items is the list of edges.
    repeated MeshEdge items = 1;
}

// MeshGraph is a graph of nodes.
message MeshGraph {
    // nodes is the list of nodes.
    repeated string nodes = 1;
    // edges is the list of edges.
    repeated MeshEdge edges = 2;
    // dot is the DOT representation of the graph.
    string dot = 3;
}

// Mesh is a service that can optionally be exposed by a node. It provides methods for 
// interfacing with the webmesh from the outside. Some methods are only available on the
// leader. Nodes can enable the leader proxy to expose the leader's Mesh service.
service Mesh {
    // GetNode gets a node by ID.
    rpc GetNode(GetNodeRequest) returns (MeshNode) {}

    // ListNodes lists all nodes.
    rpc ListNodes(google.protobuf.Empty) returns (NodeList) {}

    // GetMeshGraph fetches the mesh graph. It returns a list of nodes,
    // edges, and a rendering in the dot format.
    rpc GetMeshGraph(google.protobuf.Empty) returns (MeshGraph) {}
}
