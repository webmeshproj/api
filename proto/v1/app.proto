/*
Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

import "v1/node.proto";
import "v1/storage.proto";
import "v1/mesh.proto";

// ConnectRequest is sent by the application to the node to establish a
// connection to a mesh. This message will eventually contain unique
// identifiers to allow creating connections to multiple meshes.
message ConnectRequest {
    // Config is used to override any defaults configured on the node.
    google.protobuf.Struct config = 1;
    // Disable bootstrap tells a node that is otherwise configured to 
    // bootstrap to not bootstrap for this connection.
    bool disable_bootstrap = 2;
    // Join PSK is the pre-shared key to use for joining the mesh.
    string join_psk = 3;
}

// ConnectResponse is returned by the Connect RPC.
message ConnectResponse {
    // node id is the unique identifier of the node.
    string node_id = 1;
    // mesh domain is the domain of the mesh.
    string mesh_domain = 2;
    // ipv4 is the IPv4 address of the node.
    string ipv4 = 3;
    // ipv6 is the IPv6 address of the node.
    string ipv6 = 4;
}

// DisconnectRequest is sent by the application to the node to disconnect
// from a mesh. This message will eventually contain unique identifiers
// for allowing the application to disconnect from a specific mesh.
message DisconnectRequest {}

// DisconnectResponse is returned by the Disconnect RPC.
message DisconnectResponse {}

// MetricsRequest is sent by the application to the node to retrieve interface
// metrics. It is intentionally empty for now, but can eventually be used to 
// query specific interfaces/metrics.
message MetricsRequest {}

// MetricsResponse is a message containing interface metrics.
message MetricsResponse {
    // interfaces is a map of interface names to metrics.
    map<string, InterfaceMetrics> interfaces = 1;
}

// StatusRequest is sent by the application to the node to retrieve the status
// of the node.
message StatusRequest {}

// StatusResponse is a message containing the status of the node.
message StatusResponse {
    enum ConnectionStatus {
        // DISCONNECTED indicates that the node is not connected to a mesh.
        DISCONNECTED = 0;
        // CONNECTING indicates that the node is in the process of connecting to a mesh.
        CONNECTING = 1;
        // CONNECTED indicates that the node is connected to a mesh.
        CONNECTED = 2;
    }
    // connection status is the status of the connection.
    ConnectionStatus connection_status = 1;
    // node is the node status. This is only populated if the node is connected.
    MeshNode node = 2;
}

// AnnounceDHTRequest is sent by the application to the node to announce the
// node's presence on the Kademlia DHT for other nodes to discover.
message AnnounceDHTRequest {
    // Bootstrap servers are optional bootstrap servers to use for bootstrapping
    // the DHT. If not provided, the node will use the default bootstrap servers.
    repeated string bootstrap_servers = 1;
    // PSK is the pre-shared key to use for the DHT.
    string psk = 2;
}

// AnnounceDHTResponse is returned by the AnnounceDHT RPC.
message AnnounceDHTResponse {}

// LeaveDHTRequest is sent by the application to the node to leave the Kademlia
// DHT.
message LeaveDHTRequest {
    // PSK is the pre-shared key that was used to join the DHT.
    string psk = 1;
}

// LeaveDHTResponse is returned by the LeaveDHT RPC.
message LeaveDHTResponse {}

// AppDaemon is exposed by nodes running in the app-daemon mode. This mode
// allows the node to run in an idle state and be controlled by the
// application. The application can send commands to the node to execute
// tasks and receive responses.
service AppDaemon {
    // Connect is used to establish a connection between the node and a
    // mesh. The provided struct is used to override any defaults configured
    // on the node.
    rpc Connect(ConnectRequest) returns (ConnectResponse) {}

    // Disconnect is used to disconnect the node from the mesh.
    rpc Disconnect(DisconnectRequest) returns (DisconnectResponse) {}

    // Query is used to query the mesh for information.
    rpc Query(QueryRequest) returns (stream QueryResponse) {}

    // Metrics is used to retrieve interface metrics from the node.
    rpc Metrics(MetricsRequest) returns (MetricsResponse) {}

    // Status is used to retrieve the status of the node.
    rpc Status(StatusRequest) returns (StatusResponse) {}

    // Subscribe is used to subscribe to events in the mesh database.
    rpc Subscribe(SubscribeRequest) returns (stream SubscriptionEvent) {}

    // Publish is used to publish events to the mesh database. A restricted set
    // of keys are allowed to be published to.
    rpc Publish(PublishRequest) returns (PublishResponse) {}

    // AnnounceDHT is used to announce the node's presence on the Kademlia DHT
    // for other nodes to discover.
    rpc AnnounceDHT(AnnounceDHTRequest) returns (AnnounceDHTResponse) {}

    // LeaveDHT is used to leave the Kademlia DHT.
    rpc LeaveDHT(LeaveDHTRequest) returns (LeaveDHTResponse) {}
}
