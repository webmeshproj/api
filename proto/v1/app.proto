/*
Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

import "v1/mesh.proto";
import "v1/node.proto";
import "v1/storage_query.proto";

// ConnectRequest is sent by an application to a daemon to establish a connection to a mesh.
message ConnectRequest {
    // AddrType is the type of join addresses included in the request.
    enum AddrType {
        // IP is used to join a mesh using an IP address.
        IP = 0;
        // DNS is used to join a mesh using a DNS name.
        DNS = 1;
        // MULTIADDR is used to join a mesh using a multiaddr.
        MULTIADDR = 2;
    };
    // AuthMethod are types of RPC credentials to supply to the connection.
    enum AuthMethod {
        // NO_AUTH is used to indicate that no authentication is required.
        NO_AUTH = 0;
        // BASIC is used to indicate that basic authentication is required.
        BASIC = 1;
        // LDAP is used to indicate that LDAP authentication is required.
        LDAP = 2;
        // ID is used to indicate that an identity is required.
        ID = 3;
        // MTLS is used to indicate that mutual TLS authentication is required.
        MTLS = 4;
    };
    // id is the unique identifier of this connection. If not provided
    // one will be generated.
    string id = 1;
    // authType is the type of authentication to use.
    AuthMethod authType = 2;
    // authCredentials are additional credentials as required by the authType. 
    map<string, bytes> authCredentials = 3;
    // addrType is the type of join addresses in the addrs list.
    AddrType addrType = 4;
    // addrs are the join addresses to use to connect to the mesh.
    repeated string addrs = 5;
    // networking is the networking configuration to use.
    MeshConnNetworking networking = 6;
    // services are the services to expose to other nodes on the mesh.
    MeshConnServices services = 7;
}

// MeshConnNetworking is a configuration for networking on a mesh.
message MeshConnNetworking {}

// MeshConnServices are configurations for exposing services to other nodes on a mesh.
message MeshConnServices {}

// ConnectResponse is returned by the Connect RPC.
message ConnectResponse {
    // id is the unique identifier of this connection.
    string id = 1;
    // node id is the unique identifier of the node.
    string nodeID = 2;
    // mesh domain is the domain of the mesh.
    string meshDomain = 3;
    // ipv4 is the IPv4 address of the node.
    string ipv4 = 4;
    // ipv6 is the IPv6 address of the node.
    string ipv6 = 5;
}

// DisconnectRequest is sent by an application to a daemon to disconnect
// from a mesh. This message will eventually contain unique identifiers
// for allowing the application to disconnect from a specific mesh.
message DisconnectRequest {
    // id is the unique identifier of this connection.
    string id = 1;
}

// DisconnectResponse is returned by the Disconnect RPC.
message DisconnectResponse {}

// MetricsRequest is sent by the application to a daemon to retrieve interface
// metrics for a mesh connection.
message MetricsRequest {
    // id is the unique identifier of this connection.
    string id = 1;
}

// MetricsResponse is a message containing interface metrics.
message MetricsResponse {
    // interfaces is a map of interface names to metrics.
    map<string, InterfaceMetrics> interfaces = 1;
}

// StatusRequest is sent by the application to a daemon to retrieve the status
// of a mesh connection.
message StatusRequest {
    // id is the unique identifier of this connection.
    string id = 1;
}

// StatusResponse is a message containing the status of the node.
message StatusResponse {
    enum ConnectionStatus {
        // DISCONNECTED indicates that the node is not connected to a mesh.
        DISCONNECTED = 0;
        // CONNECTING indicates that the node is in the process of connecting to a mesh.
        CONNECTING = 1;
        // CONNECTED indicates that the node is connected to a mesh.
        CONNECTED = 2;
    }
    // connection status is the status of the connection.
    ConnectionStatus connection_status = 1;
    // node is the node status. This is only populated if the node is connected.
    MeshNode node = 2;
}

// AppDaemon is exposed by nodes running in the app-daemon mode. This mode
// allows the node to run in an idle state and be controlled by an application.
// The application can send commands to the node to execute tasks and receive 
// responses.
service AppDaemon {
    // Connect is used to establish a connection between the node and a mesh.
    rpc Connect(ConnectRequest) returns (ConnectResponse) {}

    // Disconnect is used to disconnect the node from a mesh.
    rpc Disconnect(DisconnectRequest) returns (DisconnectResponse) {}

    // Query is used to query a mesh for information.
    rpc Query(QueryRequest) returns (QueryResponse) {}

    // Metrics is used to retrieve interface metrics for a mesh connection.
    rpc Metrics(MetricsRequest) returns (MetricsResponse) {}

    // Status is used to retrieve the status a mesh connection.
    rpc Status(StatusRequest) returns (StatusResponse) {}

    // Subscribe is used to subscribe to events in a mesh database.
    rpc Subscribe(SubscribeRequest) returns (stream SubscriptionEvent) {}

    // Publish is used to publish events to a mesh database.
    rpc Publish(PublishRequest) returns (PublishResponse) {}
}
