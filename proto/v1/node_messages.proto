/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package v1;

import "google/protobuf/timestamp.proto";

import "v1/mesh_messages.proto";

// JoinRequest is a request to join the cluster.
message JoinRequest {
    // id is the ID of the node.
    string id = 1;
    // public_key is the public wireguard key of the node to broadcast to peers.
    string public_key = 2;
    // raft_port is the Raft listen port of the node.
    int32 raft_port = 3;
    // grpc_port is the gRPC listen port of the node.
    int32 grpc_port = 4;
    // primary_endpoint is a routable address for the node. If left unset, 
    // the node is assumed to be behind a NAT and not directly accessible.
    string primary_endpoint = 6;
    // wireguard_endpoints is a list of WireGuard endpoints for the node.
    repeated string wireguard_endpoints = 7;
    // zone_awareness_id is the zone awareness ID of the node.
    string zone_awareness_id = 8;
    // assign_ipv4 is whether an IPv4 address should be assigned to the node.
    bool assign_ipv4 = 9;
    // prefer_raft_ipv6 is whether IPv6 should be preferred over IPv4 for raft communication.
    // This is only used if assign_ipv4 is true.
    bool prefer_raft_ipv6 = 10;
    // as_voter is whether the node should receive a vote in elections.
    bool as_voter = 11;
}

// JoinResponse is a response to a join request.
message JoinResponse {
    // address_ipv4 is the private IPv4 wireguard address of the node
    // in CIDR format representing the network. This is only set if
    // assign_ipv4 was set in the request or no network_ipv6 was provided.
    string address_ipv4 = 1;
    // network_ipv6 is the IPv6 network assigned to the node.
    string network_ipv6 = 2;
    // peers is a list of wireguard peers to connect to.
    repeated WireguardPeer peers = 3;
}

// WireguardPeer is a peer in the Wireguard network.
message WireguardPeer {
    // id is the ID of the peer.
    string id = 1;
    // public_key is the public key of the peer.
    string public_key = 2;
    // wireguard_endpoints are the WireGuard endpoints for the peer, if applicable.
    repeated string wireguard_endpoints = 3;
    // zone_awareness_id is the zone awareness ID of the peer.
    string zone_awareness_id = 5;
    // address_ipv4 is the private IPv4 wireguard address of the peer.
    string address_ipv4 = 6;
    // address_ipv6 is the private IPv6 wireguard address of the peer.
    string address_ipv6 = 7;
    // allowed_ips is the list of allowed IPs for the peer.
    repeated string allowed_ips = 8;
}

// LeaveRequest is a request to leave the cluster.
message LeaveRequest {
    // id is the ID of the node.
    string id = 1;
}

// GetStatusRequest is a request to get the status of a node.
message GetStatusRequest {
    // id is the ID of the node. If unset, the status of the 
    // local node is returned.
    string id = 1;
}

// Status represents the status of a node.
message Status {
    // id is the ID of the node.
    string id = 1;
    // version is the version of the node.
    string version = 2;
    // commit is the commit of the node.
    string commit = 3;
    // build_date is the build date of the node.
    string build_date = 4;
    // uptime is the uptime of the node.
    string uptime = 5;
    // started_at is the time the node started.
    google.protobuf.Timestamp started_at = 6;
    // features is the list of features currently enabled.
    repeated Feature features = 7;
    // wireguard_peers is the number of wireguard peers connected.
    uint32 wireguard_peers = 8;
    // cluster_status is the status of the node in the cluster.
    ClusterStatus cluster_status = 9;
    // current_leader is the current leader of the cluster.
    string current_leader = 10;
}

// DataChannel are the data channels used when communicating over ICE
// with a node.
enum DataChannel {
  // CHANNELS is the data channel used for negotiating new channels.
  // This is the first channel that is opened. The ID of the channel
  // should be 0.
  CHANNELS = 0;
  // CONNECTIONS is the data channel used for negotiating new connections.
  // This is a channel that is opened for each incoming connection from a
  // client. The ID should start at 0 and be incremented for each new connection.
  CONNECTIONS = 1;
}

// DataChannelNegotiation is the message for communicating data channels to nodes.
message DataChannelNegotiation {
  // proto is the protocol of the traffic.
  string proto = 1;
  // src is the address of the client that initiated the request.
  string src = 2;
  // dst is the destination address of the traffic.
  string dst = 3;
  // port is the destination port of the traffic.
  uint32 port = 4;
  // offer is the offer for the node to use as its local description.
  string offer = 5;
  // answer is the answer for the node to use as its remote description.
  string answer = 6;
  // candidate is an ICE candidate.
  string candidate = 7;
  // stun_servers is the list of STUN servers to use.
  repeated string stun_servers = 8;
}