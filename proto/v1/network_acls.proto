/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package v1;

// ACLAction is the action to take when a request matches an ACL.
enum ACLAction {
    // ACTION_UNKNOWN is the default action for ACLs. It is synonymous with ACTION_DENY.
    ACTION_UNKNOWN = 0;
    // ACTION_ACCEPT allows the request to proceed.
    ACTION_ACCEPT = 1;
    // ACTION_DENY denies the request.
    ACTION_DENY = 2;
}

// NetworkACL is a network ACL.
message NetworkACL {
    // name is the name of the ACL.
    string name = 1;
    // priority is the priority of the ACL. ACLs with higher priority are evaluated first.
    int32 priority = 2;
    // action is the action to take when a request matches the ACL.
    ACLAction action = 3;
    // source_nodes is a list of source nodes to match against. If empty, all nodes are matched. Groups
    // can be specified with the prefix "group:".
    repeated string source_nodes = 4;
    // destination_nodes is a list of destination nodes to match against. If empty, all nodes are matched.
    repeated string destination_nodes = 5;
    // source_cidrs is a list of source CIDRs to match against. If empty, all CIDRs are matched.
    repeated string source_cidrs = 6;
    // destination_cidrs is a list of destination CIDRs to match against. If empty, all CIDRs are matched.
    repeated string destination_cidrs = 7;
    // protocols is a list of protocols to match against. If empty, all protocols are matched.
    // Protocols can be specified by name or number.
    repeated string protocols = 8;
    // ports is a list of ports to match against. If empty, all ports are matched.
    repeated uint32 ports = 9;
}

// NetworkACLs is a list of network ACLs.
message NetworkACLs {
    // items is the list of network ACLs.
    repeated NetworkACL items = 1;
}

// Route is a route that is broadcasted by one or more nodes.
message Route {
    // name is the name of the route.
    string name = 1;
    // node is the node that broadcasts the route. A group can be specified with the prefix "group:".
    string nodes = 2;
    // destination_cidrs are the destination CIDRs of the route.
    repeated string destination_cidrs = 3;
    // next_hop_node is an optional node that is used as the next hop for the route.
    string next_hop_node = 4;
}

// Routes is a list of routes.
message Routes {
    // items is the list of routes.
    repeated Route items = 1;
}

// NetworkAction is an action that can be performed on a network resource. It is used
// by implementations to evaluate network ACLs.
message NetworkAction {
    // src_node is the source node of the action.
    string src_node = 1;
    // src_cidr is the source CIDR of the action.
    string src_cidr = 2;
    // dst_node is the destination node of the action.
    string dst_node = 3;
    // dst_cidr is the destination CIDR of the action.
    string dst_cidr = 4;
    // protocol is the protocol of the action.
    string protocol = 5;
    // port is the port of the action.
    uint32 port = 6;
}