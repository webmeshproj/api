// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/mesh.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetNodeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetNodeRequestMultiError,
// or nil if none found.
func (m *GetNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetNodeRequestMultiError(errors)
	}

	return nil
}

// GetNodeRequestMultiError is an error wrapping multiple validation errors
// returned by GetNodeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeRequestMultiError) AllErrors() []error { return m }

// GetNodeRequestValidationError is the validation error returned by
// GetNodeRequest.Validate if the designated constraints aren't met.
type GetNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeRequestValidationError) ErrorName() string { return "GetNodeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeRequestValidationError{}

// Validate checks the field values on MeshEdge with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeshEdge) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeshEdge with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeshEdgeMultiError, or nil
// if none found.
func (m *MeshEdge) ValidateAll() error {
	return m.validate(true)
}

func (m *MeshEdge) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for Target

	// no validation rules for Weight

	// no validation rules for Attributes

	if len(errors) > 0 {
		return MeshEdgeMultiError(errors)
	}

	return nil
}

// MeshEdgeMultiError is an error wrapping multiple validation errors returned
// by MeshEdge.ValidateAll() if the designated constraints aren't met.
type MeshEdgeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeshEdgeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeshEdgeMultiError) AllErrors() []error { return m }

// MeshEdgeValidationError is the validation error returned by
// MeshEdge.Validate if the designated constraints aren't met.
type MeshEdgeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeshEdgeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeshEdgeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeshEdgeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeshEdgeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeshEdgeValidationError) ErrorName() string { return "MeshEdgeValidationError" }

// Error satisfies the builtin error interface
func (e MeshEdgeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeshEdge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeshEdgeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeshEdgeValidationError{}

// Validate checks the field values on MeshEdges with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeshEdges) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeshEdges with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeshEdgesMultiError, or nil
// if none found.
func (m *MeshEdges) ValidateAll() error {
	return m.validate(true)
}

func (m *MeshEdges) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MeshEdgesValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MeshEdgesValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeshEdgesValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MeshEdgesMultiError(errors)
	}

	return nil
}

// MeshEdgesMultiError is an error wrapping multiple validation errors returned
// by MeshEdges.ValidateAll() if the designated constraints aren't met.
type MeshEdgesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeshEdgesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeshEdgesMultiError) AllErrors() []error { return m }

// MeshEdgesValidationError is the validation error returned by
// MeshEdges.Validate if the designated constraints aren't met.
type MeshEdgesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeshEdgesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeshEdgesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeshEdgesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeshEdgesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeshEdgesValidationError) ErrorName() string { return "MeshEdgesValidationError" }

// Error satisfies the builtin error interface
func (e MeshEdgesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeshEdges.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeshEdgesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeshEdgesValidationError{}

// Validate checks the field values on MeshGraph with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeshGraph) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeshGraph with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeshGraphMultiError, or nil
// if none found.
func (m *MeshGraph) ValidateAll() error {
	return m.validate(true)
}

func (m *MeshGraph) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEdges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MeshGraphValidationError{
						field:  fmt.Sprintf("Edges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MeshGraphValidationError{
						field:  fmt.Sprintf("Edges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeshGraphValidationError{
					field:  fmt.Sprintf("Edges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Dot

	if len(errors) > 0 {
		return MeshGraphMultiError(errors)
	}

	return nil
}

// MeshGraphMultiError is an error wrapping multiple validation errors returned
// by MeshGraph.ValidateAll() if the designated constraints aren't met.
type MeshGraphMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeshGraphMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeshGraphMultiError) AllErrors() []error { return m }

// MeshGraphValidationError is the validation error returned by
// MeshGraph.Validate if the designated constraints aren't met.
type MeshGraphValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeshGraphValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeshGraphValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeshGraphValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeshGraphValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeshGraphValidationError) ErrorName() string { return "MeshGraphValidationError" }

// Error satisfies the builtin error interface
func (e MeshGraphValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeshGraph.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeshGraphValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeshGraphValidationError{}
