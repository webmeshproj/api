// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/app.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ConnectRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConnectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConnectRequestMultiError,
// or nil if none found.
func (m *ConnectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AuthMethod

	// no validation rules for AuthCredentials

	// no validation rules for AddrType

	if all {
		switch v := interface{}(m.GetNetworking()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConnectRequestValidationError{
					field:  "Networking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConnectRequestValidationError{
					field:  "Networking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNetworking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConnectRequestValidationError{
				field:  "Networking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetServices()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConnectRequestValidationError{
					field:  "Services",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConnectRequestValidationError{
					field:  "Services",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServices()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConnectRequestValidationError{
				field:  "Services",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBootstrap()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConnectRequestValidationError{
					field:  "Bootstrap",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConnectRequestValidationError{
					field:  "Bootstrap",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBootstrap()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConnectRequestValidationError{
				field:  "Bootstrap",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConnectRequestValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConnectRequestValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConnectRequestValidationError{
				field:  "Tls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConnectRequestMultiError(errors)
	}

	return nil
}

// ConnectRequestMultiError is an error wrapping multiple validation errors
// returned by ConnectRequest.ValidateAll() if the designated constraints
// aren't met.
type ConnectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectRequestMultiError) AllErrors() []error { return m }

// ConnectRequestValidationError is the validation error returned by
// ConnectRequest.Validate if the designated constraints aren't met.
type ConnectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectRequestValidationError) ErrorName() string { return "ConnectRequestValidationError" }

// Error satisfies the builtin error interface
func (e ConnectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectRequestValidationError{}

// Validate checks the field values on MeshConnNetworking with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeshConnNetworking) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeshConnNetworking with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeshConnNetworkingMultiError, or nil if none found.
func (m *MeshConnNetworking) ValidateAll() error {
	return m.validate(true)
}

func (m *MeshConnNetworking) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UseDNS

	// no validation rules for DetectEndpoints

	// no validation rules for DetectPrivateEndpoints

	if len(errors) > 0 {
		return MeshConnNetworkingMultiError(errors)
	}

	return nil
}

// MeshConnNetworkingMultiError is an error wrapping multiple validation errors
// returned by MeshConnNetworking.ValidateAll() if the designated constraints
// aren't met.
type MeshConnNetworkingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeshConnNetworkingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeshConnNetworkingMultiError) AllErrors() []error { return m }

// MeshConnNetworkingValidationError is the validation error returned by
// MeshConnNetworking.Validate if the designated constraints aren't met.
type MeshConnNetworkingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeshConnNetworkingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeshConnNetworkingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeshConnNetworkingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeshConnNetworkingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeshConnNetworkingValidationError) ErrorName() string {
	return "MeshConnNetworkingValidationError"
}

// Error satisfies the builtin error interface
func (e MeshConnNetworkingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeshConnNetworking.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeshConnNetworkingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeshConnNetworkingValidationError{}

// Validate checks the field values on MeshConnServices with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MeshConnServices) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeshConnServices with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeshConnServicesMultiError, or nil if none found.
func (m *MeshConnServices) ValidateAll() error {
	return m.validate(true)
}

func (m *MeshConnServices) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for EnableLibP2P

	// no validation rules for EnableTLS

	// no validation rules for Rendezvous

	// no validation rules for ListenAddress

	// no validation rules for AuthMethod

	if all {
		switch v := interface{}(m.GetDns()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeshConnServicesValidationError{
					field:  "Dns",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeshConnServicesValidationError{
					field:  "Dns",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDns()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeshConnServicesValidationError{
				field:  "Dns",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MeshConnServicesMultiError(errors)
	}

	return nil
}

// MeshConnServicesMultiError is an error wrapping multiple validation errors
// returned by MeshConnServices.ValidateAll() if the designated constraints
// aren't met.
type MeshConnServicesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeshConnServicesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeshConnServicesMultiError) AllErrors() []error { return m }

// MeshConnServicesValidationError is the validation error returned by
// MeshConnServices.Validate if the designated constraints aren't met.
type MeshConnServicesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeshConnServicesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeshConnServicesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeshConnServicesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeshConnServicesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeshConnServicesValidationError) ErrorName() string { return "MeshConnServicesValidationError" }

// Error satisfies the builtin error interface
func (e MeshConnServicesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeshConnServices.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeshConnServicesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeshConnServicesValidationError{}

// Validate checks the field values on MeshDNSService with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeshDNSService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeshDNSService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeshDNSServiceMultiError,
// or nil if none found.
func (m *MeshDNSService) ValidateAll() error {
	return m.validate(true)
}

func (m *MeshDNSService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for ListenUDP

	// no validation rules for ListenTCP

	if len(errors) > 0 {
		return MeshDNSServiceMultiError(errors)
	}

	return nil
}

// MeshDNSServiceMultiError is an error wrapping multiple validation errors
// returned by MeshDNSService.ValidateAll() if the designated constraints
// aren't met.
type MeshDNSServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeshDNSServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeshDNSServiceMultiError) AllErrors() []error { return m }

// MeshDNSServiceValidationError is the validation error returned by
// MeshDNSService.Validate if the designated constraints aren't met.
type MeshDNSServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeshDNSServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeshDNSServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeshDNSServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeshDNSServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeshDNSServiceValidationError) ErrorName() string { return "MeshDNSServiceValidationError" }

// Error satisfies the builtin error interface
func (e MeshDNSServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeshDNSService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeshDNSServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeshDNSServiceValidationError{}

// Validate checks the field values on MeshConnBootstrap with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MeshConnBootstrap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeshConnBootstrap with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeshConnBootstrapMultiError, or nil if none found.
func (m *MeshConnBootstrap) ValidateAll() error {
	return m.validate(true)
}

func (m *MeshConnBootstrap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for Domain

	// no validation rules for Ipv4Network

	// no validation rules for RbacEnabled

	// no validation rules for DefaultNetworkACL

	if len(errors) > 0 {
		return MeshConnBootstrapMultiError(errors)
	}

	return nil
}

// MeshConnBootstrapMultiError is an error wrapping multiple validation errors
// returned by MeshConnBootstrap.ValidateAll() if the designated constraints
// aren't met.
type MeshConnBootstrapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeshConnBootstrapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeshConnBootstrapMultiError) AllErrors() []error { return m }

// MeshConnBootstrapValidationError is the validation error returned by
// MeshConnBootstrap.Validate if the designated constraints aren't met.
type MeshConnBootstrapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeshConnBootstrapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeshConnBootstrapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeshConnBootstrapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeshConnBootstrapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeshConnBootstrapValidationError) ErrorName() string {
	return "MeshConnBootstrapValidationError"
}

// Error satisfies the builtin error interface
func (e MeshConnBootstrapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeshConnBootstrap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeshConnBootstrapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeshConnBootstrapValidationError{}

// Validate checks the field values on MeshConnTLS with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeshConnTLS) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeshConnTLS with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeshConnTLSMultiError, or
// nil if none found.
func (m *MeshConnTLS) ValidateAll() error {
	return m.validate(true)
}

func (m *MeshConnTLS) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for CaCertData

	// no validation rules for CertData

	// no validation rules for KeyData

	// no validation rules for VerifyChainOnly

	// no validation rules for SkipVerify

	if len(errors) > 0 {
		return MeshConnTLSMultiError(errors)
	}

	return nil
}

// MeshConnTLSMultiError is an error wrapping multiple validation errors
// returned by MeshConnTLS.ValidateAll() if the designated constraints aren't met.
type MeshConnTLSMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeshConnTLSMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeshConnTLSMultiError) AllErrors() []error { return m }

// MeshConnTLSValidationError is the validation error returned by
// MeshConnTLS.Validate if the designated constraints aren't met.
type MeshConnTLSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeshConnTLSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeshConnTLSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeshConnTLSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeshConnTLSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeshConnTLSValidationError) ErrorName() string { return "MeshConnTLSValidationError" }

// Error satisfies the builtin error interface
func (e MeshConnTLSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeshConnTLS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeshConnTLSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeshConnTLSValidationError{}

// Validate checks the field values on ConnectResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConnectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectResponseMultiError, or nil if none found.
func (m *ConnectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NodeID

	// no validation rules for MeshDomain

	// no validation rules for Ipv4Address

	// no validation rules for Ipv6Address

	// no validation rules for Ipv4Network

	// no validation rules for Ipv6Network

	if len(errors) > 0 {
		return ConnectResponseMultiError(errors)
	}

	return nil
}

// ConnectResponseMultiError is an error wrapping multiple validation errors
// returned by ConnectResponse.ValidateAll() if the designated constraints
// aren't met.
type ConnectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectResponseMultiError) AllErrors() []error { return m }

// ConnectResponseValidationError is the validation error returned by
// ConnectResponse.Validate if the designated constraints aren't met.
type ConnectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectResponseValidationError) ErrorName() string { return "ConnectResponseValidationError" }

// Error satisfies the builtin error interface
func (e ConnectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectResponseValidationError{}

// Validate checks the field values on DisconnectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DisconnectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisconnectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisconnectRequestMultiError, or nil if none found.
func (m *DisconnectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisconnectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DisconnectRequestMultiError(errors)
	}

	return nil
}

// DisconnectRequestMultiError is an error wrapping multiple validation errors
// returned by DisconnectRequest.ValidateAll() if the designated constraints
// aren't met.
type DisconnectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisconnectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisconnectRequestMultiError) AllErrors() []error { return m }

// DisconnectRequestValidationError is the validation error returned by
// DisconnectRequest.Validate if the designated constraints aren't met.
type DisconnectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisconnectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisconnectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisconnectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisconnectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisconnectRequestValidationError) ErrorName() string {
	return "DisconnectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisconnectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisconnectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisconnectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisconnectRequestValidationError{}

// Validate checks the field values on DisconnectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisconnectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisconnectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisconnectResponseMultiError, or nil if none found.
func (m *DisconnectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisconnectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisconnectResponseMultiError(errors)
	}

	return nil
}

// DisconnectResponseMultiError is an error wrapping multiple validation errors
// returned by DisconnectResponse.ValidateAll() if the designated constraints
// aren't met.
type DisconnectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisconnectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisconnectResponseMultiError) AllErrors() []error { return m }

// DisconnectResponseValidationError is the validation error returned by
// DisconnectResponse.Validate if the designated constraints aren't met.
type DisconnectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisconnectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisconnectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisconnectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisconnectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisconnectResponseValidationError) ErrorName() string {
	return "DisconnectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisconnectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisconnectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisconnectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisconnectResponseValidationError{}

// Validate checks the field values on MetricsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricsRequestMultiError,
// or nil if none found.
func (m *MetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MetricsRequestMultiError(errors)
	}

	return nil
}

// MetricsRequestMultiError is an error wrapping multiple validation errors
// returned by MetricsRequest.ValidateAll() if the designated constraints
// aren't met.
type MetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsRequestMultiError) AllErrors() []error { return m }

// MetricsRequestValidationError is the validation error returned by
// MetricsRequest.Validate if the designated constraints aren't met.
type MetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsRequestValidationError) ErrorName() string { return "MetricsRequestValidationError" }

// Error satisfies the builtin error interface
func (e MetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsRequestValidationError{}

// Validate checks the field values on MetricsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricsResponseMultiError, or nil if none found.
func (m *MetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetInterfaces()))
		i := 0
		for key := range m.GetInterfaces() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetInterfaces()[key]
			_ = val

			// no validation rules for Interfaces[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MetricsResponseValidationError{
							field:  fmt.Sprintf("Interfaces[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MetricsResponseValidationError{
							field:  fmt.Sprintf("Interfaces[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MetricsResponseValidationError{
						field:  fmt.Sprintf("Interfaces[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return MetricsResponseMultiError(errors)
	}

	return nil
}

// MetricsResponseMultiError is an error wrapping multiple validation errors
// returned by MetricsResponse.ValidateAll() if the designated constraints
// aren't met.
type MetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsResponseMultiError) AllErrors() []error { return m }

// MetricsResponseValidationError is the validation error returned by
// MetricsResponse.Validate if the designated constraints aren't met.
type MetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsResponseValidationError) ErrorName() string { return "MetricsResponseValidationError" }

// Error satisfies the builtin error interface
func (e MetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsResponseValidationError{}

// Validate checks the field values on ConnectionStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConnectionStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectionStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectionStatusRequestMultiError, or nil if none found.
func (m *ConnectionStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectionStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConnectionStatusRequestMultiError(errors)
	}

	return nil
}

// ConnectionStatusRequestMultiError is an error wrapping multiple validation
// errors returned by ConnectionStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type ConnectionStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectionStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectionStatusRequestMultiError) AllErrors() []error { return m }

// ConnectionStatusRequestValidationError is the validation error returned by
// ConnectionStatusRequest.Validate if the designated constraints aren't met.
type ConnectionStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectionStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectionStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectionStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectionStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectionStatusRequestValidationError) ErrorName() string {
	return "ConnectionStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectionStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectionStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectionStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectionStatusRequestValidationError{}

// Validate checks the field values on ConnectionStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConnectionStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectionStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectionStatusResponseMultiError, or nil if none found.
func (m *ConnectionStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectionStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetStatuses()))
		i := 0
		for key := range m.GetStatuses() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetStatuses()[key]
			_ = val

			// no validation rules for Statuses[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ConnectionStatusResponseValidationError{
							field:  fmt.Sprintf("Statuses[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ConnectionStatusResponseValidationError{
							field:  fmt.Sprintf("Statuses[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ConnectionStatusResponseValidationError{
						field:  fmt.Sprintf("Statuses[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ConnectionStatusResponseMultiError(errors)
	}

	return nil
}

// ConnectionStatusResponseMultiError is an error wrapping multiple validation
// errors returned by ConnectionStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type ConnectionStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectionStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectionStatusResponseMultiError) AllErrors() []error { return m }

// ConnectionStatusResponseValidationError is the validation error returned by
// ConnectionStatusResponse.Validate if the designated constraints aren't met.
type ConnectionStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectionStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectionStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectionStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectionStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectionStatusResponseValidationError) ErrorName() string {
	return "ConnectionStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectionStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectionStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectionStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectionStatusResponseValidationError{}

// Validate checks the field values on ConnectionStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConnectionStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectionStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectionStatusMultiError, or nil if none found.
func (m *ConnectionStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectionStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConnectionStatus

	if all {
		switch v := interface{}(m.GetNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConnectionStatusValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConnectionStatusValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConnectionStatusValidationError{
				field:  "Node",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConnectionStatusMultiError(errors)
	}

	return nil
}

// ConnectionStatusMultiError is an error wrapping multiple validation errors
// returned by ConnectionStatus.ValidateAll() if the designated constraints
// aren't met.
type ConnectionStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectionStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectionStatusMultiError) AllErrors() []error { return m }

// ConnectionStatusValidationError is the validation error returned by
// ConnectionStatus.Validate if the designated constraints aren't met.
type ConnectionStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectionStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectionStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectionStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectionStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectionStatusValidationError) ErrorName() string { return "ConnectionStatusValidationError" }

// Error satisfies the builtin error interface
func (e ConnectionStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectionStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectionStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectionStatusValidationError{}

// Validate checks the field values on AppQueryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppQueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppQueryRequestMultiError, or nil if none found.
func (m *AppQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetQuery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppQueryRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppQueryRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppQueryRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AppQueryRequestMultiError(errors)
	}

	return nil
}

// AppQueryRequestMultiError is an error wrapping multiple validation errors
// returned by AppQueryRequest.ValidateAll() if the designated constraints
// aren't met.
type AppQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppQueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppQueryRequestMultiError) AllErrors() []error { return m }

// AppQueryRequestValidationError is the validation error returned by
// AppQueryRequest.Validate if the designated constraints aren't met.
type AppQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppQueryRequestValidationError) ErrorName() string { return "AppQueryRequestValidationError" }

// Error satisfies the builtin error interface
func (e AppQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppQueryRequestValidationError{}

// Validate checks the field values on AppDropRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppDropRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppDropRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppDropRequestMultiError,
// or nil if none found.
func (m *AppDropRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppDropRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AppDropRequestMultiError(errors)
	}

	return nil
}

// AppDropRequestMultiError is an error wrapping multiple validation errors
// returned by AppDropRequest.ValidateAll() if the designated constraints
// aren't met.
type AppDropRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppDropRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppDropRequestMultiError) AllErrors() []error { return m }

// AppDropRequestValidationError is the validation error returned by
// AppDropRequest.Validate if the designated constraints aren't met.
type AppDropRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppDropRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppDropRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppDropRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppDropRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppDropRequestValidationError) ErrorName() string { return "AppDropRequestValidationError" }

// Error satisfies the builtin error interface
func (e AppDropRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppDropRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppDropRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppDropRequestValidationError{}

// Validate checks the field values on AppDropResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppDropResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppDropResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppDropResponseMultiError, or nil if none found.
func (m *AppDropResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AppDropResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AppDropResponseMultiError(errors)
	}

	return nil
}

// AppDropResponseMultiError is an error wrapping multiple validation errors
// returned by AppDropResponse.ValidateAll() if the designated constraints
// aren't met.
type AppDropResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppDropResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppDropResponseMultiError) AllErrors() []error { return m }

// AppDropResponseValidationError is the validation error returned by
// AppDropResponse.Validate if the designated constraints aren't met.
type AppDropResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppDropResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppDropResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppDropResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppDropResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppDropResponseValidationError) ErrorName() string { return "AppDropResponseValidationError" }

// Error satisfies the builtin error interface
func (e AppDropResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppDropResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppDropResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppDropResponseValidationError{}

// Validate checks the field values on StatusRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusRequestMultiError, or
// nil if none found.
func (m *StatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StatusRequestMultiError(errors)
	}

	return nil
}

// StatusRequestMultiError is an error wrapping multiple validation errors
// returned by StatusRequest.ValidateAll() if the designated constraints
// aren't met.
type StatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusRequestMultiError) AllErrors() []error { return m }

// StatusRequestValidationError is the validation error returned by
// StatusRequest.Validate if the designated constraints aren't met.
type StatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusRequestValidationError) ErrorName() string { return "StatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e StatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusRequestValidationError{}

// Validate checks the field values on DaemonStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DaemonStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DaemonStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DaemonStatusMultiError, or
// nil if none found.
func (m *DaemonStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *DaemonStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeID

	// no validation rules for PublicKey

	// no validation rules for Description

	// no validation rules for Version

	// no validation rules for GitCommit

	// no validation rules for BuildDate

	// no validation rules for Uptime

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DaemonStatusValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DaemonStatusValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DaemonStatusValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Connections

	if len(errors) > 0 {
		return DaemonStatusMultiError(errors)
	}

	return nil
}

// DaemonStatusMultiError is an error wrapping multiple validation errors
// returned by DaemonStatus.ValidateAll() if the designated constraints aren't met.
type DaemonStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DaemonStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DaemonStatusMultiError) AllErrors() []error { return m }

// DaemonStatusValidationError is the validation error returned by
// DaemonStatus.Validate if the designated constraints aren't met.
type DaemonStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DaemonStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DaemonStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DaemonStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DaemonStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DaemonStatusValidationError) ErrorName() string { return "DaemonStatusValidationError" }

// Error satisfies the builtin error interface
func (e DaemonStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDaemonStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DaemonStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DaemonStatusValidationError{}
