// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/storage_provider.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BootstrapRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BootstrapRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BootstrapRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BootstrapRequestMultiError, or nil if none found.
func (m *BootstrapRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BootstrapRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BootstrapRequestMultiError(errors)
	}

	return nil
}

// BootstrapRequestMultiError is an error wrapping multiple validation errors
// returned by BootstrapRequest.ValidateAll() if the designated constraints
// aren't met.
type BootstrapRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BootstrapRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BootstrapRequestMultiError) AllErrors() []error { return m }

// BootstrapRequestValidationError is the validation error returned by
// BootstrapRequest.Validate if the designated constraints aren't met.
type BootstrapRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BootstrapRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BootstrapRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BootstrapRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BootstrapRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BootstrapRequestValidationError) ErrorName() string { return "BootstrapRequestValidationError" }

// Error satisfies the builtin error interface
func (e BootstrapRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBootstrapRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BootstrapRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BootstrapRequestValidationError{}

// Validate checks the field values on BootstrapResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BootstrapResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BootstrapResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BootstrapResponseMultiError, or nil if none found.
func (m *BootstrapResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BootstrapResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BootstrapResponseMultiError(errors)
	}

	return nil
}

// BootstrapResponseMultiError is an error wrapping multiple validation errors
// returned by BootstrapResponse.ValidateAll() if the designated constraints
// aren't met.
type BootstrapResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BootstrapResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BootstrapResponseMultiError) AllErrors() []error { return m }

// BootstrapResponseValidationError is the validation error returned by
// BootstrapResponse.Validate if the designated constraints aren't met.
type BootstrapResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BootstrapResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BootstrapResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BootstrapResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BootstrapResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BootstrapResponseValidationError) ErrorName() string {
	return "BootstrapResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BootstrapResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBootstrapResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BootstrapResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BootstrapResponseValidationError{}

// Validate checks the field values on GetPeersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPeersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPeersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPeersRequestMultiError, or nil if none found.
func (m *GetPeersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPeersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPeersRequestMultiError(errors)
	}

	return nil
}

// GetPeersRequestMultiError is an error wrapping multiple validation errors
// returned by GetPeersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPeersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPeersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPeersRequestMultiError) AllErrors() []error { return m }

// GetPeersRequestValidationError is the validation error returned by
// GetPeersRequest.Validate if the designated constraints aren't met.
type GetPeersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPeersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPeersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPeersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPeersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPeersRequestValidationError) ErrorName() string { return "GetPeersRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPeersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPeersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPeersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPeersRequestValidationError{}

// Validate checks the field values on GetLeaderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeaderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeaderRequestMultiError, or nil if none found.
func (m *GetLeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetLeaderRequestMultiError(errors)
	}

	return nil
}

// GetLeaderRequestMultiError is an error wrapping multiple validation errors
// returned by GetLeaderRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeaderRequestMultiError) AllErrors() []error { return m }

// GetLeaderRequestValidationError is the validation error returned by
// GetLeaderRequest.Validate if the designated constraints aren't met.
type GetLeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeaderRequestValidationError) ErrorName() string { return "GetLeaderRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeaderRequestValidationError{}

// Validate checks the field values on StorageStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageStatusRequestMultiError, or nil if none found.
func (m *StorageStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StorageStatusRequestMultiError(errors)
	}

	return nil
}

// StorageStatusRequestMultiError is an error wrapping multiple validation
// errors returned by StorageStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type StorageStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageStatusRequestMultiError) AllErrors() []error { return m }

// StorageStatusRequestValidationError is the validation error returned by
// StorageStatusRequest.Validate if the designated constraints aren't met.
type StorageStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageStatusRequestValidationError) ErrorName() string {
	return "StorageStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StorageStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageStatusRequestValidationError{}

// Validate checks the field values on StorageStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StorageStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StorageStatusMultiError, or
// nil if none found.
func (m *StorageStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsWritable

	// no validation rules for ClusterStatus

	for idx, item := range m.GetPeers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageStatusValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageStatusValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageStatusValidationError{
					field:  fmt.Sprintf("Peers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Message

	if len(errors) > 0 {
		return StorageStatusMultiError(errors)
	}

	return nil
}

// StorageStatusMultiError is an error wrapping multiple validation errors
// returned by StorageStatus.ValidateAll() if the designated constraints
// aren't met.
type StorageStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageStatusMultiError) AllErrors() []error { return m }

// StorageStatusValidationError is the validation error returned by
// StorageStatus.Validate if the designated constraints aren't met.
type StorageStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageStatusValidationError) ErrorName() string { return "StorageStatusValidationError" }

// Error satisfies the builtin error interface
func (e StorageStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageStatusValidationError{}

// Validate checks the field values on StoragePeer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoragePeer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoragePeer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoragePeerMultiError, or
// nil if none found.
func (m *StoragePeer) ValidateAll() error {
	return m.validate(true)
}

func (m *StoragePeer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PublicKey

	// no validation rules for Address

	// no validation rules for ClusterStatus

	if len(errors) > 0 {
		return StoragePeerMultiError(errors)
	}

	return nil
}

// StoragePeerMultiError is an error wrapping multiple validation errors
// returned by StoragePeer.ValidateAll() if the designated constraints aren't met.
type StoragePeerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoragePeerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoragePeerMultiError) AllErrors() []error { return m }

// StoragePeerValidationError is the validation error returned by
// StoragePeer.Validate if the designated constraints aren't met.
type StoragePeerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoragePeerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoragePeerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoragePeerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoragePeerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoragePeerValidationError) ErrorName() string { return "StoragePeerValidationError" }

// Error satisfies the builtin error interface
func (e StoragePeerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoragePeer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoragePeerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoragePeerValidationError{}

// Validate checks the field values on StoragePeers with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StoragePeers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoragePeers with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StoragePeersMultiError, or
// nil if none found.
func (m *StoragePeers) ValidateAll() error {
	return m.validate(true)
}

func (m *StoragePeers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPeers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoragePeersValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoragePeersValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoragePeersValidationError{
					field:  fmt.Sprintf("Peers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StoragePeersMultiError(errors)
	}

	return nil
}

// StoragePeersMultiError is an error wrapping multiple validation errors
// returned by StoragePeers.ValidateAll() if the designated constraints aren't met.
type StoragePeersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoragePeersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoragePeersMultiError) AllErrors() []error { return m }

// StoragePeersValidationError is the validation error returned by
// StoragePeers.Validate if the designated constraints aren't met.
type StoragePeersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoragePeersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoragePeersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoragePeersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoragePeersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoragePeersValidationError) ErrorName() string { return "StoragePeersValidationError" }

// Error satisfies the builtin error interface
func (e StoragePeersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoragePeers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoragePeersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoragePeersValidationError{}

// Validate checks the field values on AddVoterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddVoterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddVoterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddVoterResponseMultiError, or nil if none found.
func (m *AddVoterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddVoterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddVoterResponseMultiError(errors)
	}

	return nil
}

// AddVoterResponseMultiError is an error wrapping multiple validation errors
// returned by AddVoterResponse.ValidateAll() if the designated constraints
// aren't met.
type AddVoterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddVoterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddVoterResponseMultiError) AllErrors() []error { return m }

// AddVoterResponseValidationError is the validation error returned by
// AddVoterResponse.Validate if the designated constraints aren't met.
type AddVoterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddVoterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddVoterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddVoterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddVoterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddVoterResponseValidationError) ErrorName() string { return "AddVoterResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddVoterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddVoterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddVoterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddVoterResponseValidationError{}

// Validate checks the field values on AddObserverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddObserverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddObserverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddObserverResponseMultiError, or nil if none found.
func (m *AddObserverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddObserverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddObserverResponseMultiError(errors)
	}

	return nil
}

// AddObserverResponseMultiError is an error wrapping multiple validation
// errors returned by AddObserverResponse.ValidateAll() if the designated
// constraints aren't met.
type AddObserverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddObserverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddObserverResponseMultiError) AllErrors() []error { return m }

// AddObserverResponseValidationError is the validation error returned by
// AddObserverResponse.Validate if the designated constraints aren't met.
type AddObserverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddObserverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddObserverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddObserverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddObserverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddObserverResponseValidationError) ErrorName() string {
	return "AddObserverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddObserverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddObserverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddObserverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddObserverResponseValidationError{}

// Validate checks the field values on DemoteVoterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DemoteVoterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DemoteVoterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DemoteVoterResponseMultiError, or nil if none found.
func (m *DemoteVoterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DemoteVoterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DemoteVoterResponseMultiError(errors)
	}

	return nil
}

// DemoteVoterResponseMultiError is an error wrapping multiple validation
// errors returned by DemoteVoterResponse.ValidateAll() if the designated
// constraints aren't met.
type DemoteVoterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DemoteVoterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DemoteVoterResponseMultiError) AllErrors() []error { return m }

// DemoteVoterResponseValidationError is the validation error returned by
// DemoteVoterResponse.Validate if the designated constraints aren't met.
type DemoteVoterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DemoteVoterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DemoteVoterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DemoteVoterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DemoteVoterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DemoteVoterResponseValidationError) ErrorName() string {
	return "DemoteVoterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DemoteVoterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDemoteVoterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DemoteVoterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DemoteVoterResponseValidationError{}

// Validate checks the field values on RemoveServerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveServerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveServerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveServerResponseMultiError, or nil if none found.
func (m *RemoveServerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveServerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveServerResponseMultiError(errors)
	}

	return nil
}

// RemoveServerResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveServerResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveServerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveServerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveServerResponseMultiError) AllErrors() []error { return m }

// RemoveServerResponseValidationError is the validation error returned by
// RemoveServerResponse.Validate if the designated constraints aren't met.
type RemoveServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveServerResponseValidationError) ErrorName() string {
	return "RemoveServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveServerResponseValidationError{}

// Validate checks the field values on StorageValue with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StorageValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageValue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StorageValueMultiError, or
// nil if none found.
func (m *StorageValue) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return StorageValueMultiError(errors)
	}

	return nil
}

// StorageValueMultiError is an error wrapping multiple validation errors
// returned by StorageValue.ValidateAll() if the designated constraints aren't met.
type StorageValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageValueMultiError) AllErrors() []error { return m }

// StorageValueValidationError is the validation error returned by
// StorageValue.Validate if the designated constraints aren't met.
type StorageValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageValueValidationError) ErrorName() string { return "StorageValueValidationError" }

// Error satisfies the builtin error interface
func (e StorageValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageValueValidationError{}

// Validate checks the field values on GetValueRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetValueRequestMultiError, or nil if none found.
func (m *GetValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return GetValueRequestMultiError(errors)
	}

	return nil
}

// GetValueRequestMultiError is an error wrapping multiple validation errors
// returned by GetValueRequest.ValidateAll() if the designated constraints
// aren't met.
type GetValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetValueRequestMultiError) AllErrors() []error { return m }

// GetValueRequestValidationError is the validation error returned by
// GetValueRequest.Validate if the designated constraints aren't met.
type GetValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetValueRequestValidationError) ErrorName() string { return "GetValueRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetValueRequestValidationError{}

// Validate checks the field values on GetValueResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetValueResponseMultiError, or nil if none found.
func (m *GetValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetValueResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetValueResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetValueResponseMultiError(errors)
	}

	return nil
}

// GetValueResponseMultiError is an error wrapping multiple validation errors
// returned by GetValueResponse.ValidateAll() if the designated constraints
// aren't met.
type GetValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetValueResponseMultiError) AllErrors() []error { return m }

// GetValueResponseValidationError is the validation error returned by
// GetValueResponse.Validate if the designated constraints aren't met.
type GetValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetValueResponseValidationError) ErrorName() string { return "GetValueResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetValueResponseValidationError{}

// Validate checks the field values on PutValueRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PutValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutValueRequestMultiError, or nil if none found.
func (m *PutValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PutValueRequestValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PutValueRequestValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutValueRequestValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTtl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PutValueRequestValidationError{
					field:  "Ttl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PutValueRequestValidationError{
					field:  "Ttl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTtl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutValueRequestValidationError{
				field:  "Ttl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PutValueRequestMultiError(errors)
	}

	return nil
}

// PutValueRequestMultiError is an error wrapping multiple validation errors
// returned by PutValueRequest.ValidateAll() if the designated constraints
// aren't met.
type PutValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutValueRequestMultiError) AllErrors() []error { return m }

// PutValueRequestValidationError is the validation error returned by
// PutValueRequest.Validate if the designated constraints aren't met.
type PutValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutValueRequestValidationError) ErrorName() string { return "PutValueRequestValidationError" }

// Error satisfies the builtin error interface
func (e PutValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutValueRequestValidationError{}

// Validate checks the field values on PutValueResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PutValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutValueResponseMultiError, or nil if none found.
func (m *PutValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PutValueResponseMultiError(errors)
	}

	return nil
}

// PutValueResponseMultiError is an error wrapping multiple validation errors
// returned by PutValueResponse.ValidateAll() if the designated constraints
// aren't met.
type PutValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutValueResponseMultiError) AllErrors() []error { return m }

// PutValueResponseValidationError is the validation error returned by
// PutValueResponse.Validate if the designated constraints aren't met.
type PutValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutValueResponseValidationError) ErrorName() string { return "PutValueResponseValidationError" }

// Error satisfies the builtin error interface
func (e PutValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutValueResponseValidationError{}

// Validate checks the field values on DeleteValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteValueRequestMultiError, or nil if none found.
func (m *DeleteValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return DeleteValueRequestMultiError(errors)
	}

	return nil
}

// DeleteValueRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteValueRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteValueRequestMultiError) AllErrors() []error { return m }

// DeleteValueRequestValidationError is the validation error returned by
// DeleteValueRequest.Validate if the designated constraints aren't met.
type DeleteValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteValueRequestValidationError) ErrorName() string {
	return "DeleteValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteValueRequestValidationError{}

// Validate checks the field values on DeleteValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteValueResponseMultiError, or nil if none found.
func (m *DeleteValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteValueResponseMultiError(errors)
	}

	return nil
}

// DeleteValueResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteValueResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteValueResponseMultiError) AllErrors() []error { return m }

// DeleteValueResponseValidationError is the validation error returned by
// DeleteValueResponse.Validate if the designated constraints aren't met.
type DeleteValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteValueResponseValidationError) ErrorName() string {
	return "DeleteValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteValueResponseValidationError{}

// Validate checks the field values on ListKeysRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListKeysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListKeysRequestMultiError, or nil if none found.
func (m *ListKeysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKeysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prefix

	if len(errors) > 0 {
		return ListKeysRequestMultiError(errors)
	}

	return nil
}

// ListKeysRequestMultiError is an error wrapping multiple validation errors
// returned by ListKeysRequest.ValidateAll() if the designated constraints
// aren't met.
type ListKeysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKeysRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKeysRequestMultiError) AllErrors() []error { return m }

// ListKeysRequestValidationError is the validation error returned by
// ListKeysRequest.Validate if the designated constraints aren't met.
type ListKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKeysRequestValidationError) ErrorName() string { return "ListKeysRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKeysRequestValidationError{}

// Validate checks the field values on ListKeysResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListKeysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKeysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListKeysResponseMultiError, or nil if none found.
func (m *ListKeysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKeysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListKeysResponseMultiError(errors)
	}

	return nil
}

// ListKeysResponseMultiError is an error wrapping multiple validation errors
// returned by ListKeysResponse.ValidateAll() if the designated constraints
// aren't met.
type ListKeysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKeysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKeysResponseMultiError) AllErrors() []error { return m }

// ListKeysResponseValidationError is the validation error returned by
// ListKeysResponse.Validate if the designated constraints aren't met.
type ListKeysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKeysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKeysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKeysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKeysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKeysResponseValidationError) ErrorName() string { return "ListKeysResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListKeysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKeysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKeysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKeysResponseValidationError{}

// Validate checks the field values on ListValuesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListValuesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListValuesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListValuesRequestMultiError, or nil if none found.
func (m *ListValuesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListValuesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prefix

	if len(errors) > 0 {
		return ListValuesRequestMultiError(errors)
	}

	return nil
}

// ListValuesRequestMultiError is an error wrapping multiple validation errors
// returned by ListValuesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListValuesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListValuesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListValuesRequestMultiError) AllErrors() []error { return m }

// ListValuesRequestValidationError is the validation error returned by
// ListValuesRequest.Validate if the designated constraints aren't met.
type ListValuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListValuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListValuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListValuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListValuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListValuesRequestValidationError) ErrorName() string {
	return "ListValuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListValuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListValuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListValuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListValuesRequestValidationError{}

// Validate checks the field values on ListValuesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListValuesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListValuesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListValuesResponseMultiError, or nil if none found.
func (m *ListValuesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListValuesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListValuesResponseValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListValuesResponseValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListValuesResponseValidationError{
					field:  fmt.Sprintf("Values[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListValuesResponseMultiError(errors)
	}

	return nil
}

// ListValuesResponseMultiError is an error wrapping multiple validation errors
// returned by ListValuesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListValuesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListValuesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListValuesResponseMultiError) AllErrors() []error { return m }

// ListValuesResponseValidationError is the validation error returned by
// ListValuesResponse.Validate if the designated constraints aren't met.
type ListValuesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListValuesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListValuesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListValuesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListValuesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListValuesResponseValidationError) ErrorName() string {
	return "ListValuesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListValuesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListValuesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListValuesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListValuesResponseValidationError{}

// Validate checks the field values on SubscribePrefixRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribePrefixRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribePrefixRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribePrefixRequestMultiError, or nil if none found.
func (m *SubscribePrefixRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribePrefixRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prefix

	if len(errors) > 0 {
		return SubscribePrefixRequestMultiError(errors)
	}

	return nil
}

// SubscribePrefixRequestMultiError is an error wrapping multiple validation
// errors returned by SubscribePrefixRequest.ValidateAll() if the designated
// constraints aren't met.
type SubscribePrefixRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribePrefixRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribePrefixRequestMultiError) AllErrors() []error { return m }

// SubscribePrefixRequestValidationError is the validation error returned by
// SubscribePrefixRequest.Validate if the designated constraints aren't met.
type SubscribePrefixRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribePrefixRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribePrefixRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribePrefixRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribePrefixRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribePrefixRequestValidationError) ErrorName() string {
	return "SubscribePrefixRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribePrefixRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribePrefixRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribePrefixRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribePrefixRequestValidationError{}

// Validate checks the field values on PrefixEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PrefixEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrefixEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PrefixEventMultiError, or
// nil if none found.
func (m *PrefixEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *PrefixEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prefix

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PrefixEventValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PrefixEventValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrefixEventValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EventType

	if len(errors) > 0 {
		return PrefixEventMultiError(errors)
	}

	return nil
}

// PrefixEventMultiError is an error wrapping multiple validation errors
// returned by PrefixEvent.ValidateAll() if the designated constraints aren't met.
type PrefixEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrefixEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrefixEventMultiError) AllErrors() []error { return m }

// PrefixEventValidationError is the validation error returned by
// PrefixEvent.Validate if the designated constraints aren't met.
type PrefixEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrefixEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrefixEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrefixEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrefixEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrefixEventValidationError) ErrorName() string { return "PrefixEventValidationError" }

// Error satisfies the builtin error interface
func (e PrefixEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrefixEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrefixEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrefixEventValidationError{}
