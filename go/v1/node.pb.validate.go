// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/node.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FeaturePort with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FeaturePort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeaturePort with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeaturePortMultiError, or
// nil if none found.
func (m *FeaturePort) ValidateAll() error {
	return m.validate(true)
}

func (m *FeaturePort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Feature

	// no validation rules for Port

	if len(errors) > 0 {
		return FeaturePortMultiError(errors)
	}

	return nil
}

// FeaturePortMultiError is an error wrapping multiple validation errors
// returned by FeaturePort.ValidateAll() if the designated constraints aren't met.
type FeaturePortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeaturePortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeaturePortMultiError) AllErrors() []error { return m }

// FeaturePortValidationError is the validation error returned by
// FeaturePort.Validate if the designated constraints aren't met.
type FeaturePortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeaturePortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeaturePortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeaturePortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeaturePortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeaturePortValidationError) ErrorName() string { return "FeaturePortValidationError" }

// Error satisfies the builtin error interface
func (e FeaturePortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeaturePort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeaturePortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeaturePortValidationError{}

// Validate checks the field values on MeshNode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MeshNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeshNode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MeshNodeMultiError, or nil
// if none found.
func (m *MeshNode) ValidateAll() error {
	return m.validate(true)
}

func (m *MeshNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PublicKey

	// no validation rules for PrimaryEndpoint

	// no validation rules for ZoneAwarenessID

	// no validation rules for PrivateIPv4

	// no validation rules for PrivateIPv6

	for idx, item := range m.GetFeatures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MeshNodeValidationError{
						field:  fmt.Sprintf("Features[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MeshNodeValidationError{
						field:  fmt.Sprintf("Features[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeshNodeValidationError{
					field:  fmt.Sprintf("Features[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetJoinedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeshNodeValidationError{
					field:  "JoinedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeshNodeValidationError{
					field:  "JoinedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJoinedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeshNodeValidationError{
				field:  "JoinedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MeshNodeMultiError(errors)
	}

	return nil
}

// MeshNodeMultiError is an error wrapping multiple validation errors returned
// by MeshNode.ValidateAll() if the designated constraints aren't met.
type MeshNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeshNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeshNodeMultiError) AllErrors() []error { return m }

// MeshNodeValidationError is the validation error returned by
// MeshNode.Validate if the designated constraints aren't met.
type MeshNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeshNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeshNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeshNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeshNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeshNodeValidationError) ErrorName() string { return "MeshNodeValidationError" }

// Error satisfies the builtin error interface
func (e MeshNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeshNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeshNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeshNodeValidationError{}

// Validate checks the field values on NodeList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeListMultiError, or nil
// if none found.
func (m *NodeList) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeListValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeListValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeListValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NodeListMultiError(errors)
	}

	return nil
}

// NodeListMultiError is an error wrapping multiple validation errors returned
// by NodeList.ValidateAll() if the designated constraints aren't met.
type NodeListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeListMultiError) AllErrors() []error { return m }

// NodeListValidationError is the validation error returned by
// NodeList.Validate if the designated constraints aren't met.
type NodeListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeListValidationError) ErrorName() string { return "NodeListValidationError" }

// Error satisfies the builtin error interface
func (e NodeListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeListValidationError{}

// Validate checks the field values on GetStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusRequestMultiError, or nil if none found.
func (m *GetStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetStatusRequestMultiError(errors)
	}

	return nil
}

// GetStatusRequestMultiError is an error wrapping multiple validation errors
// returned by GetStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusRequestMultiError) AllErrors() []error { return m }

// GetStatusRequestValidationError is the validation error returned by
// GetStatusRequest.Validate if the designated constraints aren't met.
type GetStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusRequestValidationError) ErrorName() string { return "GetStatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusRequestValidationError{}

// Validate checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Status) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StatusMultiError, or nil if none found.
func (m *Status) ValidateAll() error {
	return m.validate(true)
}

func (m *Status) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Description

	// no validation rules for Version

	// no validation rules for GitCommit

	// no validation rules for BuildDate

	// no validation rules for Uptime

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatusValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFeatures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StatusValidationError{
						field:  fmt.Sprintf("Features[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StatusValidationError{
						field:  fmt.Sprintf("Features[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StatusValidationError{
					field:  fmt.Sprintf("Features[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ClusterStatus

	// no validation rules for CurrentLeader

	if all {
		switch v := interface{}(m.GetInterfaceMetrics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "InterfaceMetrics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "InterfaceMetrics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInterfaceMetrics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatusValidationError{
				field:  "InterfaceMetrics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StatusMultiError(errors)
	}

	return nil
}

// StatusMultiError is an error wrapping multiple validation errors returned by
// Status.ValidateAll() if the designated constraints aren't met.
type StatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusMultiError) AllErrors() []error { return m }

// StatusValidationError is the validation error returned by Status.Validate if
// the designated constraints aren't met.
type StatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusValidationError) ErrorName() string { return "StatusValidationError" }

// Error satisfies the builtin error interface
func (e StatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusValidationError{}

// Validate checks the field values on DataChannelNegotiation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DataChannelNegotiation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataChannelNegotiation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DataChannelNegotiationMultiError, or nil if none found.
func (m *DataChannelNegotiation) ValidateAll() error {
	return m.validate(true)
}

func (m *DataChannelNegotiation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Proto

	// no validation rules for Src

	// no validation rules for Dst

	// no validation rules for Port

	// no validation rules for Offer

	// no validation rules for Answer

	// no validation rules for Candidate

	if len(errors) > 0 {
		return DataChannelNegotiationMultiError(errors)
	}

	return nil
}

// DataChannelNegotiationMultiError is an error wrapping multiple validation
// errors returned by DataChannelNegotiation.ValidateAll() if the designated
// constraints aren't met.
type DataChannelNegotiationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataChannelNegotiationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataChannelNegotiationMultiError) AllErrors() []error { return m }

// DataChannelNegotiationValidationError is the validation error returned by
// DataChannelNegotiation.Validate if the designated constraints aren't met.
type DataChannelNegotiationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataChannelNegotiationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataChannelNegotiationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataChannelNegotiationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataChannelNegotiationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataChannelNegotiationValidationError) ErrorName() string {
	return "DataChannelNegotiationValidationError"
}

// Error satisfies the builtin error interface
func (e DataChannelNegotiationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataChannelNegotiation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataChannelNegotiationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataChannelNegotiationValidationError{}

// Validate checks the field values on InterfaceMetrics with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InterfaceMetrics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterfaceMetrics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InterfaceMetricsMultiError, or nil if none found.
func (m *InterfaceMetrics) ValidateAll() error {
	return m.validate(true)
}

func (m *InterfaceMetrics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceName

	// no validation rules for PublicKey

	// no validation rules for AddressV4

	// no validation rules for AddressV6

	// no validation rules for Type

	// no validation rules for ListenPort

	// no validation rules for TotalReceiveBytes

	// no validation rules for TotalTransmitBytes

	// no validation rules for NumPeers

	for idx, item := range m.GetPeers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InterfaceMetricsValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InterfaceMetricsValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InterfaceMetricsValidationError{
					field:  fmt.Sprintf("Peers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InterfaceMetricsMultiError(errors)
	}

	return nil
}

// InterfaceMetricsMultiError is an error wrapping multiple validation errors
// returned by InterfaceMetrics.ValidateAll() if the designated constraints
// aren't met.
type InterfaceMetricsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterfaceMetricsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterfaceMetricsMultiError) AllErrors() []error { return m }

// InterfaceMetricsValidationError is the validation error returned by
// InterfaceMetrics.Validate if the designated constraints aren't met.
type InterfaceMetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterfaceMetricsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterfaceMetricsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterfaceMetricsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterfaceMetricsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterfaceMetricsValidationError) ErrorName() string { return "InterfaceMetricsValidationError" }

// Error satisfies the builtin error interface
func (e InterfaceMetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterfaceMetrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterfaceMetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterfaceMetricsValidationError{}

// Validate checks the field values on PeerMetrics with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PeerMetrics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PeerMetrics with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PeerMetricsMultiError, or
// nil if none found.
func (m *PeerMetrics) ValidateAll() error {
	return m.validate(true)
}

func (m *PeerMetrics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublicKey

	// no validation rules for Endpoint

	// no validation rules for PersistentKeepAlive

	// no validation rules for LastHandshakeTime

	// no validation rules for ProtocolVersion

	// no validation rules for ReceiveBytes

	// no validation rules for TransmitBytes

	if len(errors) > 0 {
		return PeerMetricsMultiError(errors)
	}

	return nil
}

// PeerMetricsMultiError is an error wrapping multiple validation errors
// returned by PeerMetrics.ValidateAll() if the designated constraints aren't met.
type PeerMetricsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PeerMetricsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PeerMetricsMultiError) AllErrors() []error { return m }

// PeerMetricsValidationError is the validation error returned by
// PeerMetrics.Validate if the designated constraints aren't met.
type PeerMetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeerMetricsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeerMetricsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeerMetricsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeerMetricsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeerMetricsValidationError) ErrorName() string { return "PeerMetricsValidationError" }

// Error satisfies the builtin error interface
func (e PeerMetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeerMetrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeerMetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeerMetricsValidationError{}

// Validate checks the field values on WebRTCSignal with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WebRTCSignal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebRTCSignal with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WebRTCSignalMultiError, or
// nil if none found.
func (m *WebRTCSignal) ValidateAll() error {
	return m.validate(true)
}

func (m *WebRTCSignal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeID

	// no validation rules for Candidate

	// no validation rules for Description

	if len(errors) > 0 {
		return WebRTCSignalMultiError(errors)
	}

	return nil
}

// WebRTCSignalMultiError is an error wrapping multiple validation errors
// returned by WebRTCSignal.ValidateAll() if the designated constraints aren't met.
type WebRTCSignalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebRTCSignalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebRTCSignalMultiError) AllErrors() []error { return m }

// WebRTCSignalValidationError is the validation error returned by
// WebRTCSignal.Validate if the designated constraints aren't met.
type WebRTCSignalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebRTCSignalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebRTCSignalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebRTCSignalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebRTCSignalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebRTCSignalValidationError) ErrorName() string { return "WebRTCSignalValidationError" }

// Error satisfies the builtin error interface
func (e WebRTCSignalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebRTCSignal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebRTCSignalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebRTCSignalValidationError{}
