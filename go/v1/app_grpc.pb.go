//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/app.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppDaemon_PutConnection_FullMethodName   = "/v1.AppDaemon/PutConnection"
	AppDaemon_GetConnection_FullMethodName   = "/v1.AppDaemon/GetConnection"
	AppDaemon_DropConnection_FullMethodName  = "/v1.AppDaemon/DropConnection"
	AppDaemon_ListConnections_FullMethodName = "/v1.AppDaemon/ListConnections"
	AppDaemon_Connect_FullMethodName         = "/v1.AppDaemon/Connect"
	AppDaemon_Disconnect_FullMethodName      = "/v1.AppDaemon/Disconnect"
	AppDaemon_Metrics_FullMethodName         = "/v1.AppDaemon/Metrics"
	AppDaemon_Query_FullMethodName           = "/v1.AppDaemon/Query"
	AppDaemon_Status_FullMethodName          = "/v1.AppDaemon/Status"
)

// AppDaemonClient is the client API for AppDaemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppDaemonClient interface {
	// PutConnection stores the parameters for a connection in the daemon.
	PutConnection(ctx context.Context, in *PutConnectionRequest, opts ...grpc.CallOption) (*PutConnectionResponse, error)
	// GetConnection retrieves the parameters and current status of a connection in the daemon.
	GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error)
	// DropConnection deletes all data stored for a given mesh connection.
	DropConnection(ctx context.Context, in *DropConnectionRequest, opts ...grpc.CallOption) (*DropConnectionResponse, error)
	// ListConnections retrieves the parameters and current status of all connections in the daemon.
	ListConnections(ctx context.Context, in *ListConnectionsRequest, opts ...grpc.CallOption) (*ListConnectionsResponse, error)
	// Connect is used to establish a connection between the node and a mesh.
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// Disconnect is used to disconnect the node from a mesh.
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error)
	// Metrics is used to retrieve interface metrics for one or more mesh connections.
	Metrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
	// Query is used to query a mesh connection for information.
	Query(ctx context.Context, in *AppQueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// Status is used to retrieve the status of the daemon. This includes a map of known connections and their statuses.
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*DaemonStatus, error)
}

type appDaemonClient struct {
	cc grpc.ClientConnInterface
}

func NewAppDaemonClient(cc grpc.ClientConnInterface) AppDaemonClient {
	return &appDaemonClient{cc}
}

func (c *appDaemonClient) PutConnection(ctx context.Context, in *PutConnectionRequest, opts ...grpc.CallOption) (*PutConnectionResponse, error) {
	out := new(PutConnectionResponse)
	err := c.cc.Invoke(ctx, AppDaemon_PutConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appDaemonClient) GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error) {
	out := new(GetConnectionResponse)
	err := c.cc.Invoke(ctx, AppDaemon_GetConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appDaemonClient) DropConnection(ctx context.Context, in *DropConnectionRequest, opts ...grpc.CallOption) (*DropConnectionResponse, error) {
	out := new(DropConnectionResponse)
	err := c.cc.Invoke(ctx, AppDaemon_DropConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appDaemonClient) ListConnections(ctx context.Context, in *ListConnectionsRequest, opts ...grpc.CallOption) (*ListConnectionsResponse, error) {
	out := new(ListConnectionsResponse)
	err := c.cc.Invoke(ctx, AppDaemon_ListConnections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appDaemonClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, AppDaemon_Connect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appDaemonClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error) {
	out := new(DisconnectResponse)
	err := c.cc.Invoke(ctx, AppDaemon_Disconnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appDaemonClient) Metrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, AppDaemon_Metrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appDaemonClient) Query(ctx context.Context, in *AppQueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, AppDaemon_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appDaemonClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*DaemonStatus, error) {
	out := new(DaemonStatus)
	err := c.cc.Invoke(ctx, AppDaemon_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppDaemonServer is the server API for AppDaemon service.
// All implementations must embed UnimplementedAppDaemonServer
// for forward compatibility
type AppDaemonServer interface {
	// PutConnection stores the parameters for a connection in the daemon.
	PutConnection(context.Context, *PutConnectionRequest) (*PutConnectionResponse, error)
	// GetConnection retrieves the parameters and current status of a connection in the daemon.
	GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error)
	// DropConnection deletes all data stored for a given mesh connection.
	DropConnection(context.Context, *DropConnectionRequest) (*DropConnectionResponse, error)
	// ListConnections retrieves the parameters and current status of all connections in the daemon.
	ListConnections(context.Context, *ListConnectionsRequest) (*ListConnectionsResponse, error)
	// Connect is used to establish a connection between the node and a mesh.
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// Disconnect is used to disconnect the node from a mesh.
	Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error)
	// Metrics is used to retrieve interface metrics for one or more mesh connections.
	Metrics(context.Context, *MetricsRequest) (*MetricsResponse, error)
	// Query is used to query a mesh connection for information.
	Query(context.Context, *AppQueryRequest) (*QueryResponse, error)
	// Status is used to retrieve the status of the daemon. This includes a map of known connections and their statuses.
	Status(context.Context, *StatusRequest) (*DaemonStatus, error)
	mustEmbedUnimplementedAppDaemonServer()
}

// UnimplementedAppDaemonServer must be embedded to have forward compatible implementations.
type UnimplementedAppDaemonServer struct {
}

func (UnimplementedAppDaemonServer) PutConnection(context.Context, *PutConnectionRequest) (*PutConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutConnection not implemented")
}
func (UnimplementedAppDaemonServer) GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (UnimplementedAppDaemonServer) DropConnection(context.Context, *DropConnectionRequest) (*DropConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropConnection not implemented")
}
func (UnimplementedAppDaemonServer) ListConnections(context.Context, *ListConnectionsRequest) (*ListConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnections not implemented")
}
func (UnimplementedAppDaemonServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedAppDaemonServer) Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedAppDaemonServer) Metrics(context.Context, *MetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metrics not implemented")
}
func (UnimplementedAppDaemonServer) Query(context.Context, *AppQueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedAppDaemonServer) Status(context.Context, *StatusRequest) (*DaemonStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedAppDaemonServer) mustEmbedUnimplementedAppDaemonServer() {}

// UnsafeAppDaemonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppDaemonServer will
// result in compilation errors.
type UnsafeAppDaemonServer interface {
	mustEmbedUnimplementedAppDaemonServer()
}

func RegisterAppDaemonServer(s grpc.ServiceRegistrar, srv AppDaemonServer) {
	s.RegisterService(&AppDaemon_ServiceDesc, srv)
}

func _AppDaemon_PutConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppDaemonServer).PutConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppDaemon_PutConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppDaemonServer).PutConnection(ctx, req.(*PutConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppDaemon_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppDaemonServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppDaemon_GetConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppDaemonServer).GetConnection(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppDaemon_DropConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppDaemonServer).DropConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppDaemon_DropConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppDaemonServer).DropConnection(ctx, req.(*DropConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppDaemon_ListConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppDaemonServer).ListConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppDaemon_ListConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppDaemonServer).ListConnections(ctx, req.(*ListConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppDaemon_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppDaemonServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppDaemon_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppDaemonServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppDaemon_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppDaemonServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppDaemon_Disconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppDaemonServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppDaemon_Metrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppDaemonServer).Metrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppDaemon_Metrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppDaemonServer).Metrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppDaemon_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppDaemonServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppDaemon_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppDaemonServer).Query(ctx, req.(*AppQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppDaemon_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppDaemonServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppDaemon_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppDaemonServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppDaemon_ServiceDesc is the grpc.ServiceDesc for AppDaemon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppDaemon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AppDaemon",
	HandlerType: (*AppDaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutConnection",
			Handler:    _AppDaemon_PutConnection_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _AppDaemon_GetConnection_Handler,
		},
		{
			MethodName: "DropConnection",
			Handler:    _AppDaemon_DropConnection_Handler,
		},
		{
			MethodName: "ListConnections",
			Handler:    _AppDaemon_ListConnections_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _AppDaemon_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _AppDaemon_Disconnect_Handler,
		},
		{
			MethodName: "Metrics",
			Handler:    _AppDaemon_Metrics_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _AppDaemon_Query_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _AppDaemon_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/app.proto",
}
