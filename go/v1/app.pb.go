//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: v1/app.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NetworkAuthMethod are types of RPC credentials to supply to mesh nodes.
type NetworkAuthMethod int32

const (
	// NO_AUTH is used to indicate that no authentication is required.
	NetworkAuthMethod_NO_AUTH NetworkAuthMethod = 0
	// BASIC is used to indicate that basic authentication is required.
	NetworkAuthMethod_BASIC NetworkAuthMethod = 1
	// LDAP is used to indicate that LDAP authentication is required.
	NetworkAuthMethod_LDAP NetworkAuthMethod = 2
	// ID is used to indicate that an identity is required.
	NetworkAuthMethod_ID NetworkAuthMethod = 3
	// MTLS is used to indicate that mutual TLS authentication is required.
	// The TLS object should be used to configure the TLS connection.
	NetworkAuthMethod_MTLS NetworkAuthMethod = 4
)

// Enum value maps for NetworkAuthMethod.
var (
	NetworkAuthMethod_name = map[int32]string{
		0: "NO_AUTH",
		1: "BASIC",
		2: "LDAP",
		3: "ID",
		4: "MTLS",
	}
	NetworkAuthMethod_value = map[string]int32{
		"NO_AUTH": 0,
		"BASIC":   1,
		"LDAP":    2,
		"ID":      3,
		"MTLS":    4,
	}
)

func (x NetworkAuthMethod) Enum() *NetworkAuthMethod {
	p := new(NetworkAuthMethod)
	*p = x
	return p
}

func (x NetworkAuthMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkAuthMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_app_proto_enumTypes[0].Descriptor()
}

func (NetworkAuthMethod) Type() protoreflect.EnumType {
	return &file_v1_app_proto_enumTypes[0]
}

func (x NetworkAuthMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkAuthMethod.Descriptor instead.
func (NetworkAuthMethod) EnumDescriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{0}
}

// DaemonConnStatus are the statuses of a mesh connection.
type DaemonConnStatus int32

const (
	// DISCONNECTED indicates that the node is not connected to a mesh.
	DaemonConnStatus_DISCONNECTED DaemonConnStatus = 0
	// CONNECTING indicates that the node is in the process of connecting to a mesh.
	DaemonConnStatus_CONNECTING DaemonConnStatus = 1
	// CONNECTED indicates that the node is connected to a mesh.
	DaemonConnStatus_CONNECTED DaemonConnStatus = 2
)

// Enum value maps for DaemonConnStatus.
var (
	DaemonConnStatus_name = map[int32]string{
		0: "DISCONNECTED",
		1: "CONNECTING",
		2: "CONNECTED",
	}
	DaemonConnStatus_value = map[string]int32{
		"DISCONNECTED": 0,
		"CONNECTING":   1,
		"CONNECTED":    2,
	}
)

func (x DaemonConnStatus) Enum() *DaemonConnStatus {
	p := new(DaemonConnStatus)
	*p = x
	return p
}

func (x DaemonConnStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DaemonConnStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_app_proto_enumTypes[1].Descriptor()
}

func (DaemonConnStatus) Type() protoreflect.EnumType {
	return &file_v1_app_proto_enumTypes[1]
}

func (x DaemonConnStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DaemonConnStatus.Descriptor instead.
func (DaemonConnStatus) EnumDescriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{1}
}

// AddrType is the type of join addresses included in the request.
type ConnectionParameters_AddrType int32

const (
	// ADDR is used to join a mesh using an IP or DNS address.
	ConnectionParameters_ADDR ConnectionParameters_AddrType = 0
	// MULTIADDR is used to join a mesh using a multiaddr.
	ConnectionParameters_MULTIADDR ConnectionParameters_AddrType = 1
	// RENDEZVOUS is used to join a mesh using a rendezvous string.
	ConnectionParameters_RENDEZVOUS ConnectionParameters_AddrType = 2
)

// Enum value maps for ConnectionParameters_AddrType.
var (
	ConnectionParameters_AddrType_name = map[int32]string{
		0: "ADDR",
		1: "MULTIADDR",
		2: "RENDEZVOUS",
	}
	ConnectionParameters_AddrType_value = map[string]int32{
		"ADDR":       0,
		"MULTIADDR":  1,
		"RENDEZVOUS": 2,
	}
)

func (x ConnectionParameters_AddrType) Enum() *ConnectionParameters_AddrType {
	p := new(ConnectionParameters_AddrType)
	*p = x
	return p
}

func (x ConnectionParameters_AddrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionParameters_AddrType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_app_proto_enumTypes[2].Descriptor()
}

func (ConnectionParameters_AddrType) Type() protoreflect.EnumType {
	return &file_v1_app_proto_enumTypes[2]
}

func (x ConnectionParameters_AddrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionParameters_AddrType.Descriptor instead.
func (ConnectionParameters_AddrType) EnumDescriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{6, 0}
}

// AuthHeader is an enumeration of headers that coorespond to the AuthMethod.
// They are used to pass authentication credentials to the daemon. Enums
// cannot be used as map keys, so their string values are used instead.
type ConnectionParameters_AuthHeader int32

const (
	// BASIC_USERNAME is the username for basic authentication.
	ConnectionParameters_BASIC_USERNAME ConnectionParameters_AuthHeader = 0
	// BASIC_PASSWORD is the password for basic authentication.
	ConnectionParameters_BASIC_PASSWORD ConnectionParameters_AuthHeader = 1
	// LDAP_USERNAME is the username for LDAP authentication.
	ConnectionParameters_LDAP_USERNAME ConnectionParameters_AuthHeader = 2
	// LDAP_PASSWORD is the password for LDAP authentication.
	ConnectionParameters_LDAP_PASSWORD ConnectionParameters_AuthHeader = 3
	// ADDRS_ENVELOPE is the header for a signed envelope containing
	// the join addresses to use to connect to the mesh.
	ConnectionParameters_ADDRS_ENVELOPE ConnectionParameters_AuthHeader = 4
)

// Enum value maps for ConnectionParameters_AuthHeader.
var (
	ConnectionParameters_AuthHeader_name = map[int32]string{
		0: "BASIC_USERNAME",
		1: "BASIC_PASSWORD",
		2: "LDAP_USERNAME",
		3: "LDAP_PASSWORD",
		4: "ADDRS_ENVELOPE",
	}
	ConnectionParameters_AuthHeader_value = map[string]int32{
		"BASIC_USERNAME": 0,
		"BASIC_PASSWORD": 1,
		"LDAP_USERNAME":  2,
		"LDAP_PASSWORD":  3,
		"ADDRS_ENVELOPE": 4,
	}
)

func (x ConnectionParameters_AuthHeader) Enum() *ConnectionParameters_AuthHeader {
	p := new(ConnectionParameters_AuthHeader)
	*p = x
	return p
}

func (x ConnectionParameters_AuthHeader) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionParameters_AuthHeader) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_app_proto_enumTypes[3].Descriptor()
}

func (ConnectionParameters_AuthHeader) Type() protoreflect.EnumType {
	return &file_v1_app_proto_enumTypes[3]
}

func (x ConnectionParameters_AuthHeader) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionParameters_AuthHeader.Descriptor instead.
func (ConnectionParameters_AuthHeader) EnumDescriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{6, 1}
}

type MeshConnBootstrap_DefaultNetworkACL int32

const (
	MeshConnBootstrap_ACCEPT MeshConnBootstrap_DefaultNetworkACL = 0
	MeshConnBootstrap_DROP   MeshConnBootstrap_DefaultNetworkACL = 1
)

// Enum value maps for MeshConnBootstrap_DefaultNetworkACL.
var (
	MeshConnBootstrap_DefaultNetworkACL_name = map[int32]string{
		0: "ACCEPT",
		1: "DROP",
	}
	MeshConnBootstrap_DefaultNetworkACL_value = map[string]int32{
		"ACCEPT": 0,
		"DROP":   1,
	}
)

func (x MeshConnBootstrap_DefaultNetworkACL) Enum() *MeshConnBootstrap_DefaultNetworkACL {
	p := new(MeshConnBootstrap_DefaultNetworkACL)
	*p = x
	return p
}

func (x MeshConnBootstrap_DefaultNetworkACL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeshConnBootstrap_DefaultNetworkACL) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_app_proto_enumTypes[4].Descriptor()
}

func (MeshConnBootstrap_DefaultNetworkACL) Type() protoreflect.EnumType {
	return &file_v1_app_proto_enumTypes[4]
}

func (x MeshConnBootstrap_DefaultNetworkACL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeshConnBootstrap_DefaultNetworkACL.Descriptor instead.
func (MeshConnBootstrap_DefaultNetworkACL) EnumDescriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{10, 0}
}

// PutConnectionRequest is sent by an application to a daemon to store the parameters
// for a mesh connection.
type PutConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of the connection. If not provided
	// one will be generated.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Parameters are the parameters for the connection.
	Parameters *ConnectionParameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *PutConnectionRequest) Reset() {
	*x = PutConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutConnectionRequest) ProtoMessage() {}

func (x *PutConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutConnectionRequest.ProtoReflect.Descriptor instead.
func (*PutConnectionRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{0}
}

func (x *PutConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutConnectionRequest) GetParameters() *ConnectionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// PutConnectionResponse is returned by the PutConnection RPC.
type PutConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of the connection.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PutConnectionResponse) Reset() {
	*x = PutConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutConnectionResponse) ProtoMessage() {}

func (x *PutConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutConnectionResponse.ProtoReflect.Descriptor instead.
func (*PutConnectionResponse) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{1}
}

func (x *PutConnectionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// GetConnectionRequest is sent by an application to a daemon to retrieve the parameters
// and current status of a mesh connection.
type GetConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of the connection.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetConnectionRequest) Reset() {
	*x = GetConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionRequest) ProtoMessage() {}

func (x *GetConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{2}
}

func (x *GetConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// GetConnectionResponse is returned by the GetConnection RPC.
type GetConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status is the status of the connection.
	Status DaemonConnStatus `protobuf:"varint,1,opt,name=status,proto3,enum=v1.DaemonConnStatus" json:"status,omitempty"`
	// Parameters are the parameters for the connection.
	Parameters *ConnectionParameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// Node is the node information for the connection.
	// This is only populated when the connection is connected.
	Node *MeshNode `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *GetConnectionResponse) Reset() {
	*x = GetConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionResponse) ProtoMessage() {}

func (x *GetConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionResponse) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{3}
}

func (x *GetConnectionResponse) GetStatus() DaemonConnStatus {
	if x != nil {
		return x.Status
	}
	return DaemonConnStatus_DISCONNECTED
}

func (x *GetConnectionResponse) GetParameters() *ConnectionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *GetConnectionResponse) GetNode() *MeshNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// ListConnectionsRequest is sent by an application to a daemon to retrieve the parameters
// and current status of all mesh connections.
type ListConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs are the unique identifiers of the connections to retrieve information for.
	// If not provided, metrics for all known connections will be returned.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListConnectionsRequest) Reset() {
	*x = ListConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectionsRequest) ProtoMessage() {}

func (x *ListConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectionsRequest.ProtoReflect.Descriptor instead.
func (*ListConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{4}
}

func (x *ListConnectionsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// ListConnectionsResponse is returned by the ListConnections RPC.
type ListConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connections are the parameters and statuses of all connections.
	Connections map[string]*GetConnectionResponse `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListConnectionsResponse) Reset() {
	*x = ListConnectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectionsResponse) ProtoMessage() {}

func (x *ListConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectionsResponse.ProtoReflect.Descriptor instead.
func (*ListConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{5}
}

func (x *ListConnectionsResponse) GetConnections() map[string]*GetConnectionResponse {
	if x != nil {
		return x.Connections
	}
	return nil
}

// ConnectionParameters are the parameters for a mesh connection.
type ConnectionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AuthMethod is the type of authentication to use.
	AuthMethod NetworkAuthMethod `protobuf:"varint,2,opt,name=authMethod,proto3,enum=v1.NetworkAuthMethod" json:"authMethod,omitempty"`
	// AuthCredentials are additional credentials as required by the authType.
	AuthCredentials map[string]string `protobuf:"bytes,3,rep,name=authCredentials,proto3" json:"authCredentials,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// AddrType is the type of join addresses in the addrs list.
	AddrType ConnectionParameters_AddrType `protobuf:"varint,4,opt,name=addrType,proto3,enum=v1.ConnectionParameters_AddrType" json:"addrType,omitempty"`
	// Addrs are the join addresses to use to connect to the mesh.
	Addrs []string `protobuf:"bytes,5,rep,name=addrs,proto3" json:"addrs,omitempty"`
	// Networking is the networking configuration to use.
	Networking *MeshConnNetworking `protobuf:"bytes,6,opt,name=networking,proto3" json:"networking,omitempty"`
	// Services are the services to expose to other nodes on the mesh.
	Services *MeshConnServices `protobuf:"bytes,7,opt,name=services,proto3" json:"services,omitempty"`
	// Bootstrap are options for bootstrapping a new mesh.
	Bootstrap *MeshConnBootstrap `protobuf:"bytes,8,opt,name=bootstrap,proto3" json:"bootstrap,omitempty"`
	// TLS are TLS configurations for the mesh connection.
	Tls *MeshConnTLS `protobuf:"bytes,9,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *ConnectionParameters) Reset() {
	*x = ConnectionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionParameters) ProtoMessage() {}

func (x *ConnectionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionParameters.ProtoReflect.Descriptor instead.
func (*ConnectionParameters) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{6}
}

func (x *ConnectionParameters) GetAuthMethod() NetworkAuthMethod {
	if x != nil {
		return x.AuthMethod
	}
	return NetworkAuthMethod_NO_AUTH
}

func (x *ConnectionParameters) GetAuthCredentials() map[string]string {
	if x != nil {
		return x.AuthCredentials
	}
	return nil
}

func (x *ConnectionParameters) GetAddrType() ConnectionParameters_AddrType {
	if x != nil {
		return x.AddrType
	}
	return ConnectionParameters_ADDR
}

func (x *ConnectionParameters) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *ConnectionParameters) GetNetworking() *MeshConnNetworking {
	if x != nil {
		return x.Networking
	}
	return nil
}

func (x *ConnectionParameters) GetServices() *MeshConnServices {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ConnectionParameters) GetBootstrap() *MeshConnBootstrap {
	if x != nil {
		return x.Bootstrap
	}
	return nil
}

func (x *ConnectionParameters) GetTls() *MeshConnTLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

// MeshConnNetworking are configurations for networking on a mesh.
type MeshConnNetworking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UseDNS indicates whether or not to use the DNS servers of the mesh.
	UseDNS bool `protobuf:"varint,1,opt,name=useDNS,proto3" json:"useDNS,omitempty"`
	// Endpoints are wireguard endpoints to broadcast to the mesh.
	Endpoints []string `protobuf:"bytes,2,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// DetectEndpoints enables endpoint detection.
	DetectEndpoints bool `protobuf:"varint,3,opt,name=detectEndpoints,proto3" json:"detectEndpoints,omitempty"`
	// DetectPrivateEndpoints enables endpoint detection for private addresses.
	// This only makes sense when DetectEndpoints is enabled.
	DetectPrivateEndpoints bool `protobuf:"varint,4,opt,name=detectPrivateEndpoints,proto3" json:"detectPrivateEndpoints,omitempty"`
}

func (x *MeshConnNetworking) Reset() {
	*x = MeshConnNetworking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshConnNetworking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshConnNetworking) ProtoMessage() {}

func (x *MeshConnNetworking) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshConnNetworking.ProtoReflect.Descriptor instead.
func (*MeshConnNetworking) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{7}
}

func (x *MeshConnNetworking) GetUseDNS() bool {
	if x != nil {
		return x.UseDNS
	}
	return false
}

func (x *MeshConnNetworking) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *MeshConnNetworking) GetDetectEndpoints() bool {
	if x != nil {
		return x.DetectEndpoints
	}
	return false
}

func (x *MeshConnNetworking) GetDetectPrivateEndpoints() bool {
	if x != nil {
		return x.DetectPrivateEndpoints
	}
	return false
}

// MeshConnServices are configurations for exposing services to other nodes on a mesh.
type MeshConnServices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enabled indicates whether or not to expose services to other nodes.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// EnableLibP2P indicates whether or not to serve the API over libp2p.
	EnableLibP2P bool `protobuf:"varint,2,opt,name=enableLibP2P,proto3" json:"enableLibP2P,omitempty"`
	// EnableTLS indicates whether or not to use TLS for the API.
	EnableTLS bool `protobuf:"varint,3,opt,name=enableTLS,proto3" json:"enableTLS,omitempty"`
	// Rendezvous is an optional rendezvous string to use for anouncing the service
	// on the IPFS DHT.
	Rendezvous string `protobuf:"bytes,4,opt,name=rendezvous,proto3" json:"rendezvous,omitempty"`
	// ListenAddress is a raw IP address and port to listen on.
	ListenAddress string `protobuf:"bytes,5,opt,name=listenAddress,proto3" json:"listenAddress,omitempty"`
	// ListenMultiaddrs are multiaddrs to listen on. If not provided and
	// EnableLibP2P is set, the default listen addresses will be used.
	ListenMultiaddrs []string `protobuf:"bytes,6,rep,name=listenMultiaddrs,proto3" json:"listenMultiaddrs,omitempty"`
	// AuthMetod is the of authentication to enable for the services.
	// Only mTLS and ID are supported.
	AuthMethod NetworkAuthMethod `protobuf:"varint,7,opt,name=authMethod,proto3,enum=v1.NetworkAuthMethod" json:"authMethod,omitempty"`
	// Features are which features to enable on the API.
	Features []Feature `protobuf:"varint,8,rep,packed,name=features,proto3,enum=v1.Feature" json:"features,omitempty"`
	// DNS are configurations for running a MeshDNS server.
	Dns *MeshDNSService `protobuf:"bytes,9,opt,name=dns,proto3" json:"dns,omitempty"`
}

func (x *MeshConnServices) Reset() {
	*x = MeshConnServices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshConnServices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshConnServices) ProtoMessage() {}

func (x *MeshConnServices) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshConnServices.ProtoReflect.Descriptor instead.
func (*MeshConnServices) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{8}
}

func (x *MeshConnServices) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MeshConnServices) GetEnableLibP2P() bool {
	if x != nil {
		return x.EnableLibP2P
	}
	return false
}

func (x *MeshConnServices) GetEnableTLS() bool {
	if x != nil {
		return x.EnableTLS
	}
	return false
}

func (x *MeshConnServices) GetRendezvous() string {
	if x != nil {
		return x.Rendezvous
	}
	return ""
}

func (x *MeshConnServices) GetListenAddress() string {
	if x != nil {
		return x.ListenAddress
	}
	return ""
}

func (x *MeshConnServices) GetListenMultiaddrs() []string {
	if x != nil {
		return x.ListenMultiaddrs
	}
	return nil
}

func (x *MeshConnServices) GetAuthMethod() NetworkAuthMethod {
	if x != nil {
		return x.AuthMethod
	}
	return NetworkAuthMethod_NO_AUTH
}

func (x *MeshConnServices) GetFeatures() []Feature {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *MeshConnServices) GetDns() *MeshDNSService {
	if x != nil {
		return x.Dns
	}
	return nil
}

// MeshDNSService are configurations for running a MeshDNS server.
type MeshDNSService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enabled indicates whether or not to run a MeshDNS server.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// ListenUDP is a raw IP address and port to listen on for UDP.
	// Defaults to :53. Set to an empty string to disable.
	ListenUDP string `protobuf:"bytes,2,opt,name=listenUDP,proto3" json:"listenUDP,omitempty"`
	// ListenTCP is a raw IP address and port to listen on for TCP.
	// Defaults to :53. Set to an empty string to disable.
	ListenTCP string `protobuf:"bytes,3,opt,name=listenTCP,proto3" json:"listenTCP,omitempty"`
}

func (x *MeshDNSService) Reset() {
	*x = MeshDNSService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshDNSService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshDNSService) ProtoMessage() {}

func (x *MeshDNSService) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshDNSService.ProtoReflect.Descriptor instead.
func (*MeshDNSService) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{9}
}

func (x *MeshDNSService) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MeshDNSService) GetListenUDP() string {
	if x != nil {
		return x.ListenUDP
	}
	return ""
}

func (x *MeshDNSService) GetListenTCP() string {
	if x != nil {
		return x.ListenTCP
	}
	return ""
}

// MeshConnBootstrap are configurations for bootstrapping a new mesh.
type MeshConnBootstrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enabled indicates whether or not to bootstrap a new mesh.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Domain is the domain of the mesh. Defaults to "webmesh.internal".
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// IPv4Network is the IPv4 network of the mesh. Defaults to 172.16.0.0/12.
	Ipv4Network string `protobuf:"bytes,3,opt,name=ipv4Network,proto3" json:"ipv4Network,omitempty"`
	// RBACEnabled indicates whether or not to enable RBAC on the mesh.
	RbacEnabled bool `protobuf:"varint,4,opt,name=rbacEnabled,proto3" json:"rbacEnabled,omitempty"`
	// DefaultNetworkACL is the default network ACL to use for the mesh.
	DefaultNetworkACL MeshConnBootstrap_DefaultNetworkACL `protobuf:"varint,5,opt,name=defaultNetworkACL,proto3,enum=v1.MeshConnBootstrap_DefaultNetworkACL" json:"defaultNetworkACL,omitempty"`
}

func (x *MeshConnBootstrap) Reset() {
	*x = MeshConnBootstrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshConnBootstrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshConnBootstrap) ProtoMessage() {}

func (x *MeshConnBootstrap) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshConnBootstrap.ProtoReflect.Descriptor instead.
func (*MeshConnBootstrap) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{10}
}

func (x *MeshConnBootstrap) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MeshConnBootstrap) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *MeshConnBootstrap) GetIpv4Network() string {
	if x != nil {
		return x.Ipv4Network
	}
	return ""
}

func (x *MeshConnBootstrap) GetRbacEnabled() bool {
	if x != nil {
		return x.RbacEnabled
	}
	return false
}

func (x *MeshConnBootstrap) GetDefaultNetworkACL() MeshConnBootstrap_DefaultNetworkACL {
	if x != nil {
		return x.DefaultNetworkACL
	}
	return MeshConnBootstrap_ACCEPT
}

// MeshhConnTLS are TLS configurations for a mesh connection.
type MeshConnTLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enabled indicates whether or not to use TLS.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// CACert is a base64 and PEM encoded CA certificate to use for TLS.
	CaCertData string `protobuf:"bytes,2,opt,name=caCertData,proto3" json:"caCertData,omitempty"`
	// CertData is a base64 and PEM encoded certificate to use for TLS.
	CertData string `protobuf:"bytes,3,opt,name=certData,proto3" json:"certData,omitempty"`
	// KeyData is a base64 and PEM encoded private key to use for TLS.
	KeyData string `protobuf:"bytes,4,opt,name=keyData,proto3" json:"keyData,omitempty"`
	// VerifyChainOnly indicates whether or not to only verify the
	// certificate chain.
	VerifyChainOnly bool `protobuf:"varint,5,opt,name=verifyChainOnly,proto3" json:"verifyChainOnly,omitempty"`
	// SkipVerify indicates whether or not to skip verification of the
	// server certificate.
	SkipVerify bool `protobuf:"varint,6,opt,name=skipVerify,proto3" json:"skipVerify,omitempty"`
}

func (x *MeshConnTLS) Reset() {
	*x = MeshConnTLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshConnTLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshConnTLS) ProtoMessage() {}

func (x *MeshConnTLS) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshConnTLS.ProtoReflect.Descriptor instead.
func (*MeshConnTLS) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{11}
}

func (x *MeshConnTLS) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MeshConnTLS) GetCaCertData() string {
	if x != nil {
		return x.CaCertData
	}
	return ""
}

func (x *MeshConnTLS) GetCertData() string {
	if x != nil {
		return x.CertData
	}
	return ""
}

func (x *MeshConnTLS) GetKeyData() string {
	if x != nil {
		return x.KeyData
	}
	return ""
}

func (x *MeshConnTLS) GetVerifyChainOnly() bool {
	if x != nil {
		return x.VerifyChainOnly
	}
	return false
}

func (x *MeshConnTLS) GetSkipVerify() bool {
	if x != nil {
		return x.SkipVerify
	}
	return false
}

// ConnectRequest is sent by an application to a daemon to connect to a mesh.
type ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of the connection.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{12}
}

func (x *ConnectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ConnectResponse is returned by the Connect RPC.
type ConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of this connection.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Node id is the unique identifier of the node.
	NodeID string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	// Mesh domain is the domain of the mesh.
	MeshDomain string `protobuf:"bytes,3,opt,name=meshDomain,proto3" json:"meshDomain,omitempty"`
	// IPv4Address is the IPv4 address of the node.
	Ipv4Address string `protobuf:"bytes,4,opt,name=ipv4Address,proto3" json:"ipv4Address,omitempty"`
	// IPv6Address is the IPv6 address of the node.
	Ipv6Address string `protobuf:"bytes,5,opt,name=ipv6Address,proto3" json:"ipv6Address,omitempty"`
	// IPv4Network is the IPv4 network of the mesh.
	Ipv4Network string `protobuf:"bytes,6,opt,name=ipv4Network,proto3" json:"ipv4Network,omitempty"`
	// IPv6Network is the IPv6 network of the mesh.
	Ipv6Network string `protobuf:"bytes,7,opt,name=ipv6Network,proto3" json:"ipv6Network,omitempty"`
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{13}
}

func (x *ConnectResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConnectResponse) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *ConnectResponse) GetMeshDomain() string {
	if x != nil {
		return x.MeshDomain
	}
	return ""
}

func (x *ConnectResponse) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

func (x *ConnectResponse) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

func (x *ConnectResponse) GetIpv4Network() string {
	if x != nil {
		return x.Ipv4Network
	}
	return ""
}

func (x *ConnectResponse) GetIpv6Network() string {
	if x != nil {
		return x.Ipv6Network
	}
	return ""
}

// DisconnectRequest is sent by an application to a daemon to disconnect from a mesh.
type DisconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of the connection.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DisconnectRequest) Reset() {
	*x = DisconnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRequest) ProtoMessage() {}

func (x *DisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRequest.ProtoReflect.Descriptor instead.
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{14}
}

func (x *DisconnectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// DisconnectResponse is returned by the Disconnect RPC.
type DisconnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisconnectResponse) Reset() {
	*x = DisconnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectResponse) ProtoMessage() {}

func (x *DisconnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectResponse.ProtoReflect.Descriptor instead.
func (*DisconnectResponse) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{15}
}

// MetricsRequest is sent by the application to a daemon to retrieve interface metrics for a mesh connection.
type MetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs are the unique identifiers of the connections to retrieve metrics for.
	// If not provided, metrics for all known connections will be returned.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *MetricsRequest) Reset() {
	*x = MetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsRequest) ProtoMessage() {}

func (x *MetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsRequest.ProtoReflect.Descriptor instead.
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{16}
}

func (x *MetricsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// MetricsResponse is a message containing interface metrics.
type MetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interfaces is a map of network IDs to their interface metrics.
	Interfaces map[string]*InterfaceMetrics `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetricsResponse) Reset() {
	*x = MetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponse) ProtoMessage() {}

func (x *MetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponse.ProtoReflect.Descriptor instead.
func (*MetricsResponse) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{17}
}

func (x *MetricsResponse) GetInterfaces() map[string]*InterfaceMetrics {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

// AppQueryRequest is sent by the application to a daemon to query a mesh's storage.
type AppQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of this connection.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Query is the query to execute.
	Query *QueryRequest `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *AppQueryRequest) Reset() {
	*x = AppQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppQueryRequest) ProtoMessage() {}

func (x *AppQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppQueryRequest.ProtoReflect.Descriptor instead.
func (*AppQueryRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{18}
}

func (x *AppQueryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppQueryRequest) GetQuery() *QueryRequest {
	if x != nil {
		return x.Query
	}
	return nil
}

// DropConnectionRequest is sent by the application to a daemon to drop all storage
// and information for a mesh connection.
type DropConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of this connection.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DropConnectionRequest) Reset() {
	*x = DropConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropConnectionRequest) ProtoMessage() {}

func (x *DropConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropConnectionRequest.ProtoReflect.Descriptor instead.
func (*DropConnectionRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{19}
}

func (x *DropConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// DropConnectionResponse is a message returned for a drop request.
type DropConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DropConnectionResponse) Reset() {
	*x = DropConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropConnectionResponse) ProtoMessage() {}

func (x *DropConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropConnectionResponse.ProtoReflect.Descriptor instead.
func (*DropConnectionResponse) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{20}
}

// StatusRequest is sent by the application to a daemon to retrieve the status of the daemon.
type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{21}
}

// DaemonStatus contains the information about the daemon.
type DaemonStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NodeID is the unique identifier of the daemon.
	// This is used for mesh connections from the daemon.
	NodeID string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	// PublicKey is the public key of the daemon.
	PublicKey string `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	// Description is a description of the daemon.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Version is the version of the daemon.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// GitCommit is the git commit of the daemon.
	GitCommit string `protobuf:"bytes,5,opt,name=gitCommit,proto3" json:"gitCommit,omitempty"`
	// BuildDate is the build date of the daemon.
	BuildDate string `protobuf:"bytes,6,opt,name=buildDate,proto3" json:"buildDate,omitempty"`
	// Uptime is the uptime of the daemon.
	Uptime string `protobuf:"bytes,7,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// StartedAt is the time the daemon started.
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	// Connections are a map of known connections to the daemon and their statuses.
	Connections map[string]DaemonConnStatus `protobuf:"bytes,9,rep,name=connections,proto3" json:"connections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=v1.DaemonConnStatus"`
}

func (x *DaemonStatus) Reset() {
	*x = DaemonStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_app_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaemonStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonStatus) ProtoMessage() {}

func (x *DaemonStatus) ProtoReflect() protoreflect.Message {
	mi := &file_v1_app_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonStatus.ProtoReflect.Descriptor instead.
func (*DaemonStatus) Descriptor() ([]byte, []int) {
	return file_v1_app_proto_rawDescGZIP(), []int{22}
}

func (x *DaemonStatus) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *DaemonStatus) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *DaemonStatus) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DaemonStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DaemonStatus) GetGitCommit() string {
	if x != nil {
		return x.GitCommit
	}
	return ""
}

func (x *DaemonStatus) GetBuildDate() string {
	if x != nil {
		return x.BuildDate
	}
	return ""
}

func (x *DaemonStatus) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

func (x *DaemonStatus) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *DaemonStatus) GetConnections() map[string]DaemonConnStatus {
	if x != nil {
		return x.Connections
	}
	return nil
}

var File_v1_app_proto protoreflect.FileDescriptor

var file_v1_app_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x76, 0x31, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x6b, 0x0a, 0x14, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x27,
	0x0a, 0x15, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x18, 0x40, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x3c, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x10, 0xba, 0x48, 0x0d, 0x92, 0x01, 0x0a, 0x18, 0x01, 0x22, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x59, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xb8, 0x0c, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x75,
	0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x57, 0x0a, 0x0f, 0x61,
	0x75, 0x74, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64,
	0x64, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x09, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x12, 0x21, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x4c, 0x53,
	0x52, 0x03, 0x74, 0x6c, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x08, 0x41, 0x64, 0x64,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x44, 0x44, 0x52, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x41, 0x44, 0x44, 0x52, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x5a, 0x56, 0x4f, 0x55, 0x53, 0x10, 0x02, 0x22, 0x6e,
	0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f,
	0x52, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x44, 0x41, 0x50, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44,
	0x44, 0x52, 0x53, 0x5f, 0x45, 0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45, 0x10, 0x04, 0x3a, 0xfb,
	0x06, 0xba, 0x48, 0xf7, 0x06, 0x1a, 0x93, 0x01, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3f, 0x4d, 0x75, 0x73, 0x74,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73,
	0x74, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x2e, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x2e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x20, 0x7c, 0x7c, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x61, 0x64, 0x64, 0x72, 0x73, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x1a, 0x75, 0x0a, 0x25, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x74,
	0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x54, 0x4c, 0x53, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x6d, 0x54, 0x4c, 0x53, 0x1a, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x21, 0x3d, 0x20, 0x34, 0x20, 0x7c,
	0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x1a, 0xbe, 0x01, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x45, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x61, 0x20, 0x54, 0x4c, 0x53, 0x20, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6b, 0x65, 0x79, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x6d, 0x54, 0x4c, 0x53, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x53,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20,
	0x21, 0x3d, 0x20, 0x34, 0x20, 0x7c, 0x7c, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x29,
	0x20, 0x3e, 0x20, 0x30, 0x20, 0x26, 0x26, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x74, 0x6c, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x29, 0x20, 0x3e,
	0x20, 0x30, 0x29, 0x1a, 0xe1, 0x01, 0x0a, 0x27, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x74, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x43, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x61, 0x20,
	0x54, 0x4c, 0x53, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x6f, 0x76, 0x65, 0x72,
	0x20, 0x54, 0x4c, 0x53, 0x1a, 0x71, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x7c, 0x7c, 0x20,
	0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x4c, 0x53, 0x20, 0x7c, 0x7c, 0x20, 0x28, 0x73, 0x69, 0x7a,
	0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x20, 0x26, 0x26, 0x20, 0x73, 0x69, 0x7a, 0x65,
	0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x29, 0x1a, 0xc2, 0x01, 0x0a, 0x26, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x6d, 0x74, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x43, 0x41, 0x12, 0x3e, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x20, 0x61, 0x20, 0x54, 0x4c, 0x53, 0x20, 0x43, 0x41, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x69,
	0x6e, 0x67, 0x20, 0x6d, 0x54, 0x4c, 0x53, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41,
	0x50, 0x49, 0x1a, 0x58, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x21, 0x3d, 0x20, 0x34, 0x20, 0x7c, 0x7c, 0x20, 0x73,
	0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x2e, 0x63, 0x61, 0x43,
	0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x22, 0xac, 0x01, 0x0a,
	0x12, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x44, 0x4e, 0x53, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x44, 0x4e, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xec, 0x07, 0x0a, 0x10,
	0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x4c, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x4c, 0x53, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x64, 0x64, 0x72, 0x73, 0x12, 0x3f,
	0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x3f, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x16,
	0xba, 0x48, 0x13, 0x92, 0x01, 0x10, 0x18, 0x01, 0x22, 0x0c, 0x82, 0x01, 0x09, 0x1a, 0x07, 0x01,
	0x02, 0x03, 0x04, 0x05, 0x07, 0x0b, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x3a, 0xe1, 0x04, 0xba, 0x48, 0xdd, 0x04, 0x1a, 0xa0, 0x01,
	0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3e, 0x4d, 0x75,
	0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x61, 0x74, 0x20, 0x6c, 0x65,
	0x61, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x20, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x1a, 0x42, 0x21, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x7c, 0x7c, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x62, 0x50, 0x32, 0x50,
	0x20, 0x7c, 0x7c, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x29, 0x20, 0x3e, 0x20, 0x30,
	0x1a, 0x92, 0x01, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x12,
	0x32, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x65, 0x20, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x69, 0x62,
	0x70, 0x32, 0x70, 0x1a, 0x40, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x20, 0x7c, 0x7c, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x30,
	0x20, 0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x69, 0x62, 0x50, 0x32, 0x50, 0x1a, 0xae, 0x01, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x39, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x6d, 0x54, 0x4c, 0x53, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x49, 0x44, 0x20, 0x61, 0x72, 0x65, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x55, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x7c,
	0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x3d, 0x3d, 0x20, 0x33, 0x20, 0x7c,
	0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x20, 0x3d, 0x3d, 0x20, 0x34, 0x1a, 0x72, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x54, 0x4c, 0x53, 0x12, 0x22, 0x43,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x54, 0x4c,
	0x53, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x54, 0x4c,
	0x53, 0x1a, 0x37, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x20, 0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x20, 0x21, 0x3d, 0x20, 0x34, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x4c, 0x53, 0x22, 0x66, 0x0a, 0x0e, 0x4d, 0x65,
	0x73, 0x68, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x55, 0x44, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x55, 0x44, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x43,
	0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54,
	0x43, 0x50, 0x22, 0xba, 0x04, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x42,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x70,
	0x76, 0x34, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x70, 0x76, 0x34, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x62, 0x61, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x72, 0x62, 0x61, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5f,
	0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x41, 0x43, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41,
	0x43, 0x4c, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x43, 0x4c, 0x22,
	0x29, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x41, 0x43, 0x4c, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x01, 0x3a, 0xa2, 0x02, 0xba, 0x48, 0x9e,
	0x02, 0x1a, 0x7f, 0x0a, 0x17, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x43, 0x21,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x7c, 0x7c, 0x20,
	0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x29, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x28, 0x29, 0x1a, 0x9a, 0x01, 0x0a, 0x1a, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x50, 0x76, 0x34, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x26, 0x49, 0x50, 0x76, 0x34, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20,
	0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20,
	0x49, 0x50, 0x76, 0x34, 0x20, 0x43, 0x49, 0x44, 0x52, 0x1a, 0x54, 0x21, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x7c, 0x7c, 0x20, 0x73, 0x69, 0x7a, 0x65,
	0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x70, 0x76, 0x34, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x69, 0x70, 0x76, 0x34, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x69, 0x73, 0x49, 0x70,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x28, 0x34, 0x2c, 0x20, 0x74, 0x72, 0x75, 0x65, 0x29, 0x22,
	0xc7, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x4c, 0x53, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x43,
	0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x28, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x6e,
	0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6b, 0x69,
	0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0x2b, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01,
	0x18, 0x40, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x68, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76,
	0x34, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x36,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x70, 0x76, 0x36, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x31, 0x0a, 0x11, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x09,
	0xc8, 0x01, 0x01, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a,
	0x12, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x10, 0xba, 0x48, 0x0d, 0x92, 0x01, 0x0a, 0x18, 0x01, 0x22, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x40, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x0f, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x1a, 0x53, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01, 0x01, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x40, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x35, 0x0a, 0x15, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01, 0x01, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x40, 0x52, 0x02, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x72, 0x6f, 0x70, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xa9, 0x03, 0x0a, 0x0c, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x54, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x47,
	0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c,
	0x44, 0x41, 0x50, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x44, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x4d, 0x54, 0x4c, 0x53, 0x10, 0x04, 0x2a, 0x43, 0x0a, 0x10, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x32, 0xc3, 0x04, 0x0a,
	0x09, 0x41, 0x70, 0x70, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0d, 0x50, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x44, 0x72,
	0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x6f,
	0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x12,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x2f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x42, 0x64, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x41, 0x70,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x72, 0x6f, 0x6a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x65, 0x62, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x56, 0x58, 0x58, 0xaa, 0x02, 0x02, 0x56, 0x31, 0xca, 0x02, 0x02,
	0x56, 0x31, 0xe2, 0x02, 0x0e, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x02, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_app_proto_rawDescOnce sync.Once
	file_v1_app_proto_rawDescData = file_v1_app_proto_rawDesc
)

func file_v1_app_proto_rawDescGZIP() []byte {
	file_v1_app_proto_rawDescOnce.Do(func() {
		file_v1_app_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_app_proto_rawDescData)
	})
	return file_v1_app_proto_rawDescData
}

var file_v1_app_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_v1_app_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_v1_app_proto_goTypes = []interface{}{
	(NetworkAuthMethod)(0),                   // 0: v1.NetworkAuthMethod
	(DaemonConnStatus)(0),                    // 1: v1.DaemonConnStatus
	(ConnectionParameters_AddrType)(0),       // 2: v1.ConnectionParameters.AddrType
	(ConnectionParameters_AuthHeader)(0),     // 3: v1.ConnectionParameters.AuthHeader
	(MeshConnBootstrap_DefaultNetworkACL)(0), // 4: v1.MeshConnBootstrap.DefaultNetworkACL
	(*PutConnectionRequest)(nil),             // 5: v1.PutConnectionRequest
	(*PutConnectionResponse)(nil),            // 6: v1.PutConnectionResponse
	(*GetConnectionRequest)(nil),             // 7: v1.GetConnectionRequest
	(*GetConnectionResponse)(nil),            // 8: v1.GetConnectionResponse
	(*ListConnectionsRequest)(nil),           // 9: v1.ListConnectionsRequest
	(*ListConnectionsResponse)(nil),          // 10: v1.ListConnectionsResponse
	(*ConnectionParameters)(nil),             // 11: v1.ConnectionParameters
	(*MeshConnNetworking)(nil),               // 12: v1.MeshConnNetworking
	(*MeshConnServices)(nil),                 // 13: v1.MeshConnServices
	(*MeshDNSService)(nil),                   // 14: v1.MeshDNSService
	(*MeshConnBootstrap)(nil),                // 15: v1.MeshConnBootstrap
	(*MeshConnTLS)(nil),                      // 16: v1.MeshConnTLS
	(*ConnectRequest)(nil),                   // 17: v1.ConnectRequest
	(*ConnectResponse)(nil),                  // 18: v1.ConnectResponse
	(*DisconnectRequest)(nil),                // 19: v1.DisconnectRequest
	(*DisconnectResponse)(nil),               // 20: v1.DisconnectResponse
	(*MetricsRequest)(nil),                   // 21: v1.MetricsRequest
	(*MetricsResponse)(nil),                  // 22: v1.MetricsResponse
	(*AppQueryRequest)(nil),                  // 23: v1.AppQueryRequest
	(*DropConnectionRequest)(nil),            // 24: v1.DropConnectionRequest
	(*DropConnectionResponse)(nil),           // 25: v1.DropConnectionResponse
	(*StatusRequest)(nil),                    // 26: v1.StatusRequest
	(*DaemonStatus)(nil),                     // 27: v1.DaemonStatus
	nil,                                      // 28: v1.ListConnectionsResponse.ConnectionsEntry
	nil,                                      // 29: v1.ConnectionParameters.AuthCredentialsEntry
	nil,                                      // 30: v1.MetricsResponse.InterfacesEntry
	nil,                                      // 31: v1.DaemonStatus.ConnectionsEntry
	(*MeshNode)(nil),                         // 32: v1.MeshNode
	(Feature)(0),                             // 33: v1.Feature
	(*QueryRequest)(nil),                     // 34: v1.QueryRequest
	(*timestamppb.Timestamp)(nil),            // 35: google.protobuf.Timestamp
	(*InterfaceMetrics)(nil),                 // 36: v1.InterfaceMetrics
	(*QueryResponse)(nil),                    // 37: v1.QueryResponse
}
var file_v1_app_proto_depIdxs = []int32{
	11, // 0: v1.PutConnectionRequest.parameters:type_name -> v1.ConnectionParameters
	1,  // 1: v1.GetConnectionResponse.status:type_name -> v1.DaemonConnStatus
	11, // 2: v1.GetConnectionResponse.parameters:type_name -> v1.ConnectionParameters
	32, // 3: v1.GetConnectionResponse.node:type_name -> v1.MeshNode
	28, // 4: v1.ListConnectionsResponse.connections:type_name -> v1.ListConnectionsResponse.ConnectionsEntry
	0,  // 5: v1.ConnectionParameters.authMethod:type_name -> v1.NetworkAuthMethod
	29, // 6: v1.ConnectionParameters.authCredentials:type_name -> v1.ConnectionParameters.AuthCredentialsEntry
	2,  // 7: v1.ConnectionParameters.addrType:type_name -> v1.ConnectionParameters.AddrType
	12, // 8: v1.ConnectionParameters.networking:type_name -> v1.MeshConnNetworking
	13, // 9: v1.ConnectionParameters.services:type_name -> v1.MeshConnServices
	15, // 10: v1.ConnectionParameters.bootstrap:type_name -> v1.MeshConnBootstrap
	16, // 11: v1.ConnectionParameters.tls:type_name -> v1.MeshConnTLS
	0,  // 12: v1.MeshConnServices.authMethod:type_name -> v1.NetworkAuthMethod
	33, // 13: v1.MeshConnServices.features:type_name -> v1.Feature
	14, // 14: v1.MeshConnServices.dns:type_name -> v1.MeshDNSService
	4,  // 15: v1.MeshConnBootstrap.defaultNetworkACL:type_name -> v1.MeshConnBootstrap.DefaultNetworkACL
	30, // 16: v1.MetricsResponse.interfaces:type_name -> v1.MetricsResponse.InterfacesEntry
	34, // 17: v1.AppQueryRequest.query:type_name -> v1.QueryRequest
	35, // 18: v1.DaemonStatus.startedAt:type_name -> google.protobuf.Timestamp
	31, // 19: v1.DaemonStatus.connections:type_name -> v1.DaemonStatus.ConnectionsEntry
	8,  // 20: v1.ListConnectionsResponse.ConnectionsEntry.value:type_name -> v1.GetConnectionResponse
	36, // 21: v1.MetricsResponse.InterfacesEntry.value:type_name -> v1.InterfaceMetrics
	1,  // 22: v1.DaemonStatus.ConnectionsEntry.value:type_name -> v1.DaemonConnStatus
	5,  // 23: v1.AppDaemon.PutConnection:input_type -> v1.PutConnectionRequest
	7,  // 24: v1.AppDaemon.GetConnection:input_type -> v1.GetConnectionRequest
	24, // 25: v1.AppDaemon.DropConnection:input_type -> v1.DropConnectionRequest
	9,  // 26: v1.AppDaemon.ListConnections:input_type -> v1.ListConnectionsRequest
	17, // 27: v1.AppDaemon.Connect:input_type -> v1.ConnectRequest
	19, // 28: v1.AppDaemon.Disconnect:input_type -> v1.DisconnectRequest
	21, // 29: v1.AppDaemon.Metrics:input_type -> v1.MetricsRequest
	23, // 30: v1.AppDaemon.Query:input_type -> v1.AppQueryRequest
	26, // 31: v1.AppDaemon.Status:input_type -> v1.StatusRequest
	6,  // 32: v1.AppDaemon.PutConnection:output_type -> v1.PutConnectionResponse
	8,  // 33: v1.AppDaemon.GetConnection:output_type -> v1.GetConnectionResponse
	25, // 34: v1.AppDaemon.DropConnection:output_type -> v1.DropConnectionResponse
	10, // 35: v1.AppDaemon.ListConnections:output_type -> v1.ListConnectionsResponse
	18, // 36: v1.AppDaemon.Connect:output_type -> v1.ConnectResponse
	20, // 37: v1.AppDaemon.Disconnect:output_type -> v1.DisconnectResponse
	22, // 38: v1.AppDaemon.Metrics:output_type -> v1.MetricsResponse
	37, // 39: v1.AppDaemon.Query:output_type -> v1.QueryResponse
	27, // 40: v1.AppDaemon.Status:output_type -> v1.DaemonStatus
	32, // [32:41] is the sub-list for method output_type
	23, // [23:32] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_v1_app_proto_init() }
func file_v1_app_proto_init() {
	if File_v1_app_proto != nil {
		return
	}
	file_v1_mesh_proto_init()
	file_v1_node_proto_init()
	file_v1_storage_query_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_app_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshConnNetworking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshConnServices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshDNSService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshConnBootstrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshConnTLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_app_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaemonStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_app_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_app_proto_goTypes,
		DependencyIndexes: file_v1_app_proto_depIdxs,
		EnumInfos:         file_v1_app_proto_enumTypes,
		MessageInfos:      file_v1_app_proto_msgTypes,
	}.Build()
	File_v1_app_proto = out.File
	file_v1_app_proto_rawDesc = nil
	file_v1_app_proto_goTypes = nil
	file_v1_app_proto_depIdxs = nil
}
