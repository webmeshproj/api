// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/members.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on JoinRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JoinRequestMultiError, or
// nil if none found.
func (m *JoinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PublicKey

	// no validation rules for PrimaryEndpoint

	// no validation rules for ZoneAwarenessID

	// no validation rules for AssignIPv4

	// no validation rules for PreferStorageIPv6

	// no validation rules for AsVoter

	// no validation rules for AsObserver

	// no validation rules for DirectPeers

	for idx, item := range m.GetFeatures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JoinRequestValidationError{
						field:  fmt.Sprintf("Features[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JoinRequestValidationError{
						field:  fmt.Sprintf("Features[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JoinRequestValidationError{
					field:  fmt.Sprintf("Features[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return JoinRequestMultiError(errors)
	}

	return nil
}

// JoinRequestMultiError is an error wrapping multiple validation errors
// returned by JoinRequest.ValidateAll() if the designated constraints aren't met.
type JoinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinRequestMultiError) AllErrors() []error { return m }

// JoinRequestValidationError is the validation error returned by
// JoinRequest.Validate if the designated constraints aren't met.
type JoinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinRequestValidationError) ErrorName() string { return "JoinRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinRequestValidationError{}

// Validate checks the field values on JoinResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JoinResponseMultiError, or
// nil if none found.
func (m *JoinResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddressIPv4

	// no validation rules for AddressIPv6

	// no validation rules for NetworkIPv4

	// no validation rules for NetworkIPv6

	for idx, item := range m.GetPeers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JoinResponseValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JoinResponseValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JoinResponseValidationError{
					field:  fmt.Sprintf("Peers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MeshDomain

	if len(errors) > 0 {
		return JoinResponseMultiError(errors)
	}

	return nil
}

// JoinResponseMultiError is an error wrapping multiple validation errors
// returned by JoinResponse.ValidateAll() if the designated constraints aren't met.
type JoinResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinResponseMultiError) AllErrors() []error { return m }

// JoinResponseValidationError is the validation error returned by
// JoinResponse.Validate if the designated constraints aren't met.
type JoinResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinResponseValidationError) ErrorName() string { return "JoinResponseValidationError" }

// Error satisfies the builtin error interface
func (e JoinResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinResponseValidationError{}

// Validate checks the field values on UpdateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRequestMultiError, or
// nil if none found.
func (m *UpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PublicKey

	// no validation rules for PrimaryEndpoint

	// no validation rules for ZoneAwarenessID

	// no validation rules for AsVoter

	for idx, item := range m.GetFeatures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateRequestValidationError{
						field:  fmt.Sprintf("Features[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateRequestValidationError{
						field:  fmt.Sprintf("Features[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateRequestValidationError{
					field:  fmt.Sprintf("Features[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateRequestMultiError(errors)
	}

	return nil
}

// UpdateRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRequestMultiError) AllErrors() []error { return m }

// UpdateRequestValidationError is the validation error returned by
// UpdateRequest.Validate if the designated constraints aren't met.
type UpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRequestValidationError) ErrorName() string { return "UpdateRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRequestValidationError{}

// Validate checks the field values on UpdateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateResponseMultiError,
// or nil if none found.
func (m *UpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateResponseMultiError(errors)
	}

	return nil
}

// UpdateResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResponseMultiError) AllErrors() []error { return m }

// UpdateResponseValidationError is the validation error returned by
// UpdateResponse.Validate if the designated constraints aren't met.
type UpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResponseValidationError) ErrorName() string { return "UpdateResponseValidationError" }

// Error satisfies the builtin error interface
func (e UpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResponseValidationError{}

// Validate checks the field values on WireGuardPeer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WireGuardPeer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WireGuardPeer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WireGuardPeerMultiError, or
// nil if none found.
func (m *WireGuardPeer) ValidateAll() error {
	return m.validate(true)
}

func (m *WireGuardPeer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WireGuardPeerValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WireGuardPeerValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WireGuardPeerValidationError{
				field:  "Node",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Proto

	if len(errors) > 0 {
		return WireGuardPeerMultiError(errors)
	}

	return nil
}

// WireGuardPeerMultiError is an error wrapping multiple validation errors
// returned by WireGuardPeer.ValidateAll() if the designated constraints
// aren't met.
type WireGuardPeerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WireGuardPeerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WireGuardPeerMultiError) AllErrors() []error { return m }

// WireGuardPeerValidationError is the validation error returned by
// WireGuardPeer.Validate if the designated constraints aren't met.
type WireGuardPeerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WireGuardPeerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WireGuardPeerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WireGuardPeerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WireGuardPeerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WireGuardPeerValidationError) ErrorName() string { return "WireGuardPeerValidationError" }

// Error satisfies the builtin error interface
func (e WireGuardPeerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWireGuardPeer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WireGuardPeerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WireGuardPeerValidationError{}

// Validate checks the field values on LeaveRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LeaveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LeaveRequestMultiError, or
// nil if none found.
func (m *LeaveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return LeaveRequestMultiError(errors)
	}

	return nil
}

// LeaveRequestMultiError is an error wrapping multiple validation errors
// returned by LeaveRequest.ValidateAll() if the designated constraints aren't met.
type LeaveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveRequestMultiError) AllErrors() []error { return m }

// LeaveRequestValidationError is the validation error returned by
// LeaveRequest.Validate if the designated constraints aren't met.
type LeaveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveRequestValidationError) ErrorName() string { return "LeaveRequestValidationError" }

// Error satisfies the builtin error interface
func (e LeaveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveRequestValidationError{}

// Validate checks the field values on LeaveResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LeaveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LeaveResponseMultiError, or
// nil if none found.
func (m *LeaveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LeaveResponseMultiError(errors)
	}

	return nil
}

// LeaveResponseMultiError is an error wrapping multiple validation errors
// returned by LeaveResponse.ValidateAll() if the designated constraints
// aren't met.
type LeaveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveResponseMultiError) AllErrors() []error { return m }

// LeaveResponseValidationError is the validation error returned by
// LeaveResponse.Validate if the designated constraints aren't met.
type LeaveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveResponseValidationError) ErrorName() string { return "LeaveResponseValidationError" }

// Error satisfies the builtin error interface
func (e LeaveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveResponseValidationError{}

// Validate checks the field values on StorageConsensusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageConsensusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageConsensusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageConsensusRequestMultiError, or nil if none found.
func (m *StorageConsensusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageConsensusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StorageConsensusRequestMultiError(errors)
	}

	return nil
}

// StorageConsensusRequestMultiError is an error wrapping multiple validation
// errors returned by StorageConsensusRequest.ValidateAll() if the designated
// constraints aren't met.
type StorageConsensusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageConsensusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageConsensusRequestMultiError) AllErrors() []error { return m }

// StorageConsensusRequestValidationError is the validation error returned by
// StorageConsensusRequest.Validate if the designated constraints aren't met.
type StorageConsensusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageConsensusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageConsensusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageConsensusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageConsensusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageConsensusRequestValidationError) ErrorName() string {
	return "StorageConsensusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StorageConsensusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageConsensusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageConsensusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageConsensusRequestValidationError{}

// Validate checks the field values on StorageConsensusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StorageConsensusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageConsensusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StorageConsensusResponseMultiError, or nil if none found.
func (m *StorageConsensusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageConsensusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StorageConsensusResponseValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StorageConsensusResponseValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StorageConsensusResponseValidationError{
					field:  fmt.Sprintf("Servers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StorageConsensusResponseMultiError(errors)
	}

	return nil
}

// StorageConsensusResponseMultiError is an error wrapping multiple validation
// errors returned by StorageConsensusResponse.ValidateAll() if the designated
// constraints aren't met.
type StorageConsensusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageConsensusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageConsensusResponseMultiError) AllErrors() []error { return m }

// StorageConsensusResponseValidationError is the validation error returned by
// StorageConsensusResponse.Validate if the designated constraints aren't met.
type StorageConsensusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageConsensusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageConsensusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageConsensusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageConsensusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageConsensusResponseValidationError) ErrorName() string {
	return "StorageConsensusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StorageConsensusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageConsensusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageConsensusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageConsensusResponseValidationError{}

// Validate checks the field values on StorageServer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StorageServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StorageServer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StorageServerMultiError, or
// nil if none found.
func (m *StorageServer) ValidateAll() error {
	return m.validate(true)
}

func (m *StorageServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Suffrage

	// no validation rules for PublicKey

	// no validation rules for Address

	if len(errors) > 0 {
		return StorageServerMultiError(errors)
	}

	return nil
}

// StorageServerMultiError is an error wrapping multiple validation errors
// returned by StorageServer.ValidateAll() if the designated constraints
// aren't met.
type StorageServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StorageServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StorageServerMultiError) AllErrors() []error { return m }

// StorageServerValidationError is the validation error returned by
// StorageServer.Validate if the designated constraints aren't met.
type StorageServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StorageServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StorageServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StorageServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StorageServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StorageServerValidationError) ErrorName() string { return "StorageServerValidationError" }

// Error satisfies the builtin error interface
func (e StorageServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStorageServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StorageServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StorageServerValidationError{}

// Validate checks the field values on SubscribePeersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribePeersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribePeersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribePeersRequestMultiError, or nil if none found.
func (m *SubscribePeersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribePeersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SubscribePeersRequestMultiError(errors)
	}

	return nil
}

// SubscribePeersRequestMultiError is an error wrapping multiple validation
// errors returned by SubscribePeersRequest.ValidateAll() if the designated
// constraints aren't met.
type SubscribePeersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribePeersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribePeersRequestMultiError) AllErrors() []error { return m }

// SubscribePeersRequestValidationError is the validation error returned by
// SubscribePeersRequest.Validate if the designated constraints aren't met.
type SubscribePeersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribePeersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribePeersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribePeersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribePeersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribePeersRequestValidationError) ErrorName() string {
	return "SubscribePeersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribePeersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribePeersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribePeersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribePeersRequestValidationError{}

// Validate checks the field values on PeerConfigurations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PeerConfigurations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PeerConfigurations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PeerConfigurationsMultiError, or nil if none found.
func (m *PeerConfigurations) ValidateAll() error {
	return m.validate(true)
}

func (m *PeerConfigurations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPeers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PeerConfigurationsValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PeerConfigurationsValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PeerConfigurationsValidationError{
					field:  fmt.Sprintf("Peers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PeerConfigurationsMultiError(errors)
	}

	return nil
}

// PeerConfigurationsMultiError is an error wrapping multiple validation errors
// returned by PeerConfigurations.ValidateAll() if the designated constraints
// aren't met.
type PeerConfigurationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PeerConfigurationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PeerConfigurationsMultiError) AllErrors() []error { return m }

// PeerConfigurationsValidationError is the validation error returned by
// PeerConfigurations.Validate if the designated constraints aren't met.
type PeerConfigurationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeerConfigurationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeerConfigurationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeerConfigurationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeerConfigurationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeerConfigurationsValidationError) ErrorName() string {
	return "PeerConfigurationsValidationError"
}

// Error satisfies the builtin error interface
func (e PeerConfigurationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeerConfigurations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeerConfigurationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeerConfigurationsValidationError{}
