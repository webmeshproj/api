/**
 * Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{{ $templateName := .TemplateName -}}
{{ $typesRoot := .Spec.TypesPath -}}
import { PromiseClient, StreamResponse, CallOptions } from "@connectrpc/connect";
import { AppDaemon } from "{{ $typesRoot }}/app_connect.js";
{{ range $file, $types := .Spec.Imports -}}
import { {{ join $types }} } from "{{ $typesRoot }}/{{ $file }}.js";
{{ end -}}
import { 
	QueryRequest_QueryCommand,
	QueryRequest_QueryType,
	QueryRequest,
	QueryResponse
} from "{{ $typesRoot }}/storage_query_pb.js";

/**
 * AppDaemonClient is the interface for working with an AppDaemon over gRPC.
 *
 * @generated From {{ $templateName }}
 */
export type AppDaemonClient = PromiseClient<typeof AppDaemon>;

/**
 * TODO: Allow the below interfaces to be constructed with a plugin query stream as well.
 */
{{ range .Spec.Interfaces }}
{{- $name := .Name }}
{{- $queryType := .QueryType }}
/**
 * {{ $name }} is the interface for working with {{ $name }}s over the AppDaemon query RPC.
 *
 * @generated From {{ $templateName }}
 */
export class {{ $name }}s {
	/**
	 * @param client - The client to use for RPC calls.
	 * @param connID - The connection ID to use for RPC calls.
	 */
	constructor(
		private readonly client: AppDaemonClient,
		private readonly connID: string
	) {}

	/**
	 * Queries the AppDaemon for {{ $name }}s.
	 *
	 * @param query - The query to run.
	 * @returns The results of the query.
	 */
	private query(query: QueryRequest): Promise<QueryResponse> {
		return new Promise((resolve, reject) => {
			this.client.query({
				id: this.connID,
				query: query
			}).then((res: QueryResponse) => {
				if (res.error.length > 0) {
					reject(new Error(res.error))
					return
				}
				resolve(res)
			}).catch((err: Error) => {
				reject(err)
			})
		});
	}

	/**
	 * Returns the {{ $name }} with the given {{ andJoin .Identifiers }}.
	 *
	 {{ range $id, $description := .Identifiers -}}
	 * @param {{ $id }} - {{ $description }}.
	 {{ end -}}
	 * @returns The {{ $name }} with the given {{ andJoin .Identifiers }}.
	 */
	get({{ stringParams .Identifiers }}): Promise<{{ $name }}> {
		return new Promise((resolve, reject) => {
			this.query(new QueryRequest({
				command: QueryRequest_QueryCommand.GET,
				type: QueryRequest_QueryType.{{ $queryType }},
				query: `{{ queryString .Identifiers }}`,
			})).then((res: QueryResponse) => {
				if (res.items.length == 0) {
					reject(new Error("{{ $name }} not found"))
					return
				}
				resolve({{ $name }}.fromJson(res.items[0].toString()))
			}).catch((err: Error) => {
				reject(err)
			})
		});
	}
	{{ range $id, $description := .ExtraGetIdentifiers }}
	/**
	 * Returns the {{ $name }} with the given {{ $id }}.
	 *
	 * @param {{ $id }} - {{ $description }}.
	 * @returns The {{ $name }} with the given {{ $id }}.
	 */
	getBy{{ title $id }}({{ stringParams $id }}): Promise<{{ $name }}> {
		return new Promise((resolve, reject) => {
			this.query(new QueryRequest({
				command: QueryRequest_QueryCommand.GET,
				type: QueryRequest_QueryType.{{ $queryType }},
				query: `{{ queryString $id }}`,
			})).then((res: QueryResponse) => {
				if (res.error.length > 0) {
					reject(new Error(res.error))
					return
				}
				if (res.items.length == 0) {
					reject(new Error("{{ $name }} not found"))
					return
				}
				resolve({{ $name }}.fromJson(res.items[0].toString()))
			}).catch((err: Error) => {
				reject(err)
			})
		});
	}
	{{ end }}
	/**
	 * Deletes the {{ $name }} with the given {{ andJoin .Identifiers }}.
	 *
	 {{ range $id, $description := .Identifiers -}}
	 * @param {{ $id }} - {{ $description }}.
	 {{ end -}}
	 */
	delete({{ stringParams .Identifiers }}): Promise<void> {
		return new Promise((resolve, reject) => {
			this.query(new QueryRequest({
				command: QueryRequest_QueryCommand.DELETE,
				type: QueryRequest_QueryType.{{ $queryType }},
				query: `{{ queryString .Identifiers }}`,
			})).then((res: QueryResponse) => {
				if (res.error.length > 0) {
					reject(new Error(res.error))
					return
				}
				resolve()
			}).catch((err: Error) => {
				reject(err)
			})
		});
	}

	/**
	 * Returns all {{ $name }}s.
	 *
	 * @returns All {{ $name }}s known to the AppDaemon.
	 */
	list(): Promise<{{ $name }}[]> {
		return new Promise((resolve, reject) => {
			this.query(new QueryRequest({
				command: QueryRequest_QueryCommand.LIST,
				type: QueryRequest_QueryType.{{ $queryType }},
			})).then((res: QueryResponse) => {
				if (res.error.length > 0) {
					reject(new Error(res.error))
					return
				}
				resolve(res.items.map((item) => {{ $name }}.fromJson(item.toString())))
			}).catch((err: Error) => {
				reject(err)
			})
		});
	}
	{{ range $id, $description := .ExtraListIdentifiers }}
	/**
	 * Returns the {{ $name }}s with the given {{ $id }}.
	 *
	 * @param {{ $id }} - {{ $description }}
	 * @returns Any {{ $name }}s found with the given {{ $id }}.
	 */
	listBy{{ title $id }}({{ stringParams $id }}): Promise<{{ $name }}[]> {
		return new Promise((resolve, reject) => {
			this.query(new QueryRequest({
				command: QueryRequest_QueryCommand.LIST,
				type: QueryRequest_QueryType.{{ $queryType }},
				query: `{{ queryString $id }}`,
			})).then((res: QueryResponse) => {
				if (res.error.length > 0) {
					reject(new Error(res.error))
					return
				}
				resolve(res.items.map((item) => {{ $name }}.fromJson(item.toString())))
			}).catch((err: Error) => {
				reject(err)
			})
		});
	}
	{{ end }}
	/**
	 * Puts the given {{ $name }}.
	 *
	 * @param obj - The {{ $name }} to put into the mesh storage.
	 */
	put(obj: {{ $name }}): Promise<void> {
		return new Promise((resolve, reject) => {
			const enc = new TextEncoder();
			this.query(new QueryRequest({
				command: QueryRequest_QueryCommand.PUT,
				type: QueryRequest_QueryType.{{ $queryType }},
				item: enc.encode(obj.toJsonString()),
			})).then((res: QueryResponse) => {
				if (res.error.length > 0) {
					reject(new Error(res.error))
					return
				}
				resolve()
			}).catch((err: Error) => {
				reject(err)
			})
		});
	}
}
{{- end }}
