{{- $typesRoot := .Spec.TypesPath -}}
import { PromiseClient } from "@connectrpc/connect";
import { AppDaemon } from "{{ $typesRoot }}/app_connect.js";
{{ range $file, $types := .Spec.Imports -}}
import { {{ join $types "," }} } from "{{ $typesRoot }}/{{ $file }}.js";
{{ end -}}
import { 
	QueryRequest_QueryCommand,
	QueryRequest_QueryType,
} from "{{ $typesRoot }}/storage_query_pb.js";

{{ range .Spec.Interfaces }}
export class {{ .Name }}s {
	constructor(private readonly client: PromiseClient<AppDaemon>, private readonly connID: string) {}

	get(id: string): Promise<{{ .Name }}> {
		return new Promise((resolve, reject) => {
			this.client.query({
				id: this.connID,
				query: {
					command: QueryRequest_QueryCommand.GET,
					type: QueryRequest_QueryType.{{ .QueryType }},
					query: 'id=' + id,
				}
			}).then((res) => {
				resolve({{ .Name }}.fromJson(res.items[0]))
			}).catch((err) => {
				reject(err)
			})
		});
	},

	list(): Promise<{{ .Name }}[]>;

	put(obj: {{ .Name }}): Promise<{{ .Name }}>;

	delete(id: string): Promise<void>;
}
{{- end }}
