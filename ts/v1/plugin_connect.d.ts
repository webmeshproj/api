//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-connect-es v1.1.2
// @generated from file v1/plugin.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Empty, MethodKind } from "@bufbuild/protobuf";
import { AllocatedIP, AllocateIPRequest, AuthenticationRequest, AuthenticationResponse, Event, PluginConfiguration, PluginInfo, ReleaseIPRequest } from "./plugin_pb.js";
import { QueryRequest, QueryResponse } from "./storage_query_pb.js";

/**
 * Plugin is the general service definition for a Webmesh plugin.
 * It must be implemented by all plugins.
 *
 * @generated from service v1.Plugin
 */
export declare const Plugin: {
  readonly typeName: "v1.Plugin",
  readonly methods: {
    /**
     * GetInfo returns the information for the plugin.
     *
     * @generated from rpc v1.Plugin.GetInfo
     */
    readonly getInfo: {
      readonly name: "GetInfo",
      readonly I: typeof Empty,
      readonly O: typeof PluginInfo,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Configure starts and configures the plugin.
     *
     * @generated from rpc v1.Plugin.Configure
     */
    readonly configure: {
      readonly name: "Configure",
      readonly I: typeof PluginConfiguration,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Close closes the plugin. It is called when the node is shutting down.
     *
     * @generated from rpc v1.Plugin.Close
     */
    readonly close: {
      readonly name: "Close",
      readonly I: typeof Empty,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
  }
};

/**
 * AuthPlugin is the service definition for a Webmesh auth plugin.
 *
 * @generated from service v1.AuthPlugin
 */
export declare const AuthPlugin: {
  readonly typeName: "v1.AuthPlugin",
  readonly methods: {
    /**
     * Authenticate authenticates a request.
     *
     * @generated from rpc v1.AuthPlugin.Authenticate
     */
    readonly authenticate: {
      readonly name: "Authenticate",
      readonly I: typeof AuthenticationRequest,
      readonly O: typeof AuthenticationResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

/**
 * WatchPlugin is the service definition for a Webmesh watch plugin.
 *
 * @generated from service v1.WatchPlugin
 */
export declare const WatchPlugin: {
  readonly typeName: "v1.WatchPlugin",
  readonly methods: {
    /**
     * Emit handles a watch event.
     *
     * @generated from rpc v1.WatchPlugin.Emit
     */
    readonly emit: {
      readonly name: "Emit",
      readonly I: typeof Event,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
  }
};

/**
 * IPAMPlugin is the service definition for a Webmesh IPAM plugin.
 *
 * @generated from service v1.IPAMPlugin
 */
export declare const IPAMPlugin: {
  readonly typeName: "v1.IPAMPlugin",
  readonly methods: {
    /**
     * Allocate allocates an IP for a node.
     *
     * @generated from rpc v1.IPAMPlugin.Allocate
     */
    readonly allocate: {
      readonly name: "Allocate",
      readonly I: typeof AllocateIPRequest,
      readonly O: typeof AllocatedIP,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Release releases an IP for a node.
     *
     * @generated from rpc v1.IPAMPlugin.Release
     */
    readonly release: {
      readonly name: "Release",
      readonly I: typeof ReleaseIPRequest,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
  }
};

/**
 * StorageQuerierPlugin is the service definition for a Webmesh storage querier plugin.
 *
 * @generated from service v1.StorageQuerierPlugin
 */
export declare const StorageQuerierPlugin: {
  readonly typeName: "v1.StorageQuerierPlugin",
  readonly methods: {
    /**
     * InjectQuerier is a stream opened by the node to faciliate read operations
     * against the mesh state. The signature is misleading, but it is required to be 
     * able to stream the query results back to the node. The node will open a stream 
     * to the plugin and send a PluginQueryResult message for every query that is 
     * received.
     *
     * @generated from rpc v1.StorageQuerierPlugin.InjectQuerier
     */
    readonly injectQuerier: {
      readonly name: "InjectQuerier",
      readonly I: typeof QueryResponse,
      readonly O: typeof QueryRequest,
      readonly kind: MethodKind.BiDiStreaming,
    },
  }
};

