//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-connect-es v1.1.2
// @generated from file v1/node.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { DataChannelNegotiation, GetStatusRequest, Status, WebRTCSignal } from "./node_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Node is the service exposed on every node in the mesh to communicate network
 * information amongst themselves and facilitate inbound/outbound connections.
 *
 * @generated from service v1.Node
 */
export declare const Node: {
  readonly typeName: "v1.Node",
  readonly methods: {
    /**
     * GetStatus gets the status of a node in the cluster. If the node is not able
     * to return the status of the ID requested, it should return an error.
     *
     * @generated from rpc v1.Node.GetStatus
     */
    readonly getStatus: {
      readonly name: "GetStatus",
      readonly I: typeof GetStatusRequest,
      readonly O: typeof Status,
      readonly kind: MethodKind.Unary,
    },
    /**
     * NegotiateDataChannel is used to negotiate a WebRTC connection between a webmesh client
     * and a node in the cluster. The handling server will send the target node the source address, 
     * the destination for traffic, and STUN/TURN servers to use for the negotiation. The node
     * responds with an offer to be forwarded to the client. When the handler receives an answer
     * from the client, it forwards it to the node. Once the node receives the answer, the stream
     * can optionally be used to exchange ICE candidates.
     *
     * @generated from rpc v1.Node.NegotiateDataChannel
     */
    readonly negotiateDataChannel: {
      readonly name: "NegotiateDataChannel",
      readonly I: typeof DataChannelNegotiation,
      readonly O: typeof DataChannelNegotiation,
      readonly kind: MethodKind.BiDiStreaming,
    },
    /**
     * ReceiveSignalChannel is used to receive a request to start a WebRTC connection between a remote
     * node and this node. The node should wait for the client to send an offer, and then respond with
     * an answer. Once the node receives the answer, the stream can optionally be used to exchange ICE
     * candidates.
     *
     * @generated from rpc v1.Node.ReceiveSignalChannel
     */
    readonly receiveSignalChannel: {
      readonly name: "ReceiveSignalChannel",
      readonly I: typeof WebRTCSignal,
      readonly O: typeof WebRTCSignal,
      readonly kind: MethodKind.BiDiStreaming,
    },
  }
};

