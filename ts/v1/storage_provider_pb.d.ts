//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v1.4.1
// @generated from file v1/storage_provider.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { ClusterStatus } from "./node_pb.js";

/**
 * BootstrapRequest is the request object for the Bootstrap RPC.
 *
 * @generated from message v1.BootstrapRequest
 */
export declare class BootstrapRequest extends Message<BootstrapRequest> {
  constructor(data?: PartialMessage<BootstrapRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.BootstrapRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BootstrapRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BootstrapRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BootstrapRequest;

  static equals(a: BootstrapRequest | PlainMessage<BootstrapRequest> | undefined, b: BootstrapRequest | PlainMessage<BootstrapRequest> | undefined): boolean;
}

/**
 * BootstrapResponse is the response object for the Bootstrap RPC.
 *
 * @generated from message v1.BootstrapResponse
 */
export declare class BootstrapResponse extends Message<BootstrapResponse> {
  /**
   * Status is the status of the storage after the bootstrap.
   *
   * @generated from field: v1.StorageStatus status = 1;
   */
  status?: StorageStatus;

  constructor(data?: PartialMessage<BootstrapResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.BootstrapResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BootstrapResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BootstrapResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BootstrapResponse;

  static equals(a: BootstrapResponse | PlainMessage<BootstrapResponse> | undefined, b: BootstrapResponse | PlainMessage<BootstrapResponse> | undefined): boolean;
}

/**
 * GetPeersRequest is the request object for the GetPeers RPC.
 *
 * @generated from message v1.GetPeersRequest
 */
export declare class GetPeersRequest extends Message<GetPeersRequest> {
  constructor(data?: PartialMessage<GetPeersRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.GetPeersRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPeersRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPeersRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPeersRequest;

  static equals(a: GetPeersRequest | PlainMessage<GetPeersRequest> | undefined, b: GetPeersRequest | PlainMessage<GetPeersRequest> | undefined): boolean;
}

/**
 * GetLeaderRequest is the request object for the GetLeader RPC.
 *
 * @generated from message v1.GetLeaderRequest
 */
export declare class GetLeaderRequest extends Message<GetLeaderRequest> {
  constructor(data?: PartialMessage<GetLeaderRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.GetLeaderRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLeaderRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLeaderRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLeaderRequest;

  static equals(a: GetLeaderRequest | PlainMessage<GetLeaderRequest> | undefined, b: GetLeaderRequest | PlainMessage<GetLeaderRequest> | undefined): boolean;
}

/**
 * StorageStatusRequest is the request object for the StorageStatus RPC.
 *
 * @generated from message v1.StorageStatusRequest
 */
export declare class StorageStatusRequest extends Message<StorageStatusRequest> {
  constructor(data?: PartialMessage<StorageStatusRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.StorageStatusRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageStatusRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageStatusRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageStatusRequest;

  static equals(a: StorageStatusRequest | PlainMessage<StorageStatusRequest> | undefined, b: StorageStatusRequest | PlainMessage<StorageStatusRequest> | undefined): boolean;
}

/**
 * StorageStatus is the response object for the StorageStatus RPC.
 *
 * @generated from message v1.StorageStatus
 */
export declare class StorageStatus extends Message<StorageStatus> {
  /**
   * IsWritable is true if the storage can currently be written to.
   *
   * @generated from field: bool isWritable = 1;
   */
  isWritable: boolean;

  /**
   * ClusterStatus is the status of the storage. The definitions applied
   * to each status are implementation specific.
   *
   * @generated from field: v1.ClusterStatus clusterStatus = 2;
   */
  clusterStatus: ClusterStatus;

  /**
   * Peers is the list of servers that are currently recognized as peers 
   * by the storage plugin. This should include the current server.
   *
   * @generated from field: repeated v1.StoragePeer peers = 3;
   */
  peers: StoragePeer[];

  /**
   * Message is an implementation specific message that can be used to provide
   * additional information about the storage status.
   *
   * @generated from field: string message = 4;
   */
  message: string;

  constructor(data?: PartialMessage<StorageStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.StorageStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageStatus;

  static equals(a: StorageStatus | PlainMessage<StorageStatus> | undefined, b: StorageStatus | PlainMessage<StorageStatus> | undefined): boolean;
}

/**
 * StoragePeer is a server that is currently recognized by the storage plugin.
 *
 * @generated from message v1.StoragePeer
 */
export declare class StoragePeer extends Message<StoragePeer> {
  /**
   * ID is the id of the server.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * PublicKey is the encoded public key of the server. This is not required
   * for demotion or removal RPCs. Not all implementations need to support this.
   *
   * @generated from field: string publicKey = 2;
   */
  publicKey: string;

  /**
   * Address is the address of the server. This is not required
   * for demotion or removal RPCs.
   *
   * @generated from field: string address = 3;
   */
  address: string;

  /**
   * ClusterStatus is the status of the server. This is only
   * applicable during a GetStatus RPC.
   *
   * @generated from field: v1.ClusterStatus clusterStatus = 4;
   */
  clusterStatus: ClusterStatus;

  constructor(data?: PartialMessage<StoragePeer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.StoragePeer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoragePeer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoragePeer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoragePeer;

  static equals(a: StoragePeer | PlainMessage<StoragePeer> | undefined, b: StoragePeer | PlainMessage<StoragePeer> | undefined): boolean;
}

/**
 * StoragePeers is a list of servers that are currently recognized by the storage plugin.
 *
 * @generated from message v1.StoragePeers
 */
export declare class StoragePeers extends Message<StoragePeers> {
  /**
   * Peers is the list of servers that are currently recognized as peers 
   * by the storage plugin.
   *
   * @generated from field: repeated v1.StoragePeer peers = 1;
   */
  peers: StoragePeer[];

  constructor(data?: PartialMessage<StoragePeers>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.StoragePeers";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoragePeers;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoragePeers;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoragePeers;

  static equals(a: StoragePeers | PlainMessage<StoragePeers> | undefined, b: StoragePeers | PlainMessage<StoragePeers> | undefined): boolean;
}

/**
 * AddVoterResponse is the response object for the AddVoter RPC.
 *
 * @generated from message v1.AddVoterResponse
 */
export declare class AddVoterResponse extends Message<AddVoterResponse> {
  constructor(data?: PartialMessage<AddVoterResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.AddVoterResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddVoterResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddVoterResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddVoterResponse;

  static equals(a: AddVoterResponse | PlainMessage<AddVoterResponse> | undefined, b: AddVoterResponse | PlainMessage<AddVoterResponse> | undefined): boolean;
}

/**
 * AddObserverResponse is the response object for the AddObserver RPC.
 *
 * @generated from message v1.AddObserverResponse
 */
export declare class AddObserverResponse extends Message<AddObserverResponse> {
  constructor(data?: PartialMessage<AddObserverResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.AddObserverResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddObserverResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddObserverResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddObserverResponse;

  static equals(a: AddObserverResponse | PlainMessage<AddObserverResponse> | undefined, b: AddObserverResponse | PlainMessage<AddObserverResponse> | undefined): boolean;
}

/**
 * DemoteVoterResponse is the response object for the DemoteVoter RPC.
 *
 * @generated from message v1.DemoteVoterResponse
 */
export declare class DemoteVoterResponse extends Message<DemoteVoterResponse> {
  constructor(data?: PartialMessage<DemoteVoterResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.DemoteVoterResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DemoteVoterResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DemoteVoterResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DemoteVoterResponse;

  static equals(a: DemoteVoterResponse | PlainMessage<DemoteVoterResponse> | undefined, b: DemoteVoterResponse | PlainMessage<DemoteVoterResponse> | undefined): boolean;
}

/**
 * RemoveServerResponse is the response object for the RemoveServer RPC.
 *
 * @generated from message v1.RemoveServerResponse
 */
export declare class RemoveServerResponse extends Message<RemoveServerResponse> {
  constructor(data?: PartialMessage<RemoveServerResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.RemoveServerResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveServerResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveServerResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveServerResponse;

  static equals(a: RemoveServerResponse | PlainMessage<RemoveServerResponse> | undefined, b: RemoveServerResponse | PlainMessage<RemoveServerResponse> | undefined): boolean;
}

/**
 * StorageValue is a value stored in the storage.
 *
 * @generated from message v1.StorageValue
 */
export declare class StorageValue extends Message<StorageValue> {
  /**
   * Key is the key of the value.
   *
   * @generated from field: bytes key = 1;
   */
  key: Uint8Array;

  /**
   * Value is the value of the key.
   *
   * @generated from field: bytes value = 2;
   */
  value: Uint8Array;

  constructor(data?: PartialMessage<StorageValue>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.StorageValue";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageValue;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageValue;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageValue;

  static equals(a: StorageValue | PlainMessage<StorageValue> | undefined, b: StorageValue | PlainMessage<StorageValue> | undefined): boolean;
}

/**
 * GetValueRequest is the request object for the GetValue RPC.
 *
 * @generated from message v1.GetValueRequest
 */
export declare class GetValueRequest extends Message<GetValueRequest> {
  /**
   * Key is the key to get the value for.
   *
   * @generated from field: bytes key = 1;
   */
  key: Uint8Array;

  constructor(data?: PartialMessage<GetValueRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.GetValueRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetValueRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetValueRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetValueRequest;

  static equals(a: GetValueRequest | PlainMessage<GetValueRequest> | undefined, b: GetValueRequest | PlainMessage<GetValueRequest> | undefined): boolean;
}

/**
 * GetValueResponse is the response object for the GetValue RPC.
 *
 * @generated from message v1.GetValueResponse
 */
export declare class GetValueResponse extends Message<GetValueResponse> {
  /**
   * Value is the value of the key.
   *
   * @generated from field: v1.StorageValue value = 1;
   */
  value?: StorageValue;

  constructor(data?: PartialMessage<GetValueResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.GetValueResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetValueResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetValueResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetValueResponse;

  static equals(a: GetValueResponse | PlainMessage<GetValueResponse> | undefined, b: GetValueResponse | PlainMessage<GetValueResponse> | undefined): boolean;
}

/**
 * PutValueRequest is the request object for the PutValue RPC.
 *
 * @generated from message v1.PutValueRequest
 */
export declare class PutValueRequest extends Message<PutValueRequest> {
  /**
   * Value is the value to put.
   *
   * @generated from field: v1.StorageValue value = 1;
   */
  value?: StorageValue;

  /**
   * TTL is the time to live for the value.
   *
   * @generated from field: google.protobuf.Duration ttl = 2;
   */
  ttl?: Duration;

  constructor(data?: PartialMessage<PutValueRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.PutValueRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutValueRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutValueRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutValueRequest;

  static equals(a: PutValueRequest | PlainMessage<PutValueRequest> | undefined, b: PutValueRequest | PlainMessage<PutValueRequest> | undefined): boolean;
}

/**
 * PutValueResponse is the response object for the PutValue RPC.
 *
 * @generated from message v1.PutValueResponse
 */
export declare class PutValueResponse extends Message<PutValueResponse> {
  constructor(data?: PartialMessage<PutValueResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.PutValueResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutValueResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutValueResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutValueResponse;

  static equals(a: PutValueResponse | PlainMessage<PutValueResponse> | undefined, b: PutValueResponse | PlainMessage<PutValueResponse> | undefined): boolean;
}

/**
 * DeleteValueRequest is the request object for the DeleteValue RPC.
 *
 * @generated from message v1.DeleteValueRequest
 */
export declare class DeleteValueRequest extends Message<DeleteValueRequest> {
  /**
   * Key is the key to delete.
   *
   * @generated from field: bytes key = 1;
   */
  key: Uint8Array;

  constructor(data?: PartialMessage<DeleteValueRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.DeleteValueRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteValueRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteValueRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteValueRequest;

  static equals(a: DeleteValueRequest | PlainMessage<DeleteValueRequest> | undefined, b: DeleteValueRequest | PlainMessage<DeleteValueRequest> | undefined): boolean;
}

/**
 * DeleteValueResponse is the response object for the DeleteValue RPC.
 *
 * @generated from message v1.DeleteValueResponse
 */
export declare class DeleteValueResponse extends Message<DeleteValueResponse> {
  constructor(data?: PartialMessage<DeleteValueResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.DeleteValueResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteValueResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteValueResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteValueResponse;

  static equals(a: DeleteValueResponse | PlainMessage<DeleteValueResponse> | undefined, b: DeleteValueResponse | PlainMessage<DeleteValueResponse> | undefined): boolean;
}

/**
 * ListKeysRequest is the request object for the ListValues RPC.
 *
 * @generated from message v1.ListKeysRequest
 */
export declare class ListKeysRequest extends Message<ListKeysRequest> {
  /**
   * Prefix is the prefix to list values for.
   *
   * @generated from field: bytes prefix = 1;
   */
  prefix: Uint8Array;

  constructor(data?: PartialMessage<ListKeysRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.ListKeysRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKeysRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKeysRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKeysRequest;

  static equals(a: ListKeysRequest | PlainMessage<ListKeysRequest> | undefined, b: ListKeysRequest | PlainMessage<ListKeysRequest> | undefined): boolean;
}

/**
 * ListKeysResponse is the response object for the ListValues RPC.
 *
 * @generated from message v1.ListKeysResponse
 */
export declare class ListKeysResponse extends Message<ListKeysResponse> {
  /**
   * Keys is the list of value keys for the prefix.
   *
   * @generated from field: repeated bytes keys = 1;
   */
  keys: Uint8Array[];

  constructor(data?: PartialMessage<ListKeysResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.ListKeysResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKeysResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKeysResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKeysResponse;

  static equals(a: ListKeysResponse | PlainMessage<ListKeysResponse> | undefined, b: ListKeysResponse | PlainMessage<ListKeysResponse> | undefined): boolean;
}

/**
 * ListValuesRequest is the request object for the ListValues RPC.
 *
 * @generated from message v1.ListValuesRequest
 */
export declare class ListValuesRequest extends Message<ListValuesRequest> {
  /**
   * Prefix is the prefix to list values for.
   *
   * @generated from field: bytes prefix = 1;
   */
  prefix: Uint8Array;

  constructor(data?: PartialMessage<ListValuesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.ListValuesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListValuesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListValuesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListValuesRequest;

  static equals(a: ListValuesRequest | PlainMessage<ListValuesRequest> | undefined, b: ListValuesRequest | PlainMessage<ListValuesRequest> | undefined): boolean;
}

/**
 * ListValuesResponse is the response object for the ListValues RPC.
 *
 * @generated from message v1.ListValuesResponse
 */
export declare class ListValuesResponse extends Message<ListValuesResponse> {
  /**
   * Values is the list of values for the prefix.
   *
   * @generated from field: repeated v1.StorageValue values = 1;
   */
  values: StorageValue[];

  constructor(data?: PartialMessage<ListValuesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.ListValuesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListValuesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListValuesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListValuesResponse;

  static equals(a: ListValuesResponse | PlainMessage<ListValuesResponse> | undefined, b: ListValuesResponse | PlainMessage<ListValuesResponse> | undefined): boolean;
}

/**
 * SubscribePrefixRequest is the request object for the SubscribePrefix RPC.
 *
 * @generated from message v1.SubscribePrefixRequest
 */
export declare class SubscribePrefixRequest extends Message<SubscribePrefixRequest> {
  /**
   * Prefix is the prefix to subscribe to.
   *
   * @generated from field: bytes prefix = 1;
   */
  prefix: Uint8Array;

  constructor(data?: PartialMessage<SubscribePrefixRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.SubscribePrefixRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribePrefixRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribePrefixRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribePrefixRequest;

  static equals(a: SubscribePrefixRequest | PlainMessage<SubscribePrefixRequest> | undefined, b: SubscribePrefixRequest | PlainMessage<SubscribePrefixRequest> | undefined): boolean;
}

/**
 * PrefixEvent is an event that is emitted when a value is added or removed
 * from the storage for a prefix.
 *
 * @generated from message v1.PrefixEvent
 */
export declare class PrefixEvent extends Message<PrefixEvent> {
  /**
   * Prefix is the prefix that the event is for.
   *
   * @generated from field: bytes prefix = 1;
   */
  prefix: Uint8Array;

  /**
   * Value is the value that was added or removed.
   *
   * @generated from field: v1.StorageValue value = 2;
   */
  value?: StorageValue;

  /**
   * EventType is the type of event.
   *
   * @generated from field: v1.PrefixEvent.EventType eventType = 3;
   */
  eventType: PrefixEvent_EventType;

  constructor(data?: PartialMessage<PrefixEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.PrefixEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrefixEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrefixEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrefixEvent;

  static equals(a: PrefixEvent | PlainMessage<PrefixEvent> | undefined, b: PrefixEvent | PlainMessage<PrefixEvent> | undefined): boolean;
}

/**
 * @generated from enum v1.PrefixEvent.EventType
 */
export declare enum PrefixEvent_EventType {
  /**
   * EventTypeUnknown is an unknown event type.
   *
   * @generated from enum value: EventTypeUnknown = 0;
   */
  EventTypeUnknown = 0,

  /**
   * EventTypeUpdated is an event for when a value is added or updated.
   *
   * @generated from enum value: EventTypeUpdated = 1;
   */
  EventTypeUpdated = 1,

  /**
   * EventTypeRemoved is an event for when a value is removed.
   *
   * @generated from enum value: EventTypeRemoved = 2;
   */
  EventTypeRemoved = 2,
}

