//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v1.4.1
// @generated from file v1/mesh.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * GetNodeRequest is a request to get a node.
 *
 * @generated from message v1.GetNodeRequest
 */
export declare class GetNodeRequest extends Message<GetNodeRequest> {
  /**
   * ID is the ID of the node.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<GetNodeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.GetNodeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNodeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNodeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNodeRequest;

  static equals(a: GetNodeRequest | PlainMessage<GetNodeRequest> | undefined, b: GetNodeRequest | PlainMessage<GetNodeRequest> | undefined): boolean;
}

/**
 * MeshEdge is an edge between two nodes.
 *
 * @generated from message v1.MeshEdge
 */
export declare class MeshEdge extends Message<MeshEdge> {
  /**
   * Source is the source node.
   *
   * @generated from field: string source = 1;
   */
  source: string;

  /**
   * Target is the target node.
   *
   * @generated from field: string target = 2;
   */
  target: string;

  /**
   * Weight is the weight of the edge.
   *
   * @generated from field: int32 weight = 3;
   */
  weight: number;

  /**
   * Attributes is a list of attributes for the edge.
   *
   * @generated from field: map<string, string> attributes = 4;
   */
  attributes: { [key: string]: string };

  constructor(data?: PartialMessage<MeshEdge>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.MeshEdge";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeshEdge;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeshEdge;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeshEdge;

  static equals(a: MeshEdge | PlainMessage<MeshEdge> | undefined, b: MeshEdge | PlainMessage<MeshEdge> | undefined): boolean;
}

/**
 * MeshEdges is a list of edges.
 *
 * @generated from message v1.MeshEdges
 */
export declare class MeshEdges extends Message<MeshEdges> {
  /**
   * Items is the list of edges.
   *
   * @generated from field: repeated v1.MeshEdge items = 1;
   */
  items: MeshEdge[];

  constructor(data?: PartialMessage<MeshEdges>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.MeshEdges";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeshEdges;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeshEdges;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeshEdges;

  static equals(a: MeshEdges | PlainMessage<MeshEdges> | undefined, b: MeshEdges | PlainMessage<MeshEdges> | undefined): boolean;
}

/**
 * MeshGraph is a graph of nodes.
 *
 * @generated from message v1.MeshGraph
 */
export declare class MeshGraph extends Message<MeshGraph> {
  /**
   * Nodes is the list of nodes.
   *
   * @generated from field: repeated string nodes = 1;
   */
  nodes: string[];

  /**
   * Edges is the list of edges.
   *
   * @generated from field: repeated v1.MeshEdge edges = 2;
   */
  edges: MeshEdge[];

  /**
   * DOT is the DOT representation of the graph.
   *
   * @generated from field: string dot = 3;
   */
  dot: string;

  constructor(data?: PartialMessage<MeshGraph>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.MeshGraph";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeshGraph;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeshGraph;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeshGraph;

  static equals(a: MeshGraph | PlainMessage<MeshGraph> | undefined, b: MeshGraph | PlainMessage<MeshGraph> | undefined): boolean;
}

