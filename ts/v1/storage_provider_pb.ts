//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file v1/storage_provider.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";
import { ClusterStatus } from "./node_pb.js";

/**
 * BootstrapRequest is the request object for the Bootstrap RPC.
 *
 * @generated from message v1.BootstrapRequest
 */
export class BootstrapRequest extends Message<BootstrapRequest> {
  constructor(data?: PartialMessage<BootstrapRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.BootstrapRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BootstrapRequest {
    return new BootstrapRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BootstrapRequest {
    return new BootstrapRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BootstrapRequest {
    return new BootstrapRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BootstrapRequest | PlainMessage<BootstrapRequest> | undefined, b: BootstrapRequest | PlainMessage<BootstrapRequest> | undefined): boolean {
    return proto3.util.equals(BootstrapRequest, a, b);
  }
}

/**
 * BootstrapResponse is the response object for the Bootstrap RPC.
 *
 * @generated from message v1.BootstrapResponse
 */
export class BootstrapResponse extends Message<BootstrapResponse> {
  /**
   * Status is the status of the storage after the bootstrap.
   *
   * @generated from field: v1.StorageStatus status = 1;
   */
  status?: StorageStatus;

  constructor(data?: PartialMessage<BootstrapResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.BootstrapResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: StorageStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BootstrapResponse {
    return new BootstrapResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BootstrapResponse {
    return new BootstrapResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BootstrapResponse {
    return new BootstrapResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BootstrapResponse | PlainMessage<BootstrapResponse> | undefined, b: BootstrapResponse | PlainMessage<BootstrapResponse> | undefined): boolean {
    return proto3.util.equals(BootstrapResponse, a, b);
  }
}

/**
 * GetPeersRequest is the request object for the GetPeers RPC.
 *
 * @generated from message v1.GetPeersRequest
 */
export class GetPeersRequest extends Message<GetPeersRequest> {
  constructor(data?: PartialMessage<GetPeersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.GetPeersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPeersRequest {
    return new GetPeersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPeersRequest {
    return new GetPeersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPeersRequest {
    return new GetPeersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPeersRequest | PlainMessage<GetPeersRequest> | undefined, b: GetPeersRequest | PlainMessage<GetPeersRequest> | undefined): boolean {
    return proto3.util.equals(GetPeersRequest, a, b);
  }
}

/**
 * GetLeaderRequest is the request object for the GetLeader RPC.
 *
 * @generated from message v1.GetLeaderRequest
 */
export class GetLeaderRequest extends Message<GetLeaderRequest> {
  constructor(data?: PartialMessage<GetLeaderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.GetLeaderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLeaderRequest {
    return new GetLeaderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLeaderRequest {
    return new GetLeaderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLeaderRequest {
    return new GetLeaderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLeaderRequest | PlainMessage<GetLeaderRequest> | undefined, b: GetLeaderRequest | PlainMessage<GetLeaderRequest> | undefined): boolean {
    return proto3.util.equals(GetLeaderRequest, a, b);
  }
}

/**
 * StorageStatusRequest is the request object for the StorageStatus RPC.
 *
 * @generated from message v1.StorageStatusRequest
 */
export class StorageStatusRequest extends Message<StorageStatusRequest> {
  constructor(data?: PartialMessage<StorageStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.StorageStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageStatusRequest {
    return new StorageStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageStatusRequest {
    return new StorageStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageStatusRequest {
    return new StorageStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StorageStatusRequest | PlainMessage<StorageStatusRequest> | undefined, b: StorageStatusRequest | PlainMessage<StorageStatusRequest> | undefined): boolean {
    return proto3.util.equals(StorageStatusRequest, a, b);
  }
}

/**
 * StorageStatus is the response object for the StorageStatus RPC.
 *
 * @generated from message v1.StorageStatus
 */
export class StorageStatus extends Message<StorageStatus> {
  /**
   * IsWritable is true if the storage can currently be written to.
   *
   * @generated from field: bool isWritable = 1;
   */
  isWritable = false;

  /**
   * ClusterStatus is the status of the storage. The definitions applied
   * to each status are implementation specific.
   *
   * @generated from field: v1.ClusterStatus clusterStatus = 2;
   */
  clusterStatus = ClusterStatus.CLUSTER_STATUS_UNKNOWN;

  /**
   * Peers is the list of servers that are currently recognized as peers 
   * by the storage plugin. This should include the current server.
   *
   * @generated from field: repeated v1.StoragePeer peers = 3;
   */
  peers: StoragePeer[] = [];

  /**
   * Message is an implementation specific message that can be used to provide
   * additional information about the storage status.
   *
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<StorageStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.StorageStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "isWritable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "clusterStatus", kind: "enum", T: proto3.getEnumType(ClusterStatus) },
    { no: 3, name: "peers", kind: "message", T: StoragePeer, repeated: true },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageStatus {
    return new StorageStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageStatus {
    return new StorageStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageStatus {
    return new StorageStatus().fromJsonString(jsonString, options);
  }

  static equals(a: StorageStatus | PlainMessage<StorageStatus> | undefined, b: StorageStatus | PlainMessage<StorageStatus> | undefined): boolean {
    return proto3.util.equals(StorageStatus, a, b);
  }
}

/**
 * StoragePeer is a server that is currently recognized by the storage plugin.
 *
 * @generated from message v1.StoragePeer
 */
export class StoragePeer extends Message<StoragePeer> {
  /**
   * ID is the id of the server.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * PublicKey is the encoded public key of the server. This is not required
   * for demotion or removal RPCs. Not all implementations need to support this.
   *
   * @generated from field: string publicKey = 2;
   */
  publicKey = "";

  /**
   * Address is the address of the server. This is not required
   * for demotion or removal RPCs.
   *
   * @generated from field: string address = 3;
   */
  address = "";

  /**
   * ClusterStatus is the status of the server. This is only
   * applicable during a GetStatus RPC.
   *
   * @generated from field: v1.ClusterStatus clusterStatus = 4;
   */
  clusterStatus = ClusterStatus.CLUSTER_STATUS_UNKNOWN;

  constructor(data?: PartialMessage<StoragePeer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.StoragePeer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "publicKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "clusterStatus", kind: "enum", T: proto3.getEnumType(ClusterStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoragePeer {
    return new StoragePeer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoragePeer {
    return new StoragePeer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoragePeer {
    return new StoragePeer().fromJsonString(jsonString, options);
  }

  static equals(a: StoragePeer | PlainMessage<StoragePeer> | undefined, b: StoragePeer | PlainMessage<StoragePeer> | undefined): boolean {
    return proto3.util.equals(StoragePeer, a, b);
  }
}

/**
 * StoragePeers is a list of servers that are currently recognized by the storage plugin.
 *
 * @generated from message v1.StoragePeers
 */
export class StoragePeers extends Message<StoragePeers> {
  /**
   * Peers is the list of servers that are currently recognized as peers 
   * by the storage plugin.
   *
   * @generated from field: repeated v1.StoragePeer peers = 1;
   */
  peers: StoragePeer[] = [];

  constructor(data?: PartialMessage<StoragePeers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.StoragePeers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "peers", kind: "message", T: StoragePeer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoragePeers {
    return new StoragePeers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoragePeers {
    return new StoragePeers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoragePeers {
    return new StoragePeers().fromJsonString(jsonString, options);
  }

  static equals(a: StoragePeers | PlainMessage<StoragePeers> | undefined, b: StoragePeers | PlainMessage<StoragePeers> | undefined): boolean {
    return proto3.util.equals(StoragePeers, a, b);
  }
}

/**
 * AddVoterResponse is the response object for the AddVoter RPC.
 *
 * @generated from message v1.AddVoterResponse
 */
export class AddVoterResponse extends Message<AddVoterResponse> {
  constructor(data?: PartialMessage<AddVoterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.AddVoterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddVoterResponse {
    return new AddVoterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddVoterResponse {
    return new AddVoterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddVoterResponse {
    return new AddVoterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddVoterResponse | PlainMessage<AddVoterResponse> | undefined, b: AddVoterResponse | PlainMessage<AddVoterResponse> | undefined): boolean {
    return proto3.util.equals(AddVoterResponse, a, b);
  }
}

/**
 * AddObserverResponse is the response object for the AddObserver RPC.
 *
 * @generated from message v1.AddObserverResponse
 */
export class AddObserverResponse extends Message<AddObserverResponse> {
  constructor(data?: PartialMessage<AddObserverResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.AddObserverResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddObserverResponse {
    return new AddObserverResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddObserverResponse {
    return new AddObserverResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddObserverResponse {
    return new AddObserverResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddObserverResponse | PlainMessage<AddObserverResponse> | undefined, b: AddObserverResponse | PlainMessage<AddObserverResponse> | undefined): boolean {
    return proto3.util.equals(AddObserverResponse, a, b);
  }
}

/**
 * DemoteVoterResponse is the response object for the DemoteVoter RPC.
 *
 * @generated from message v1.DemoteVoterResponse
 */
export class DemoteVoterResponse extends Message<DemoteVoterResponse> {
  constructor(data?: PartialMessage<DemoteVoterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.DemoteVoterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DemoteVoterResponse {
    return new DemoteVoterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DemoteVoterResponse {
    return new DemoteVoterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DemoteVoterResponse {
    return new DemoteVoterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DemoteVoterResponse | PlainMessage<DemoteVoterResponse> | undefined, b: DemoteVoterResponse | PlainMessage<DemoteVoterResponse> | undefined): boolean {
    return proto3.util.equals(DemoteVoterResponse, a, b);
  }
}

/**
 * RemoveServerResponse is the response object for the RemoveServer RPC.
 *
 * @generated from message v1.RemoveServerResponse
 */
export class RemoveServerResponse extends Message<RemoveServerResponse> {
  constructor(data?: PartialMessage<RemoveServerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.RemoveServerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveServerResponse {
    return new RemoveServerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveServerResponse {
    return new RemoveServerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveServerResponse {
    return new RemoveServerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveServerResponse | PlainMessage<RemoveServerResponse> | undefined, b: RemoveServerResponse | PlainMessage<RemoveServerResponse> | undefined): boolean {
    return proto3.util.equals(RemoveServerResponse, a, b);
  }
}

/**
 * StorageValue is a value stored in the storage.
 *
 * @generated from message v1.StorageValue
 */
export class StorageValue extends Message<StorageValue> {
  /**
   * Key is the key of the value.
   *
   * @generated from field: bytes key = 1;
   */
  key = new Uint8Array(0);

  /**
   * Value is the value of the key.
   *
   * @generated from field: bytes value = 2;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<StorageValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.StorageValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageValue {
    return new StorageValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageValue {
    return new StorageValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageValue {
    return new StorageValue().fromJsonString(jsonString, options);
  }

  static equals(a: StorageValue | PlainMessage<StorageValue> | undefined, b: StorageValue | PlainMessage<StorageValue> | undefined): boolean {
    return proto3.util.equals(StorageValue, a, b);
  }
}

/**
 * GetValueRequest is the request object for the GetValue RPC.
 *
 * @generated from message v1.GetValueRequest
 */
export class GetValueRequest extends Message<GetValueRequest> {
  /**
   * Key is the key to get the value for.
   *
   * @generated from field: bytes key = 1;
   */
  key = new Uint8Array(0);

  constructor(data?: PartialMessage<GetValueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.GetValueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetValueRequest {
    return new GetValueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetValueRequest {
    return new GetValueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetValueRequest {
    return new GetValueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetValueRequest | PlainMessage<GetValueRequest> | undefined, b: GetValueRequest | PlainMessage<GetValueRequest> | undefined): boolean {
    return proto3.util.equals(GetValueRequest, a, b);
  }
}

/**
 * GetValueResponse is the response object for the GetValue RPC.
 *
 * @generated from message v1.GetValueResponse
 */
export class GetValueResponse extends Message<GetValueResponse> {
  /**
   * Value is the value of the key.
   *
   * @generated from field: v1.StorageValue value = 1;
   */
  value?: StorageValue;

  constructor(data?: PartialMessage<GetValueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.GetValueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: StorageValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetValueResponse {
    return new GetValueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetValueResponse {
    return new GetValueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetValueResponse {
    return new GetValueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetValueResponse | PlainMessage<GetValueResponse> | undefined, b: GetValueResponse | PlainMessage<GetValueResponse> | undefined): boolean {
    return proto3.util.equals(GetValueResponse, a, b);
  }
}

/**
 * PutValueRequest is the request object for the PutValue RPC.
 *
 * @generated from message v1.PutValueRequest
 */
export class PutValueRequest extends Message<PutValueRequest> {
  /**
   * Value is the value to put.
   *
   * @generated from field: v1.StorageValue value = 1;
   */
  value?: StorageValue;

  /**
   * TTL is the time to live for the value.
   *
   * @generated from field: google.protobuf.Duration ttl = 2;
   */
  ttl?: Duration;

  constructor(data?: PartialMessage<PutValueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.PutValueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: StorageValue },
    { no: 2, name: "ttl", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutValueRequest {
    return new PutValueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutValueRequest {
    return new PutValueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutValueRequest {
    return new PutValueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PutValueRequest | PlainMessage<PutValueRequest> | undefined, b: PutValueRequest | PlainMessage<PutValueRequest> | undefined): boolean {
    return proto3.util.equals(PutValueRequest, a, b);
  }
}

/**
 * PutValueResponse is the response object for the PutValue RPC.
 *
 * @generated from message v1.PutValueResponse
 */
export class PutValueResponse extends Message<PutValueResponse> {
  constructor(data?: PartialMessage<PutValueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.PutValueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutValueResponse {
    return new PutValueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutValueResponse {
    return new PutValueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutValueResponse {
    return new PutValueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PutValueResponse | PlainMessage<PutValueResponse> | undefined, b: PutValueResponse | PlainMessage<PutValueResponse> | undefined): boolean {
    return proto3.util.equals(PutValueResponse, a, b);
  }
}

/**
 * DeleteValueRequest is the request object for the DeleteValue RPC.
 *
 * @generated from message v1.DeleteValueRequest
 */
export class DeleteValueRequest extends Message<DeleteValueRequest> {
  /**
   * Key is the key to delete.
   *
   * @generated from field: bytes key = 1;
   */
  key = new Uint8Array(0);

  constructor(data?: PartialMessage<DeleteValueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.DeleteValueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteValueRequest {
    return new DeleteValueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteValueRequest {
    return new DeleteValueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteValueRequest {
    return new DeleteValueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteValueRequest | PlainMessage<DeleteValueRequest> | undefined, b: DeleteValueRequest | PlainMessage<DeleteValueRequest> | undefined): boolean {
    return proto3.util.equals(DeleteValueRequest, a, b);
  }
}

/**
 * DeleteValueResponse is the response object for the DeleteValue RPC.
 *
 * @generated from message v1.DeleteValueResponse
 */
export class DeleteValueResponse extends Message<DeleteValueResponse> {
  constructor(data?: PartialMessage<DeleteValueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.DeleteValueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteValueResponse {
    return new DeleteValueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteValueResponse {
    return new DeleteValueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteValueResponse {
    return new DeleteValueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteValueResponse | PlainMessage<DeleteValueResponse> | undefined, b: DeleteValueResponse | PlainMessage<DeleteValueResponse> | undefined): boolean {
    return proto3.util.equals(DeleteValueResponse, a, b);
  }
}

/**
 * ListKeysRequest is the request object for the ListValues RPC.
 *
 * @generated from message v1.ListKeysRequest
 */
export class ListKeysRequest extends Message<ListKeysRequest> {
  /**
   * Prefix is the prefix to list values for.
   *
   * @generated from field: bytes prefix = 1;
   */
  prefix = new Uint8Array(0);

  constructor(data?: PartialMessage<ListKeysRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListKeysRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prefix", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKeysRequest {
    return new ListKeysRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKeysRequest {
    return new ListKeysRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKeysRequest {
    return new ListKeysRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListKeysRequest | PlainMessage<ListKeysRequest> | undefined, b: ListKeysRequest | PlainMessage<ListKeysRequest> | undefined): boolean {
    return proto3.util.equals(ListKeysRequest, a, b);
  }
}

/**
 * ListKeysResponse is the response object for the ListValues RPC.
 *
 * @generated from message v1.ListKeysResponse
 */
export class ListKeysResponse extends Message<ListKeysResponse> {
  /**
   * Keys is the list of value keys for the prefix.
   *
   * @generated from field: repeated bytes keys = 1;
   */
  keys: Uint8Array[] = [];

  constructor(data?: PartialMessage<ListKeysResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListKeysResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKeysResponse {
    return new ListKeysResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKeysResponse {
    return new ListKeysResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKeysResponse {
    return new ListKeysResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListKeysResponse | PlainMessage<ListKeysResponse> | undefined, b: ListKeysResponse | PlainMessage<ListKeysResponse> | undefined): boolean {
    return proto3.util.equals(ListKeysResponse, a, b);
  }
}

/**
 * ListValuesRequest is the request object for the ListValues RPC.
 *
 * @generated from message v1.ListValuesRequest
 */
export class ListValuesRequest extends Message<ListValuesRequest> {
  /**
   * Prefix is the prefix to list values for.
   *
   * @generated from field: bytes prefix = 1;
   */
  prefix = new Uint8Array(0);

  constructor(data?: PartialMessage<ListValuesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListValuesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prefix", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListValuesRequest {
    return new ListValuesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListValuesRequest {
    return new ListValuesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListValuesRequest {
    return new ListValuesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListValuesRequest | PlainMessage<ListValuesRequest> | undefined, b: ListValuesRequest | PlainMessage<ListValuesRequest> | undefined): boolean {
    return proto3.util.equals(ListValuesRequest, a, b);
  }
}

/**
 * ListValuesResponse is the response object for the ListValues RPC.
 *
 * @generated from message v1.ListValuesResponse
 */
export class ListValuesResponse extends Message<ListValuesResponse> {
  /**
   * Values is the list of values for the prefix.
   *
   * @generated from field: repeated v1.StorageValue values = 1;
   */
  values: StorageValue[] = [];

  constructor(data?: PartialMessage<ListValuesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListValuesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "message", T: StorageValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListValuesResponse {
    return new ListValuesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListValuesResponse {
    return new ListValuesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListValuesResponse {
    return new ListValuesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListValuesResponse | PlainMessage<ListValuesResponse> | undefined, b: ListValuesResponse | PlainMessage<ListValuesResponse> | undefined): boolean {
    return proto3.util.equals(ListValuesResponse, a, b);
  }
}

/**
 * SubscribePrefixRequest is the request object for the SubscribePrefix RPC.
 *
 * @generated from message v1.SubscribePrefixRequest
 */
export class SubscribePrefixRequest extends Message<SubscribePrefixRequest> {
  /**
   * Prefix is the prefix to subscribe to.
   *
   * @generated from field: bytes prefix = 1;
   */
  prefix = new Uint8Array(0);

  constructor(data?: PartialMessage<SubscribePrefixRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.SubscribePrefixRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prefix", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribePrefixRequest {
    return new SubscribePrefixRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribePrefixRequest {
    return new SubscribePrefixRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribePrefixRequest {
    return new SubscribePrefixRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribePrefixRequest | PlainMessage<SubscribePrefixRequest> | undefined, b: SubscribePrefixRequest | PlainMessage<SubscribePrefixRequest> | undefined): boolean {
    return proto3.util.equals(SubscribePrefixRequest, a, b);
  }
}

/**
 * PrefixEvent is an event that is emitted when a value is added or removed
 * from the storage for a prefix.
 *
 * @generated from message v1.PrefixEvent
 */
export class PrefixEvent extends Message<PrefixEvent> {
  /**
   * Prefix is the prefix that the event is for.
   *
   * @generated from field: bytes prefix = 1;
   */
  prefix = new Uint8Array(0);

  /**
   * Value is the value that was added or removed.
   *
   * @generated from field: v1.StorageValue value = 2;
   */
  value?: StorageValue;

  /**
   * EventType is the type of event.
   *
   * @generated from field: v1.PrefixEvent.EventType eventType = 3;
   */
  eventType = PrefixEvent_EventType.EventTypeUnknown;

  constructor(data?: PartialMessage<PrefixEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.PrefixEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prefix", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "value", kind: "message", T: StorageValue },
    { no: 3, name: "eventType", kind: "enum", T: proto3.getEnumType(PrefixEvent_EventType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrefixEvent {
    return new PrefixEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrefixEvent {
    return new PrefixEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrefixEvent {
    return new PrefixEvent().fromJsonString(jsonString, options);
  }

  static equals(a: PrefixEvent | PlainMessage<PrefixEvent> | undefined, b: PrefixEvent | PlainMessage<PrefixEvent> | undefined): boolean {
    return proto3.util.equals(PrefixEvent, a, b);
  }
}

/**
 * @generated from enum v1.PrefixEvent.EventType
 */
export enum PrefixEvent_EventType {
  /**
   * EventTypeUnknown is an unknown event type.
   *
   * @generated from enum value: EventTypeUnknown = 0;
   */
  EventTypeUnknown = 0,

  /**
   * EventTypeUpdated is an event for when a value is added or updated.
   *
   * @generated from enum value: EventTypeUpdated = 1;
   */
  EventTypeUpdated = 1,

  /**
   * EventTypeRemoved is an event for when a value is removed.
   *
   * @generated from enum value: EventTypeRemoved = 2;
   */
  EventTypeRemoved = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PrefixEvent_EventType)
proto3.util.setEnumType(PrefixEvent_EventType, "v1.PrefixEvent.EventType", [
  { no: 0, name: "EventTypeUnknown" },
  { no: 1, name: "EventTypeUpdated" },
  { no: 2, name: "EventTypeRemoved" },
]);

