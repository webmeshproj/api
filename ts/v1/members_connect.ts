//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-connect-es v1.1.2 with parameter "target=ts"
// @generated from file v1/members.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { JoinRequest, JoinResponse, LeaveRequest, LeaveResponse, PeerConfigurations, StorageConsensusRequest, StorageConsensusResponse, SubscribePeersRequest, UpdateRequest, UpdateResponse } from "./members_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { RaftApplyResponse, RaftLogEntry } from "./raft_pb.js";

/**
 * The membership service is exposed on storage-providing nodes to allow nodes to join
 * and leave the cluster. This service is meant to be made available publicly
 * to allow people in from the outside. 
 *
 * @generated from service v1.Membership
 */
export const Membership = {
  typeName: "v1.Membership",
  methods: {
    /**
     * Join is used to join a node to the mesh.
     *
     * @generated from rpc v1.Membership.Join
     */
    join: {
      name: "Join",
      I: JoinRequest,
      O: JoinResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update is used by a node to update its state in the mesh. The node will be updated
     * in the mesh and will be able to query the mesh state or vote in elections. Only
     * non-empty fields will be updated. It is almost semantically equivalent to a join request
     * with the same ID, but redefined to avoid confusion and to allow for expansion.
     *
     * @generated from rpc v1.Membership.Update
     */
    update: {
      name: "Update",
      I: UpdateRequest,
      O: UpdateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Leave is used to remove a node from the mesh. The node will be removed from the mesh
     * and will no longer be able to query the mesh state or vote in elections.
     *
     * @generated from rpc v1.Membership.Leave
     */
    leave: {
      name: "Leave",
      I: LeaveRequest,
      O: LeaveResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SubscribePeers subscribes to the peer configuration for the given node. The node
     * will receive updates to the peer configuration as it changes.
     *
     * @generated from rpc v1.Membership.SubscribePeers
     */
    subscribePeers: {
      name: "SubscribePeers",
      I: SubscribePeersRequest,
      O: PeerConfigurations,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Apply is used by voting nodes to request a log entry be applied to the state machine.
     * This is only available on the leader, and can only be called by nodes that are allowed
     * to vote. This is only used by the built-in raft storage implementation.
     *
     * @generated from rpc v1.Membership.Apply
     */
    apply: {
      name: "Apply",
      I: RaftLogEntry,
      O: RaftApplyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetCurrentConsensus returns the current Storage consensus configuration.
     *
     * @generated from rpc v1.Membership.GetCurrentConsensus
     */
    getCurrentConsensus: {
      name: "GetCurrentConsensus",
      I: StorageConsensusRequest,
      O: StorageConsensusResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

