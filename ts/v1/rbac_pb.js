//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v1.4.1
// @generated from file v1/rbac.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * RuleResource is the resource type for a rule.
 *
 * @generated from enum v1.RuleResource
 */
export const RuleResource = proto3.makeEnum(
  "v1.RuleResource",
  [
    {no: 0, name: "RESOURCE_UNKNOWN"},
    {no: 1, name: "RESOURCE_VOTES"},
    {no: 2, name: "RESOURCE_ROLES"},
    {no: 3, name: "RESOURCE_ROLE_BINDINGS"},
    {no: 4, name: "RESOURCE_GROUPS"},
    {no: 5, name: "RESOURCE_NETWORK_ACLS"},
    {no: 6, name: "RESOURCE_ROUTES"},
    {no: 7, name: "RESOURCE_DATA_CHANNELS"},
    {no: 8, name: "RESOURCE_EDGES"},
    {no: 9, name: "RESOURCE_OBSERVERS"},
    {no: 10, name: "RESOURCE_PUBSUB"},
    {no: 999, name: "RESOURCE_ALL"},
  ],
);

/**
 * RuleVerb is the verb type for a rule.
 *
 * @generated from enum v1.RuleVerb
 */
export const RuleVerb = proto3.makeEnum(
  "v1.RuleVerb",
  [
    {no: 0, name: "VERB_UNKNOWN"},
    {no: 1, name: "VERB_PUT"},
    {no: 2, name: "VERB_GET"},
    {no: 3, name: "VERB_DELETE"},
    {no: 999, name: "VERB_ALL"},
  ],
);

/**
 * SubjectType is the type of a subject.
 *
 * @generated from enum v1.SubjectType
 */
export const SubjectType = proto3.makeEnum(
  "v1.SubjectType",
  [
    {no: 0, name: "SUBJECT_UNKNOWN"},
    {no: 1, name: "SUBJECT_NODE"},
    {no: 2, name: "SUBJECT_USER"},
    {no: 3, name: "SUBJECT_GROUP"},
    {no: 999, name: "SUBJECT_ALL"},
  ],
);

/**
 * Rule is a rule that applies to a resource.
 *
 * @generated from message v1.Rule
 */
export const Rule = proto3.makeMessageType(
  "v1.Rule",
  () => [
    { no: 1, name: "resources", kind: "enum", T: proto3.getEnumType(RuleResource), repeated: true },
    { no: 2, name: "resourceNames", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "verbs", kind: "enum", T: proto3.getEnumType(RuleVerb), repeated: true },
  ],
);

/**
 * Role is a role that can be assigned to a subject.
 *
 * @generated from message v1.Role
 */
export const Role = proto3.makeMessageType(
  "v1.Role",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rules", kind: "message", T: Rule, repeated: true },
  ],
);

/**
 * Roles is a list of roles.
 *
 * @generated from message v1.Roles
 */
export const Roles = proto3.makeMessageType(
  "v1.Roles",
  () => [
    { no: 1, name: "items", kind: "message", T: Role, repeated: true },
  ],
);

/**
 * RoleBinding is a binding of a role to one or more subjects.
 *
 * @generated from message v1.RoleBinding
 */
export const RoleBinding = proto3.makeMessageType(
  "v1.RoleBinding",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subjects", kind: "message", T: Subject, repeated: true },
  ],
);

/**
 * RoleBindings is a list of role bindings.
 *
 * @generated from message v1.RoleBindings
 */
export const RoleBindings = proto3.makeMessageType(
  "v1.RoleBindings",
  () => [
    { no: 1, name: "items", kind: "message", T: RoleBinding, repeated: true },
  ],
);

/**
 * Subject is a subject to which a role can be bound.
 *
 * @generated from message v1.Subject
 */
export const Subject = proto3.makeMessageType(
  "v1.Subject",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(SubjectType) },
  ],
);

/**
 * Group is a group of subjects.
 *
 * @generated from message v1.Group
 */
export const Group = proto3.makeMessageType(
  "v1.Group",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subjects", kind: "message", T: Subject, repeated: true },
  ],
);

/**
 * Groups is a list of groups.
 *
 * @generated from message v1.Groups
 */
export const Groups = proto3.makeMessageType(
  "v1.Groups",
  () => [
    { no: 1, name: "items", kind: "message", T: Group, repeated: true },
  ],
);

/**
 * RBACAction is an action that can be performed on a resource. It is used by implementations
 * to evaluate rules.
 *
 * @generated from message v1.RBACAction
 */
export const RBACAction = proto3.makeMessageType(
  "v1.RBACAction",
  () => [
    { no: 1, name: "resource", kind: "enum", T: proto3.getEnumType(RuleResource) },
    { no: 2, name: "resourceName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "verb", kind: "enum", T: proto3.getEnumType(RuleVerb) },
  ],
);

