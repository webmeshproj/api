//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v1.4.1
// @generated from file v1/storage_query.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3 } from "@bufbuild/protobuf";

/**
 * NetworkState represents the full network state as returned by
 * a network state query.
 *
 * @generated from message v1.NetworkState
 */
export const NetworkState = proto3.makeMessageType(
  "v1.NetworkState",
  () => [
    { no: 1, name: "networkV4", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "networkV6", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * QueryRequest is sent by the application to the node to query the mesh for
 * information.
 *
 * @generated from message v1.QueryRequest
 */
export const QueryRequest = proto3.makeMessageType(
  "v1.QueryRequest",
  () => [
    { no: 1, name: "command", kind: "enum", T: proto3.getEnumType(QueryRequest_QueryCommand) },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(QueryRequest_QueryType) },
    { no: 3, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "item", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * QueryCommand is the type of the query.
 *
 * @generated from enum v1.QueryRequest.QueryCommand
 */
export const QueryRequest_QueryCommand = proto3.makeEnum(
  "v1.QueryRequest.QueryCommand",
  [
    {no: 0, name: "GET"},
    {no: 1, name: "LIST"},
    {no: 2, name: "PUT"},
    {no: 3, name: "DELETE"},
  ],
);

/**
 * QueryType is the type of object being queried.
 *
 * @generated from enum v1.QueryRequest.QueryType
 */
export const QueryRequest_QueryType = proto3.makeEnum(
  "v1.QueryRequest.QueryType",
  [
    {no: 0, name: "VALUE"},
    {no: 1, name: "KEYS"},
    {no: 2, name: "PEERS"},
    {no: 3, name: "EDGES"},
    {no: 4, name: "ROUTES"},
    {no: 5, name: "ACLS"},
    {no: 6, name: "ROLES"},
    {no: 7, name: "ROLEBINDINGS"},
    {no: 8, name: "GROUPS"},
    {no: 9, name: "NETWORK_STATE"},
    {no: 10, name: "RBAC_STATE"},
  ],
);

/**
 * QueryResponse is the message containing a mesh query result.
 *
 * @generated from message v1.QueryResponse
 */
export const QueryResponse = proto3.makeMessageType(
  "v1.QueryResponse",
  () => [
    { no: 1, name: "items", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 4, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * SubscribeRequest is sent by the application to the node to subscribe to
 * events. This currently only supports database events.
 *
 * @generated from message v1.SubscribeRequest
 */
export const SubscribeRequest = proto3.makeMessageType(
  "v1.SubscribeRequest",
  () => [
    { no: 1, name: "prefix", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * SubscriptionEvent is a message containing a subscription event.
 *
 * @generated from message v1.SubscriptionEvent
 */
export const SubscriptionEvent = proto3.makeMessageType(
  "v1.SubscriptionEvent",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * PublishRequest is sent by the application to the node to publish events.
 * This currently only supports database events.
 *
 * @generated from message v1.PublishRequest
 */
export const PublishRequest = proto3.makeMessageType(
  "v1.PublishRequest",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "ttl", kind: "message", T: Duration },
  ],
);

/**
 * PublishResponse is the response to a publish request. This is currently
 * empty.
 *
 * @generated from message v1.PublishResponse
 */
export const PublishResponse = proto3.makeMessageType(
  "v1.PublishResponse",
  [],
);

