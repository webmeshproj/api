//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file v1/raft.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";

/**
 * RaftCommandType is the type of command being sent to the
 * Raft log.
 *
 * @generated from enum v1.RaftCommandType
 */
export enum RaftCommandType {
  /**
   * UNKNOWN is the unknown command type.
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * PUT is the command for putting a key/value pair.
   *
   * @generated from enum value: PUT = 1;
   */
  PUT = 1,

  /**
   * DELETE is the command for deleting a key/value pair.
   *
   * @generated from enum value: DELETE = 2;
   */
  DELETE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(RaftCommandType)
proto3.util.setEnumType(RaftCommandType, "v1.RaftCommandType", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "PUT" },
  { no: 2, name: "DELETE" },
]);

/**
 * RaftLogEntry is the data of an entry in the Raft log.
 *
 * @generated from message v1.RaftLogEntry
 */
export class RaftLogEntry extends Message<RaftLogEntry> {
  /**
   * Type is the type of the log entry.
   *
   * @generated from field: v1.RaftCommandType type = 1;
   */
  type = RaftCommandType.UNKNOWN;

  /**
   * Key is the key of the log entry.
   *
   * @generated from field: bytes key = 2;
   */
  key = new Uint8Array(0);

  /**
   * Value is the value of the log entry.
   *
   * @generated from field: bytes value = 3;
   */
  value = new Uint8Array(0);

  /**
   * TTL is the time to live of the log entry.
   *
   * @generated from field: google.protobuf.Duration ttl = 4;
   */
  ttl?: Duration;

  constructor(data?: PartialMessage<RaftLogEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.RaftLogEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(RaftCommandType) },
    { no: 2, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "ttl", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RaftLogEntry {
    return new RaftLogEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RaftLogEntry {
    return new RaftLogEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RaftLogEntry {
    return new RaftLogEntry().fromJsonString(jsonString, options);
  }

  static equals(a: RaftLogEntry | PlainMessage<RaftLogEntry> | undefined, b: RaftLogEntry | PlainMessage<RaftLogEntry> | undefined): boolean {
    return proto3.util.equals(RaftLogEntry, a, b);
  }
}

/**
 * RaftApplyResponse is the response to an apply request. It
 * contains the result of applying the log entry.
 *
 * @generated from message v1.RaftApplyResponse
 */
export class RaftApplyResponse extends Message<RaftApplyResponse> {
  /**
   * Time is the total time it took to apply the log entry.
   *
   * @generated from field: string time = 1;
   */
  time = "";

  /**
   * Error is an error that occurred during the apply.
   *
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<RaftApplyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.RaftApplyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RaftApplyResponse {
    return new RaftApplyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RaftApplyResponse {
    return new RaftApplyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RaftApplyResponse {
    return new RaftApplyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RaftApplyResponse | PlainMessage<RaftApplyResponse> | undefined, b: RaftApplyResponse | PlainMessage<RaftApplyResponse> | undefined): boolean {
    return proto3.util.equals(RaftApplyResponse, a, b);
  }
}

/**
 * RaftSnapshot is the data of a snapshot.
 *
 * @generated from message v1.RaftSnapshot
 */
export class RaftSnapshot extends Message<RaftSnapshot> {
  /**
   * KV is the key/value pairs of the snapshot.
   *
   * @generated from field: repeated v1.RaftDataItem kv = 1;
   */
  kv: RaftDataItem[] = [];

  constructor(data?: PartialMessage<RaftSnapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.RaftSnapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kv", kind: "message", T: RaftDataItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RaftSnapshot {
    return new RaftSnapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RaftSnapshot {
    return new RaftSnapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RaftSnapshot {
    return new RaftSnapshot().fromJsonString(jsonString, options);
  }

  static equals(a: RaftSnapshot | PlainMessage<RaftSnapshot> | undefined, b: RaftSnapshot | PlainMessage<RaftSnapshot> | undefined): boolean {
    return proto3.util.equals(RaftSnapshot, a, b);
  }
}

/**
 * RaftDataItem represents a value in the Raft data store.
 *
 * @generated from message v1.RaftDataItem
 */
export class RaftDataItem extends Message<RaftDataItem> {
  /**
   * Key is the key of the data item.
   *
   * @generated from field: bytes key = 1;
   */
  key = new Uint8Array(0);

  /**
   * Value is the value of the data item.
   *
   * @generated from field: bytes value = 2;
   */
  value = new Uint8Array(0);

  /**
   * TTL is the time to live of the data item.
   *
   * @generated from field: google.protobuf.Duration ttl = 3;
   */
  ttl?: Duration;

  constructor(data?: PartialMessage<RaftDataItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.RaftDataItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "ttl", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RaftDataItem {
    return new RaftDataItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RaftDataItem {
    return new RaftDataItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RaftDataItem {
    return new RaftDataItem().fromJsonString(jsonString, options);
  }

  static equals(a: RaftDataItem | PlainMessage<RaftDataItem> | undefined, b: RaftDataItem | PlainMessage<RaftDataItem> | undefined): boolean {
    return proto3.util.equals(RaftDataItem, a, b);
  }
}

