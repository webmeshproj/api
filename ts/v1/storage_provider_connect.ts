//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-connect-es v1.1.2 with parameter "target=ts"
// @generated from file v1/storage_provider.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AddObserverResponse, AddVoterResponse, BootstrapRequest, BootstrapResponse, DeleteValueRequest, DeleteValueResponse, DemoteVoterResponse, GetLeaderRequest, GetPeersRequest, GetValueRequest, GetValueResponse, ListKeysRequest, ListKeysResponse, ListValuesRequest, ListValuesResponse, PrefixEvent, PutValueRequest, PutValueResponse, RemoveServerResponse, StoragePeer, StoragePeers, StorageStatus, StorageStatusRequest, SubscribePrefixRequest } from "./storage_provider_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * StorageProviderPlugin is the service definition for a Webmesh storage provider.
 *
 * @generated from service v1.StorageProviderPlugin
 */
export const StorageProviderPlugin = {
  typeName: "v1.StorageProviderPlugin",
  methods: {
    /**
     * GetStatus returns the status of the storage.
     *
     * @generated from rpc v1.StorageProviderPlugin.GetStatus
     */
    getStatus: {
      name: "GetStatus",
      I: StorageStatusRequest,
      O: StorageStatus,
      kind: MethodKind.Unary,
    },
    /**
     * Bootstrap is called when the storage is created for the first time. 
     * It is assumed that this node has been elected as the leader of the cluster.
     * FailedPrecondition should be returned if the storage is already bootstrapped.
     *
     * @generated from rpc v1.StorageProviderPlugin.Bootstrap
     */
    bootstrap: {
      name: "Bootstrap",
      I: BootstrapRequest,
      O: BootstrapResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AddVoter adds a voter to the storage. The underlying implementation
     * should ensure that the voter is added to the storage and that the
     * storage is in a consistent state before returning.
     *
     * @generated from rpc v1.StorageProviderPlugin.AddVoter
     */
    addVoter: {
      name: "AddVoter",
      I: StoragePeer,
      O: AddVoterResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AddObserver adds an observer to the storage. The underlying implementation
     * should ensure that the observer is added to the storage and that the
     * storage is in a consistent state before returning. If observers are not
     * supported the underlying implementation can silently ignore this RPC, but
     * it should keep track of the observer in the GetStatus RPC if possible.
     *
     * @generated from rpc v1.StorageProviderPlugin.AddObserver
     */
    addObserver: {
      name: "AddObserver",
      I: StoragePeer,
      O: AddObserverResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DemoteVoter demotes a voter to an observer. The underlying implementation
     * should ensure that the voter is demoted and that the storage is in a
     * consistent state before returning. If observers are not supported the
     * underlying implementation can silently ignore this RPC, but it should keep 
     * track of the observer in the GetStatus RPC if possible.
     *
     * @generated from rpc v1.StorageProviderPlugin.DemoteVoter
     */
    demoteVoter: {
      name: "DemoteVoter",
      I: StoragePeer,
      O: DemoteVoterResponse,
      kind: MethodKind.Unary,
    },
    /**
     * RemovePeer removes a peer from the storage. The underlying implementation
     * should ensure that the server is removed and that the storage is in a
     * consistent state before returning. When called with the current ID of the
     * leader, the underlying implementation should relinquish leadership to another
     * peer if possible.
     *
     * @generated from rpc v1.StorageProviderPlugin.RemovePeer
     */
    removePeer: {
      name: "RemovePeer",
      I: StoragePeer,
      O: RemoveServerResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetLeader returns the leader of the storage. Leader may be loosely defined
     * by the implementation, but must be a node that can reliably be used to
     * mutate the storage.
     *
     * @generated from rpc v1.StorageProviderPlugin.GetLeader
     */
    getLeader: {
      name: "GetLeader",
      I: GetLeaderRequest,
      O: StoragePeer,
      kind: MethodKind.Unary,
    },
    /**
     * GetPeers returns all peers of the storage. Peer status may be loosely defined
     * by the implementation, but must correlate to nodes that can reliably be used to
     * mutate the storage.
     *
     * @generated from rpc v1.StorageProviderPlugin.GetPeers
     */
    getPeers: {
      name: "GetPeers",
      I: GetPeersRequest,
      O: StoragePeers,
      kind: MethodKind.Unary,
    },
    /**
     * GetValue returns the value for a key.
     *
     * @generated from rpc v1.StorageProviderPlugin.GetValue
     */
    getValue: {
      name: "GetValue",
      I: GetValueRequest,
      O: GetValueResponse,
      kind: MethodKind.Unary,
    },
    /**
     * PutValue puts a value for a key.
     *
     * @generated from rpc v1.StorageProviderPlugin.PutValue
     */
    putValue: {
      name: "PutValue",
      I: PutValueRequest,
      O: PutValueResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteValue deletes a value for a key.
     *
     * @generated from rpc v1.StorageProviderPlugin.DeleteValue
     */
    deleteValue: {
      name: "DeleteValue",
      I: DeleteValueRequest,
      O: DeleteValueResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListKeys lists all keys for a prefix.
     *
     * @generated from rpc v1.StorageProviderPlugin.ListKeys
     */
    listKeys: {
      name: "ListKeys",
      I: ListKeysRequest,
      O: ListKeysResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListValues lists all values for a prefix.
     *
     * @generated from rpc v1.StorageProviderPlugin.ListValues
     */
    listValues: {
      name: "ListValues",
      I: ListValuesRequest,
      O: ListValuesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SubscribePrefix subscribes to events for a prefix.
     *
     * @generated from rpc v1.StorageProviderPlugin.SubscribePrefix
     */
    subscribePrefix: {
      name: "SubscribePrefix",
      I: SubscribePrefixRequest,
      O: PrefixEvent,
      kind: MethodKind.ServerStreaming,
    },
  }
} as const;

