//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v1.4.0
// @generated from file v1/storage_provider.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3 } from "@bufbuild/protobuf";
import { ClusterStatus } from "./node_pb.js";

/**
 * BootstrapRequest is the request object for the Bootstrap RPC.
 *
 * @generated from message v1.BootstrapRequest
 */
export const BootstrapRequest = proto3.makeMessageType(
  "v1.BootstrapRequest",
  [],
);

/**
 * BootstrapResponse is the response object for the Bootstrap RPC.
 *
 * @generated from message v1.BootstrapResponse
 */
export const BootstrapResponse = proto3.makeMessageType(
  "v1.BootstrapResponse",
  () => [
    { no: 1, name: "status", kind: "message", T: StorageStatus },
  ],
);

/**
 * GetPeersRequest is the request object for the GetPeers RPC.
 *
 * @generated from message v1.GetPeersRequest
 */
export const GetPeersRequest = proto3.makeMessageType(
  "v1.GetPeersRequest",
  [],
);

/**
 * GetLeaderRequest is the request object for the GetLeader RPC.
 *
 * @generated from message v1.GetLeaderRequest
 */
export const GetLeaderRequest = proto3.makeMessageType(
  "v1.GetLeaderRequest",
  [],
);

/**
 * StorageStatusRequest is the request object for the StorageStatus RPC.
 *
 * @generated from message v1.StorageStatusRequest
 */
export const StorageStatusRequest = proto3.makeMessageType(
  "v1.StorageStatusRequest",
  [],
);

/**
 * StorageStatus is the response object for the StorageStatus RPC.
 *
 * @generated from message v1.StorageStatus
 */
export const StorageStatus = proto3.makeMessageType(
  "v1.StorageStatus",
  () => [
    { no: 1, name: "isWritable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "clusterStatus", kind: "enum", T: proto3.getEnumType(ClusterStatus) },
    { no: 3, name: "peers", kind: "message", T: StoragePeer, repeated: true },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * StoragePeer is a server that is currently recognized by the storage plugin.
 *
 * @generated from message v1.StoragePeer
 */
export const StoragePeer = proto3.makeMessageType(
  "v1.StoragePeer",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "publicKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "clusterStatus", kind: "enum", T: proto3.getEnumType(ClusterStatus) },
  ],
);

/**
 * StoragePeers is a list of servers that are currently recognized by the storage plugin.
 *
 * @generated from message v1.StoragePeers
 */
export const StoragePeers = proto3.makeMessageType(
  "v1.StoragePeers",
  () => [
    { no: 1, name: "peers", kind: "message", T: StoragePeer, repeated: true },
  ],
);

/**
 * AddVoterResponse is the response object for the AddVoter RPC.
 *
 * @generated from message v1.AddVoterResponse
 */
export const AddVoterResponse = proto3.makeMessageType(
  "v1.AddVoterResponse",
  [],
);

/**
 * AddObserverResponse is the response object for the AddObserver RPC.
 *
 * @generated from message v1.AddObserverResponse
 */
export const AddObserverResponse = proto3.makeMessageType(
  "v1.AddObserverResponse",
  [],
);

/**
 * DemoteVoterResponse is the response object for the DemoteVoter RPC.
 *
 * @generated from message v1.DemoteVoterResponse
 */
export const DemoteVoterResponse = proto3.makeMessageType(
  "v1.DemoteVoterResponse",
  [],
);

/**
 * RemoveServerResponse is the response object for the RemoveServer RPC.
 *
 * @generated from message v1.RemoveServerResponse
 */
export const RemoveServerResponse = proto3.makeMessageType(
  "v1.RemoveServerResponse",
  [],
);

/**
 * StorageValue is a value stored in the storage.
 *
 * @generated from message v1.StorageValue
 */
export const StorageValue = proto3.makeMessageType(
  "v1.StorageValue",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * GetValueRequest is the request object for the GetValue RPC.
 *
 * @generated from message v1.GetValueRequest
 */
export const GetValueRequest = proto3.makeMessageType(
  "v1.GetValueRequest",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * GetValueResponse is the response object for the GetValue RPC.
 *
 * @generated from message v1.GetValueResponse
 */
export const GetValueResponse = proto3.makeMessageType(
  "v1.GetValueResponse",
  () => [
    { no: 1, name: "value", kind: "message", T: StorageValue },
  ],
);

/**
 * PutValueRequest is the request object for the PutValue RPC.
 *
 * @generated from message v1.PutValueRequest
 */
export const PutValueRequest = proto3.makeMessageType(
  "v1.PutValueRequest",
  () => [
    { no: 1, name: "value", kind: "message", T: StorageValue },
    { no: 2, name: "ttl", kind: "message", T: Duration },
  ],
);

/**
 * PutValueResponse is the response object for the PutValue RPC.
 *
 * @generated from message v1.PutValueResponse
 */
export const PutValueResponse = proto3.makeMessageType(
  "v1.PutValueResponse",
  [],
);

/**
 * DeleteValueRequest is the request object for the DeleteValue RPC.
 *
 * @generated from message v1.DeleteValueRequest
 */
export const DeleteValueRequest = proto3.makeMessageType(
  "v1.DeleteValueRequest",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * DeleteValueResponse is the response object for the DeleteValue RPC.
 *
 * @generated from message v1.DeleteValueResponse
 */
export const DeleteValueResponse = proto3.makeMessageType(
  "v1.DeleteValueResponse",
  [],
);

/**
 * ListKeysRequest is the request object for the ListValues RPC.
 *
 * @generated from message v1.ListKeysRequest
 */
export const ListKeysRequest = proto3.makeMessageType(
  "v1.ListKeysRequest",
  () => [
    { no: 1, name: "prefix", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * ListKeysResponse is the response object for the ListValues RPC.
 *
 * @generated from message v1.ListKeysResponse
 */
export const ListKeysResponse = proto3.makeMessageType(
  "v1.ListKeysResponse",
  () => [
    { no: 1, name: "keys", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ],
);

/**
 * ListValuesRequest is the request object for the ListValues RPC.
 *
 * @generated from message v1.ListValuesRequest
 */
export const ListValuesRequest = proto3.makeMessageType(
  "v1.ListValuesRequest",
  () => [
    { no: 1, name: "prefix", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * ListValuesResponse is the response object for the ListValues RPC.
 *
 * @generated from message v1.ListValuesResponse
 */
export const ListValuesResponse = proto3.makeMessageType(
  "v1.ListValuesResponse",
  () => [
    { no: 1, name: "values", kind: "message", T: StorageValue, repeated: true },
  ],
);

/**
 * SubscribePrefixRequest is the request object for the SubscribePrefix RPC.
 *
 * @generated from message v1.SubscribePrefixRequest
 */
export const SubscribePrefixRequest = proto3.makeMessageType(
  "v1.SubscribePrefixRequest",
  () => [
    { no: 1, name: "prefix", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * PrefixEvent is an event that is emitted when a value is added or removed
 * from the storage for a prefix.
 *
 * @generated from message v1.PrefixEvent
 */
export const PrefixEvent = proto3.makeMessageType(
  "v1.PrefixEvent",
  () => [
    { no: 1, name: "prefix", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "value", kind: "message", T: StorageValue },
    { no: 3, name: "eventType", kind: "enum", T: proto3.getEnumType(PrefixEvent_EventType) },
  ],
);

/**
 * @generated from enum v1.PrefixEvent.EventType
 */
export const PrefixEvent_EventType = proto3.makeEnum(
  "v1.PrefixEvent.EventType",
  [
    {no: 0, name: "EventTypeUnknown"},
    {no: 1, name: "EventTypeUpdated"},
    {no: 2, name: "EventTypeRemoved"},
  ],
);

