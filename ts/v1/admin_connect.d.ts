//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-connect-es v1.1.2
// @generated from file v1/admin.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Group, Groups, Role, RoleBinding, RoleBindings, Roles } from "./rbac_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";
import { NetworkACL, NetworkACLs, Route, Routes } from "./network_acls_pb.js";
import { MeshEdge, MeshEdges } from "./mesh_pb.js";

/**
 * Admin is the service that provides cluster admin operations. Most methods 
 * require the leader to be contacted.
 *
 * @generated from service v1.Admin
 */
export declare const Admin: {
  readonly typeName: "v1.Admin",
  readonly methods: {
    /**
     * PutRole creates or updates a role.
     *
     * @generated from rpc v1.Admin.PutRole
     */
    readonly putRole: {
      readonly name: "PutRole",
      readonly I: typeof Role,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * DeleteRole deletes a role.
     *
     * @generated from rpc v1.Admin.DeleteRole
     */
    readonly deleteRole: {
      readonly name: "DeleteRole",
      readonly I: typeof Role,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetRole gets a role.
     *
     * @generated from rpc v1.Admin.GetRole
     */
    readonly getRole: {
      readonly name: "GetRole",
      readonly I: typeof Role,
      readonly O: typeof Role,
      readonly kind: MethodKind.Unary,
    },
    /**
     * ListRoles gets all roles.
     *
     * @generated from rpc v1.Admin.ListRoles
     */
    readonly listRoles: {
      readonly name: "ListRoles",
      readonly I: typeof Empty,
      readonly O: typeof Roles,
      readonly kind: MethodKind.Unary,
    },
    /**
     * PutRoleBinding creates or updates a role binding.
     *
     * @generated from rpc v1.Admin.PutRoleBinding
     */
    readonly putRoleBinding: {
      readonly name: "PutRoleBinding",
      readonly I: typeof RoleBinding,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * DeleteRoleBinding deletes a role binding.
     *
     * @generated from rpc v1.Admin.DeleteRoleBinding
     */
    readonly deleteRoleBinding: {
      readonly name: "DeleteRoleBinding",
      readonly I: typeof RoleBinding,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetRoleBinding gets a role binding.
     *
     * @generated from rpc v1.Admin.GetRoleBinding
     */
    readonly getRoleBinding: {
      readonly name: "GetRoleBinding",
      readonly I: typeof RoleBinding,
      readonly O: typeof RoleBinding,
      readonly kind: MethodKind.Unary,
    },
    /**
     * ListRoleBindings gets all role bindings.
     *
     * @generated from rpc v1.Admin.ListRoleBindings
     */
    readonly listRoleBindings: {
      readonly name: "ListRoleBindings",
      readonly I: typeof Empty,
      readonly O: typeof RoleBindings,
      readonly kind: MethodKind.Unary,
    },
    /**
     * PutGroup creates or updates a group.
     *
     * @generated from rpc v1.Admin.PutGroup
     */
    readonly putGroup: {
      readonly name: "PutGroup",
      readonly I: typeof Group,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * DeleteGroup deletes a group.
     *
     * @generated from rpc v1.Admin.DeleteGroup
     */
    readonly deleteGroup: {
      readonly name: "DeleteGroup",
      readonly I: typeof Group,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetGroup gets a group.
     *
     * @generated from rpc v1.Admin.GetGroup
     */
    readonly getGroup: {
      readonly name: "GetGroup",
      readonly I: typeof Group,
      readonly O: typeof Group,
      readonly kind: MethodKind.Unary,
    },
    /**
     * ListGroups gets all groups.
     *
     * @generated from rpc v1.Admin.ListGroups
     */
    readonly listGroups: {
      readonly name: "ListGroups",
      readonly I: typeof Empty,
      readonly O: typeof Groups,
      readonly kind: MethodKind.Unary,
    },
    /**
     * PutNetworkACL creates or updates a network ACL.
     *
     * @generated from rpc v1.Admin.PutNetworkACL
     */
    readonly putNetworkACL: {
      readonly name: "PutNetworkACL",
      readonly I: typeof NetworkACL,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * DeleteNetworkACL deletes a network ACL.
     *
     * @generated from rpc v1.Admin.DeleteNetworkACL
     */
    readonly deleteNetworkACL: {
      readonly name: "DeleteNetworkACL",
      readonly I: typeof NetworkACL,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetNetworkACL gets a network ACL.
     *
     * @generated from rpc v1.Admin.GetNetworkACL
     */
    readonly getNetworkACL: {
      readonly name: "GetNetworkACL",
      readonly I: typeof NetworkACL,
      readonly O: typeof NetworkACL,
      readonly kind: MethodKind.Unary,
    },
    /**
     * ListNetworkACLs gets all network ACLs.
     *
     * @generated from rpc v1.Admin.ListNetworkACLs
     */
    readonly listNetworkACLs: {
      readonly name: "ListNetworkACLs",
      readonly I: typeof Empty,
      readonly O: typeof NetworkACLs,
      readonly kind: MethodKind.Unary,
    },
    /**
     * PutRoute creates or updates a route.
     *
     * @generated from rpc v1.Admin.PutRoute
     */
    readonly putRoute: {
      readonly name: "PutRoute",
      readonly I: typeof Route,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * DeleteRoute deletes a route.
     *
     * @generated from rpc v1.Admin.DeleteRoute
     */
    readonly deleteRoute: {
      readonly name: "DeleteRoute",
      readonly I: typeof Route,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetRoute gets a route.
     *
     * @generated from rpc v1.Admin.GetRoute
     */
    readonly getRoute: {
      readonly name: "GetRoute",
      readonly I: typeof Route,
      readonly O: typeof Route,
      readonly kind: MethodKind.Unary,
    },
    /**
     * ListRoutes gets all routes.
     *
     * @generated from rpc v1.Admin.ListRoutes
     */
    readonly listRoutes: {
      readonly name: "ListRoutes",
      readonly I: typeof Empty,
      readonly O: typeof Routes,
      readonly kind: MethodKind.Unary,
    },
    /**
     * PutEdge creates or updates an edge between two nodes.
     *
     * @generated from rpc v1.Admin.PutEdge
     */
    readonly putEdge: {
      readonly name: "PutEdge",
      readonly I: typeof MeshEdge,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * DeleteEdge deletes an edge between two nodes.
     *
     * @generated from rpc v1.Admin.DeleteEdge
     */
    readonly deleteEdge: {
      readonly name: "DeleteEdge",
      readonly I: typeof MeshEdge,
      readonly O: typeof Empty,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetEdge gets an edge between two nodes.
     *
     * @generated from rpc v1.Admin.GetEdge
     */
    readonly getEdge: {
      readonly name: "GetEdge",
      readonly I: typeof MeshEdge,
      readonly O: typeof MeshEdge,
      readonly kind: MethodKind.Unary,
    },
    /**
     * ListEdges gets all current edges.
     *
     * @generated from rpc v1.Admin.ListEdges
     */
    readonly listEdges: {
      readonly name: "ListEdges",
      readonly I: typeof Empty,
      readonly O: typeof MeshEdges,
      readonly kind: MethodKind.Unary,
    },
  }
};

