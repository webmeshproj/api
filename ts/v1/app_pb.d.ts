//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v1.4.0
// @generated from file v1/app.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { InterfaceMetrics, MeshNode } from "./node_pb.js";

/**
 * ConnectRequest is sent by the application to the node to establish a
 * connection to a mesh. This message will eventually contain unique
 * identifiers to allow creating connections to multiple meshes.
 *
 * @generated from message v1.ConnectRequest
 */
export declare class ConnectRequest extends Message<ConnectRequest> {
  /**
   * id is the unique identifier of this connection. If not provided
   * one will be generated.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * addrType is the type of join addresses in the addrs list.
   *
   * @generated from field: v1.ConnectRequest.AddrType addrType = 2;
   */
  addrType: ConnectRequest_AddrType;

  /**
   * addrs are the join addresses to use to connect to the mesh.
   *
   * Service exposing options?
   *
   * @generated from field: repeated string addrs = 3;
   */
  addrs: string[];

  constructor(data?: PartialMessage<ConnectRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.ConnectRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectRequest;

  static equals(a: ConnectRequest | PlainMessage<ConnectRequest> | undefined, b: ConnectRequest | PlainMessage<ConnectRequest> | undefined): boolean;
}

/**
 * AddrType is the type of join addresses included in the request.
 *
 * @generated from enum v1.ConnectRequest.AddrType
 */
export declare enum ConnectRequest_AddrType {
  /**
   * IP is used to join a mesh using an IP address.
   *
   * @generated from enum value: IP = 0;
   */
  IP = 0,

  /**
   * DNS is used to join a mesh using a DNS name.
   *
   * @generated from enum value: DNS = 1;
   */
  DNS = 1,

  /**
   * MULTIADDR is used to join a mesh using a multiaddr.
   *
   * @generated from enum value: MULTIADDR = 2;
   */
  MULTIADDR = 2,
}

/**
 * ConnectResponse is returned by the Connect RPC.
 *
 * @generated from message v1.ConnectResponse
 */
export declare class ConnectResponse extends Message<ConnectResponse> {
  /**
   * id is the unique identifier of this connection.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * node id is the unique identifier of the node.
   *
   * @generated from field: string nodeID = 2;
   */
  nodeID: string;

  /**
   * mesh domain is the domain of the mesh.
   *
   * @generated from field: string meshDomain = 3;
   */
  meshDomain: string;

  /**
   * ipv4 is the IPv4 address of the node.
   *
   * @generated from field: string ipv4 = 4;
   */
  ipv4: string;

  /**
   * ipv6 is the IPv6 address of the node.
   *
   * Anything else?
   *
   * @generated from field: string ipv6 = 5;
   */
  ipv6: string;

  constructor(data?: PartialMessage<ConnectResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.ConnectResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectResponse;

  static equals(a: ConnectResponse | PlainMessage<ConnectResponse> | undefined, b: ConnectResponse | PlainMessage<ConnectResponse> | undefined): boolean;
}

/**
 * DisconnectRequest is sent by the application to the node to disconnect
 * from a mesh. This message will eventually contain unique identifiers
 * for allowing the application to disconnect from a specific mesh.
 *
 * @generated from message v1.DisconnectRequest
 */
export declare class DisconnectRequest extends Message<DisconnectRequest> {
  constructor(data?: PartialMessage<DisconnectRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.DisconnectRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisconnectRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisconnectRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisconnectRequest;

  static equals(a: DisconnectRequest | PlainMessage<DisconnectRequest> | undefined, b: DisconnectRequest | PlainMessage<DisconnectRequest> | undefined): boolean;
}

/**
 * DisconnectResponse is returned by the Disconnect RPC.
 *
 * @generated from message v1.DisconnectResponse
 */
export declare class DisconnectResponse extends Message<DisconnectResponse> {
  constructor(data?: PartialMessage<DisconnectResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.DisconnectResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisconnectResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisconnectResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisconnectResponse;

  static equals(a: DisconnectResponse | PlainMessage<DisconnectResponse> | undefined, b: DisconnectResponse | PlainMessage<DisconnectResponse> | undefined): boolean;
}

/**
 * MetricsRequest is sent by the application to the node to retrieve interface
 * metrics. It is intentionally empty for now, but can eventually be used to 
 * query specific interfaces/metrics.
 *
 * @generated from message v1.MetricsRequest
 */
export declare class MetricsRequest extends Message<MetricsRequest> {
  constructor(data?: PartialMessage<MetricsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.MetricsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsRequest;

  static equals(a: MetricsRequest | PlainMessage<MetricsRequest> | undefined, b: MetricsRequest | PlainMessage<MetricsRequest> | undefined): boolean;
}

/**
 * MetricsResponse is a message containing interface metrics.
 *
 * @generated from message v1.MetricsResponse
 */
export declare class MetricsResponse extends Message<MetricsResponse> {
  /**
   * interfaces is a map of interface names to metrics.
   *
   * @generated from field: map<string, v1.InterfaceMetrics> interfaces = 1;
   */
  interfaces: { [key: string]: InterfaceMetrics };

  constructor(data?: PartialMessage<MetricsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.MetricsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsResponse;

  static equals(a: MetricsResponse | PlainMessage<MetricsResponse> | undefined, b: MetricsResponse | PlainMessage<MetricsResponse> | undefined): boolean;
}

/**
 * StatusRequest is sent by the application to the node to retrieve the status
 * of the node.
 *
 * @generated from message v1.StatusRequest
 */
export declare class StatusRequest extends Message<StatusRequest> {
  constructor(data?: PartialMessage<StatusRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.StatusRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusRequest;

  static equals(a: StatusRequest | PlainMessage<StatusRequest> | undefined, b: StatusRequest | PlainMessage<StatusRequest> | undefined): boolean;
}

/**
 * StatusResponse is a message containing the status of the node.
 *
 * @generated from message v1.StatusResponse
 */
export declare class StatusResponse extends Message<StatusResponse> {
  /**
   * connection status is the status of the connection.
   *
   * @generated from field: v1.StatusResponse.ConnectionStatus connection_status = 1;
   */
  connectionStatus: StatusResponse_ConnectionStatus;

  /**
   * node is the node status. This is only populated if the node is connected.
   *
   * @generated from field: v1.MeshNode node = 2;
   */
  node?: MeshNode;

  constructor(data?: PartialMessage<StatusResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.StatusResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse;

  static equals(a: StatusResponse | PlainMessage<StatusResponse> | undefined, b: StatusResponse | PlainMessage<StatusResponse> | undefined): boolean;
}

/**
 * @generated from enum v1.StatusResponse.ConnectionStatus
 */
export declare enum StatusResponse_ConnectionStatus {
  /**
   * DISCONNECTED indicates that the node is not connected to a mesh.
   *
   * @generated from enum value: DISCONNECTED = 0;
   */
  DISCONNECTED = 0,

  /**
   * CONNECTING indicates that the node is in the process of connecting to a mesh.
   *
   * @generated from enum value: CONNECTING = 1;
   */
  CONNECTING = 1,

  /**
   * CONNECTED indicates that the node is connected to a mesh.
   *
   * @generated from enum value: CONNECTED = 2;
   */
  CONNECTED = 2,
}

/**
 * AnnounceDHTRequest is sent by the application to the node to announce the
 * node's presence on the Kademlia DHT for other nodes to discover.
 *
 * @generated from message v1.AnnounceDHTRequest
 */
export declare class AnnounceDHTRequest extends Message<AnnounceDHTRequest> {
  /**
   * Bootstrap servers are optional bootstrap servers to use for bootstrapping
   * the DHT. If not provided, the node will use the default bootstrap servers.
   *
   * @generated from field: repeated string bootstrapServers = 1;
   */
  bootstrapServers: string[];

  /**
   * PSK is the pre-shared key to use for the DHT.
   *
   * @generated from field: string psk = 2;
   */
  psk: string;

  constructor(data?: PartialMessage<AnnounceDHTRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.AnnounceDHTRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnnounceDHTRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnnounceDHTRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnnounceDHTRequest;

  static equals(a: AnnounceDHTRequest | PlainMessage<AnnounceDHTRequest> | undefined, b: AnnounceDHTRequest | PlainMessage<AnnounceDHTRequest> | undefined): boolean;
}

/**
 * AnnounceDHTResponse is returned by the AnnounceDHT RPC.
 *
 * @generated from message v1.AnnounceDHTResponse
 */
export declare class AnnounceDHTResponse extends Message<AnnounceDHTResponse> {
  constructor(data?: PartialMessage<AnnounceDHTResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.AnnounceDHTResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnnounceDHTResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnnounceDHTResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnnounceDHTResponse;

  static equals(a: AnnounceDHTResponse | PlainMessage<AnnounceDHTResponse> | undefined, b: AnnounceDHTResponse | PlainMessage<AnnounceDHTResponse> | undefined): boolean;
}

/**
 * LeaveDHTRequest is sent by the application to the node to leave the Kademlia
 * DHT.
 *
 * @generated from message v1.LeaveDHTRequest
 */
export declare class LeaveDHTRequest extends Message<LeaveDHTRequest> {
  /**
   * PSK is the pre-shared key that was used to join the DHT.
   *
   * @generated from field: string psk = 1;
   */
  psk: string;

  constructor(data?: PartialMessage<LeaveDHTRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.LeaveDHTRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveDHTRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveDHTRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveDHTRequest;

  static equals(a: LeaveDHTRequest | PlainMessage<LeaveDHTRequest> | undefined, b: LeaveDHTRequest | PlainMessage<LeaveDHTRequest> | undefined): boolean;
}

/**
 * LeaveDHTResponse is returned by the LeaveDHT RPC.
 *
 * @generated from message v1.LeaveDHTResponse
 */
export declare class LeaveDHTResponse extends Message<LeaveDHTResponse> {
  constructor(data?: PartialMessage<LeaveDHTResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "v1.LeaveDHTResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveDHTResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveDHTResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveDHTResponse;

  static equals(a: LeaveDHTResponse | PlainMessage<LeaveDHTResponse> | undefined, b: LeaveDHTResponse | PlainMessage<LeaveDHTResponse> | undefined): boolean;
}

