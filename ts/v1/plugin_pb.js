//
//Copyright 2023 Avi Zimmerman <avi.zimmerman@gmail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// @generated by protoc-gen-es v1.4.0
// @generated from file v1/plugin.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3, Struct } from "@bufbuild/protobuf";
import { MeshNode } from "./node_pb.js";

/**
 * PluginConfiguration is the message containing the configuration of a plugin.
 *
 * @generated from message v1.PluginConfiguration
 */
export const PluginConfiguration = proto3.makeMessageType(
  "v1.PluginConfiguration",
  () => [
    { no: 1, name: "config", kind: "message", T: Struct },
    { no: 2, name: "nodeConfig", kind: "message", T: NodeConfiguration },
  ],
);

/**
 * NodeConfiguration is the message containing the configuration of the
 * node and the network that it is a part of.
 *
 * @generated from message v1.NodeConfiguration
 */
export const NodeConfiguration = proto3.makeMessageType(
  "v1.NodeConfiguration",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "networkIPv4", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "networkIPv6", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "addressIPv4", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "addressIPv6", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "privateKey", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * PluginInfo is the information of a plugin.
 *
 * @generated from message v1.PluginInfo
 */
export const PluginInfo = proto3.makeMessageType(
  "v1.PluginInfo",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "capabilities", kind: "enum", T: proto3.getEnumType(PluginInfo_PluginCapability), repeated: true },
  ],
);

/**
 * PluginCapability is the capabilities of a plugin.
 *
 * @generated from enum v1.PluginInfo.PluginCapability
 */
export const PluginInfo_PluginCapability = proto3.makeEnum(
  "v1.PluginInfo.PluginCapability",
  [
    {no: 0, name: "UNKNOWN"},
    {no: 1, name: "STORAGE_PROVIDER"},
    {no: 2, name: "AUTH"},
    {no: 3, name: "WATCH"},
    {no: 4, name: "IPAMV4"},
    {no: 5, name: "STORAGE_QUERIER"},
  ],
);

/**
 * AuthenticationRequest is the message containing an authentication request.
 *
 * @generated from message v1.AuthenticationRequest
 */
export const AuthenticationRequest = proto3.makeMessageType(
  "v1.AuthenticationRequest",
  () => [
    { no: 1, name: "headers", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 2, name: "certificates", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ],
);

/**
 * AuthenticationResponse is the message containing an authentication response.
 *
 * @generated from message v1.AuthenticationResponse
 */
export const AuthenticationResponse = proto3.makeMessageType(
  "v1.AuthenticationResponse",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Event is the message containing a watch event.
 *
 * @generated from message v1.Event
 */
export const Event = proto3.makeMessageType(
  "v1.Event",
  () => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(Event_WatchEvent) },
    { no: 2, name: "node", kind: "message", T: MeshNode, oneof: "event" },
  ],
);

/**
 * WatchEvent is the type of a watch event.
 *
 * @generated from enum v1.Event.WatchEvent
 */
export const Event_WatchEvent = proto3.makeEnum(
  "v1.Event.WatchEvent",
  [
    {no: 0, name: "UNKNOWN"},
    {no: 1, name: "NODE_JOIN"},
    {no: 2, name: "NODE_LEAVE"},
    {no: 3, name: "LEADER_CHANGE"},
  ],
);

/**
 * AllocateIPRequest is the message containing an IP allocation request.
 *
 * @generated from message v1.AllocateIPRequest
 */
export const AllocateIPRequest = proto3.makeMessageType(
  "v1.AllocateIPRequest",
  () => [
    { no: 1, name: "nodeID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subnet", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * AllocatedIP is the message containing an allocated IP.
 *
 * @generated from message v1.AllocatedIP
 */
export const AllocatedIP = proto3.makeMessageType(
  "v1.AllocatedIP",
  () => [
    { no: 1, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * ReleaseIPRequest is the message containing an IP release request.
 *
 * @generated from message v1.ReleaseIPRequest
 */
export const ReleaseIPRequest = proto3.makeMessageType(
  "v1.ReleaseIPRequest",
  () => [
    { no: 1, name: "nodeID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

